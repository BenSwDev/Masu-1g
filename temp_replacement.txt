      } else if (guestInfo.isBookingForSomeoneElse && guestInfo.recipientPhone) {
        //  NEW: Both logged-in user and guest booking for someone else - create user for recipient
        try {
          const { findOrCreateUserByPhone } = await import("@/actions/auth-actions")
          const recipientResult = await findOrCreateUserByPhone(guestInfo.recipientPhone, {
            name: ${guestInfo.recipientFirstName} ,
            email: guestInfo.recipientEmail,
            gender: guestInfo.recipientGender,
            dateOfBirth: guestInfo.recipientBirthDate
          })
          
          if (recipientResult.success) {
            targetUserId = recipientResult.userId
            console.log(" Created/found user for recipient:", targetUserId)
          } else {
            console.warn("Failed to find/create recipient user:", recipientResult.error)
            // Don't fail the booking, just proceed with fallback logic
            if (currentUser) {
              targetUserId = currentUser.id // Use booker as fallback
            } else {
              targetUserId = null // Guest booking as fallback
            }
          }
        } catch (error) {
          console.warn("Error creating recipient user:", error)
          // Don't fail the booking, just proceed with fallback logic
          if (currentUser) {
            targetUserId = currentUser.id // Use booker as fallback
          } else {
            targetUserId = null // Guest booking as fallback
          }
        }
      } else if (currentUser) {
        // No redemption and not booking for someone else - use current logged-in user
        targetUserId = currentUser.id
      }
