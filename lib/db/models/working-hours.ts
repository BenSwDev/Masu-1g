import mongoose, { Schema, type Document, type Model } from "mongoose"

// Interface for FixedWorkingDay (subdocument)
export interface IFixedWorkingDay {
  dayOfWeek: number // 0: Sunday, ..., 6: Saturday
  isActive: boolean
  startTime?: string // HH:mm
  endTime?: string // HH:mm
  hasSurcharge: boolean
  surchargeType?: "fixed" | "percentage"
  surchargeAmount?: number
  notes?: string
}

// Schema for FixedWorkingDay
const FixedWorkingDaySchema = new Schema<IFixedWorkingDay>(
  {
    dayOfWeek: { type: Number, required: true, min: 0, max: 6 },
    isActive: { type: Boolean, default: false },
    startTime: {
      type: String,
      validate: {
        validator: (v?: string) => (v ? /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/.test(v) : true),
        message: "Invalid time format. Use HH:mm",
      },
    },
    endTime: {
      type: String,
      validate: {
        validator: (v?: string) => (v ? /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/.test(v) : true),
        message: "Invalid time format. Use HH:mm",
      },
    },
    hasSurcharge: { type: Boolean, default: false },
    surchargeType: { type: String, enum: ["fixed", "percentage"] },
    surchargeAmount: { type: Number, min: 0 },
    notes: { type: String, trim: true },
  },
  { _id: false },
)

// Interface for SpecialDateWorkingHours (subdocument)
export interface ISpecialDateWorkingHours {
  _id?: mongoose.Types.ObjectId // Added for easier client-side management if needed
  date: Date
  description?: string
  isActive: boolean
  startTime?: string // HH:mm
  endTime?: string // HH:mm
  hasSurcharge: boolean
  surchargeType?: "fixed" | "percentage"
  surchargeAmount?: number
  notes?: string
}

// Schema for SpecialDateWorkingHours
const SpecialDateWorkingHoursSchema = new Schema<ISpecialDateWorkingHours>(
  {
    date: { type: Date, required: true },
    description: { type: String, trim: true },
    isActive: { type: Boolean, default: false },
    startTime: {
      type: String,
      validate: {
        validator: (v?: string) => (v ? /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/.test(v) : true),
        message: "Invalid time format. Use HH:mm",
      },
    },
    endTime: {
      type: String,
      validate: {
        validator: (v?: string) => (v ? /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/.test(v) : true),
        message: "Invalid time format. Use HH:mm",
      },
    },
    hasSurcharge: { type: Boolean, default: false },
    surchargeType: { type: String, enum: ["fixed", "percentage"] },
    surchargeAmount: { type: Number, min: 0 },
    notes: { type: String, trim: true },
  },
  { timestamps: false },
) // _id is generated by default for array subdocuments

// Interface for WorkingHoursSettings Document
export interface IWorkingHoursSettings extends Document {
  fixedHours: IFixedWorkingDay[]
  specialDates: ISpecialDateWorkingHours[]
  createdAt: Date
  updatedAt: Date
}

// Schema for WorkingHoursSettings
const WorkingHoursSettingsSchema = new Schema<IWorkingHoursSettings>(
  {
    fixedHours: [FixedWorkingDaySchema],
    specialDates: [SpecialDateWorkingHoursSchema],
  },
  {
    timestamps: true,
    // Assuming a single document for the entire business.
    // Could add a unique key like `businessId: { type: String, unique: true, default: 'main' }`
    // if multiple settings documents were ever needed.
  },
)

// Initialize fixedHours with all 7 days if not present or length is incorrect
WorkingHoursSettingsSchema.pre<IWorkingHoursSettings>("save", function (next) {
  if (this.isNew || !this.fixedHours || this.fixedHours.length !== 7) {
    const days = Array.from({ length: 7 }, (_, i) => i) // 0 (Sunday) to 6 (Saturday)
    const existingDaysMap = new Map(this.fixedHours?.map((fh) => [fh.dayOfWeek, fh]))

    this.fixedHours = days
      .map((day) => {
        const existingDay = existingDaysMap.get(day)
        return (
          existingDay || {
            dayOfWeek: day,
            isActive: false,
            hasSurcharge: false,
            startTime: undefined,
            endTime: undefined,
            surchargeType: undefined,
            surchargeAmount: undefined,
            notes: undefined,
          }
        )
      })
      .sort((a, b) => a.dayOfWeek - b.dayOfWeek) // Ensure consistent order
  } else {
    // Ensure consistent order even if length is 7
    this.fixedHours.sort((a, b) => a.dayOfWeek - b.dayOfWeek)
  }
  next()
})

const WorkingHoursSettings: Model<IWorkingHoursSettings> =
  mongoose.models.WorkingHoursSettings ||
  mongoose.model<IWorkingHoursSettings>("WorkingHoursSettings", WorkingHoursSettingsSchema)

export default WorkingHoursSettings
