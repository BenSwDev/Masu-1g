{
  "files": [
    {
      "path": "actions\\booking-actions.ts",
      "lines": 2638,
      "complexity": 501,
      "conditionals": [
        {
          "type": "if",
          "line": 64,
          "condition": "settings.specialDateEvents",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 68,
          "condition": "isSameDay(new Date(eventDate), date)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "specialDateSetting",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "isNaN(selectedDateUTC.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 98,
          "condition": "!treatment || !treatment.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "!settings",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "treatment.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 107,
          "condition": "treatment.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "!selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 112,
          "condition": "!durationObj",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 115,
          "condition": "treatmentDurationMinutes <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 119,
          "condition": "!daySettings || !daySettings.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 130,
          "condition": "isToday && 'cutoffTime' in daySettings && daySettings.cutoffTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 137,
          "condition": "isToday && isCutoffTimeReached",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 159,
          "condition": "endTimeMinutes <= startTimeMinutes",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 170,
          "condition": "daySettings.hasPriceAddition && daySettings.priceAddition && daySettings.priceAddition.amount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 194,
          "condition": "isSlotAvailable",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 197,
          "condition": "surchargeAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 204,
          "condition": "!isToday && 'cutoffTime' in daySettings && daySettings.cutoffTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 220,
          "condition": "!validationResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 237,
          "condition": "!treatment || !treatment.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 240,
          "condition": "treatment.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 242,
          "condition": "treatment.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 243,
          "condition": "!selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 247,
          "condition": "!duration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 260,
          "condition": "settings",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 262,
          "condition": "daySettings?.isActive &&\n        daySettings.hasPriceAddition &&\n        daySettings.priceAddition?.amount &&\n        daySettings.priceAddition.amount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 271,
          "condition": "surchargeAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 279,
          "condition": "userSubscriptionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 286,
          "condition": "userSub &&\n        ((userSub.userId && userId && userSub.userId.toString() === userId) || (userSub.userId == null && userId == null)) &&\n        userSub.status === \"active\" &&\n        userSub.remainin",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 294,
          "condition": "isTreatmentMatch && subTreatment.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 301,
          "condition": "isTreatmentMatch && isDurationMatch",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 307,
          "condition": "giftVoucherCode",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 312,
          "condition": "voucher && voucher.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 314,
          "condition": "voucher.voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 318,
          "condition": "treatment.pricingType === \"duration_based\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 322,
          "condition": "!voucher.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 325,
          "condition": "treatmentMatches && durationMatches && !priceDetails.isBaseTreatmentCoveredBySubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 335,
          "condition": "priceDetails.appliedGiftVoucherId && subtotalBeforeGeneralReductions > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 340,
          "condition": "voucherToApply &&\n        voucherToApply.isActive &&\n        voucherToApply.voucherType === \"monetary\" &&\n        voucherToApply.remainingAmount &&\n        voucherToApply.remainingAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 346,
          "condition": "amountToApplyFromMonetary > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 352,
          "condition": "currentTotalDue > 0 && couponCode && !giftVoucherCode && !userSubscriptionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 356,
          "condition": "coupon &&\n        coupon.isActive &&\n        new Date(coupon.validFrom) <= now &&\n        new Date(coupon.validUntil) >= now &&\n        (coupon.usageLimit === 0 || coupon.timesUsed < coupon.usageLimit",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 361,
          "condition": "coupon.discountType === \"percentage\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 371,
          "condition": "priceDetails.isBaseTreatmentCoveredBySubscription || priceDetails.isBaseTreatmentCoveredByTreatmentVoucher",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 386,
          "condition": "!validationResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 395,
          "condition": "!session || session.user.id !== validatedPayload.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 403,
          "condition": "!bookingUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 407,
          "condition": "validatedPayload.customAddressDetails",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 408,
          "condition": "!validatedPayload.customAddressDetails.fullAddress",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 414,
          "condition": "validatedPayload.selectedAddressId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 417,
          "condition": "!selectedAddressDoc",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 463,
          "condition": "!bookingAddressSnapshot.fullAddress",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 530,
          "condition": "validatedPayload.priceDetails.redeemedUserSubscriptionId &&\n        validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 537,
          "condition": "!userSub || userSub.remainingQuantity < 1 || userSub.status !== \"active\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 541,
          "condition": "userSub.remainingQuantity === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 544,
          "condition": "validatedPayload.priceDetails.appliedGiftVoucherId &&\n        validatedPayload.priceDetails.voucherAppliedAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 550,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 552,
          "condition": "!voucher.isActive && voucher.status !== \"sent\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 555,
          "condition": "voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 560,
          "condition": "voucher.voucherType === \"monetary\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 561,
          "condition": "typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount < validatedPayload.priceDetails.voucherAppliedAmount",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 570,
          "condition": "voucher.remainingAmount < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 581,
          "condition": "validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 586,
          "condition": "!coupon || !coupon.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 590,
          "condition": "bookingResult",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 590,
          "condition": "bookingResult.priceDetails.finalAmount === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 596,
          "condition": "bookingResult",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 603,
          "condition": "updatedVoucherDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 611,
          "condition": "userForNotification && treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 619,
          "condition": "methods.includes(\"email\") && userForNotification.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 623,
          "condition": "methods.includes(\"sms\") && userForNotification.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 627,
          "condition": "finalBookingObject.recipientEmail &&\n            finalBookingObject.recipientEmail !== userForNotification.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 641,
          "condition": "finalBookingObject.recipientPhone &&\n            finalBookingObject.recipientPhone !== userForNotification.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 647,
          "condition": "recipients.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 689,
          "condition": "!session || session.user.id !== userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 699,
          "condition": "status && status !== \"all\"",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 699,
          "cases": 4,
          "expression": "status"
        },
        {
          "type": "if",
          "line": 708,
          "condition": "treatment && treatment !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 711,
          "condition": "dateRange && dateRange !== \"all\"",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 715,
          "cases": 4,
          "expression": "dateRange"
        },
        {
          "type": "if",
          "line": 738,
          "condition": "search && search.trim()",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 744,
          "condition": "sortBy",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 795,
          "condition": "error && typeof error === \"object\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 802,
          "condition": "error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 817,
          "condition": "!authSession || authSession.user.id !== userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 818,
          "condition": "!(cancelledByRole === \"admin\" && authSession?.user?.roles.includes(\"admin\"))",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 826,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 828,
          "condition": "booking.userId.toString() !== userId && cancelledByRole !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 830,
          "condition": "[\"completed\", \"cancelled\", \"refunded\"].includes(booking.status)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 836,
          "condition": "booking.priceDetails.redeemedUserSubscriptionId &&\n        booking.priceDetails.isBaseTreatmentCoveredBySubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 842,
          "condition": "userSub",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 843,
          "condition": "userSub.status === \"depleted\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 846,
          "condition": "booking.priceDetails.appliedGiftVoucherId && booking.priceDetails.voucherAppliedAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 851,
          "condition": "voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 852,
          "condition": "voucher.voucherType === \"treatment\" && booking.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 858,
          "condition": "voucher.voucherType === \"monetary\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 861,
          "condition": "voucher.originalAmount && voucher.remainingAmount > voucher.originalAmount",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 871,
          "condition": "voucher.usageHistory",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 876,
          "condition": "booking.priceDetails.appliedCouponId && booking.priceDetails.discountAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 881,
          "condition": "coupon && coupon.timesUsed > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 885,
          "condition": "success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 905,
          "condition": "!authSession || authSession.user.id !== userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 941,
          "condition": "paymentMethodsSettledResult &&\n      paymentMethodsSettledResult.success &&\n      paymentMethodsSettledResult.paymentMethods",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 946,
          "condition": "paymentMethodsSettledResult && paymentMethodsSettledResult.error",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 950,
          "condition": "paymentMethodsResult.status === \"rejected\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 956,
          "condition": "!user || !activeTreatments || !workingHoursSettings",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 968,
          "condition": "sub.treatmentId && sub.treatmentId.pricingType === \"duration_based\" && sub.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 971,
          "condition": "treatmentDoc.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 982,
          "condition": "voucher.voucherType === \"treatment\" && voucher.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 986,
          "condition": "treatmentDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 988,
          "condition": "treatmentDetails.pricingType === \"duration_based\" && voucher.selectedDurationId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 993,
          "condition": "durationDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1020,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1029,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1031,
          "condition": "booking.status !== \"in_process\" || booking.professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1038,
          "condition": "acceptedBooking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1048,
          "condition": "clientUser && treatment && professional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1063,
          "condition": "clientNotificationMethods.includes(\"email\") && clientUser.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1069,
          "condition": "clientNotificationMethods.includes(\"sms\") && clientUser.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1094,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1100,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1102,
          "condition": "booking.professionalId?.toString() !== professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1104,
          "condition": "booking.status !== \"confirmed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1121,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1126,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1128,
          "condition": "booking.professionalId?.toString() !== professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1131,
          "condition": "![\"confirmed\", \"in_process\"].includes(booking.status)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1153,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1162,
          "condition": "status && status !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1164,
          "condition": "professional && professional !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1165,
          "condition": "professional === \"assigned\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1168,
          "condition": "professional === \"unassigned\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1169,
          "condition": "dateRange && dateRange !== \"all\"",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 1175,
          "cases": 6,
          "expression": "dateRange"
        },
        {
          "type": "if",
          "line": 1212,
          "condition": "priceRange && priceRange !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1217,
          "condition": "max === Infinity",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1221,
          "condition": "search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1269,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1279,
          "condition": "!professional || !professional.roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1284,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1286,
          "condition": "booking.professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1288,
          "condition": "[\"completed\", \"cancelled\", \"refunded\"].includes(booking.status)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1296,
          "condition": "assignedBooking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1308,
          "condition": "clientUser && professional && treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1323,
          "condition": "clientNotificationMethods.includes(\"email\") && clientUser.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1329,
          "condition": "clientNotificationMethods.includes(\"sms\") && clientUser.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1349,
          "condition": "professionalNotificationMethods.includes(\"email\") && professional.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1356,
          "condition": "professionalNotificationMethods.includes(\"sms\") && professional.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1382,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1405,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1409,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1411,
          "condition": "updates.status !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1413,
          "condition": "updates.bookingDateTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1415,
          "condition": "updates.recipientName !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1418,
          "condition": "updates.recipientPhone !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1420,
          "condition": "updates.recipientEmail !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1422,
          "condition": "updates.notes !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1424,
          "condition": "updates.professionalId !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1425,
          "condition": "updates.professionalId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1428,
          "condition": "!professional || !professional.roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1434,
          "condition": "updates.paymentStatus !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1452,
          "condition": "!validationResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1470,
          "condition": "!guestInfo || !guestInfo.name || !guestInfo.email || !guestInfo.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1477,
          "condition": "validatedPayload.customAddressDetails",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1478,
          "condition": "!validatedPayload.customAddressDetails.fullAddress",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1561,
          "condition": "validatedPayload.priceDetails.appliedGiftVoucherId && validatedPayload.priceDetails.voucherAppliedAmount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1569,
          "condition": "!voucher || !voucher.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1571,
          "condition": "voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1576,
          "condition": "voucher.voucherType === \"monetary\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1577,
          "condition": "typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount < validatedPayload.priceDetails.voucherAppliedAmount",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1586,
          "condition": "voucher.remainingAmount < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1598,
          "condition": "validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1605,
          "condition": "!coupon || !coupon.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1609,
          "condition": "bookingResult",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1610,
          "condition": "bookingResult.priceDetails.finalAmount === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1618,
          "condition": "bookingResult",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1623,
          "condition": "updatedVoucherDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1630,
          "condition": "treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1648,
          "condition": "bookerNotificationMethod === \"email\" || bookerNotificationMethod === \"both\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1654,
          "condition": "bookerNotificationMethod === \"sms\" || bookerNotificationMethod === \"both\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1660,
          "condition": "isBookingForSomeoneElse && validatedPayload.recipientEmail && validatedPayload.recipientPhone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1668,
          "condition": "recipientNotificationMethod === \"email\" || recipientNotificationMethod === \"both\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1675,
          "condition": "recipientNotificationMethod === \"sms\" || recipientNotificationMethod === \"both\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1682,
          "condition": "recipients.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1684,
          "condition": "isBookingForSomeoneElse",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1693,
          "condition": "bookerRecipients.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1714,
          "condition": "recipientRecipients.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1785,
          "condition": "!treatments || treatments.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1788,
          "condition": "!workingHours",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1837,
          "condition": "existingUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1845,
          "condition": "!validRoles.includes(UserRole.GUEST)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1847,
          "condition": "JSON.stringify(validRoles) !== JSON.stringify(existingUser.roles)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1874,
          "condition": "error instanceof Error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1876,
          "condition": "error.message.includes('duplicate key')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1879,
          "condition": "error.message.includes('validation')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1897,
          "condition": "existingAbandoned",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1905,
          "condition": "formData.guestInfo?.firstName && formData.guestInfo?.lastName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1912,
          "condition": "formData.bookingOptions?.selectedTreatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1916,
          "condition": "formData.bookingOptions?.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1920,
          "condition": "formData.bookingOptions?.bookingDate && formData.bookingOptions?.bookingTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2053,
          "condition": "!abandonedBooking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2066,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2068,
          "condition": "paymentStatus === \"success\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 2077,
          "condition": "suitableProfessionals.success && suitableProfessionals.professionals && suitableProfessionals.professionals.length > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 2088,
          "condition": "smsResult.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 2102,
          "condition": "transactionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2116,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2127,
          "condition": "!cityName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2141,
          "condition": "genderPreference && genderPreference !== 'any'",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 2146,
          "condition": "durationId",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "isSameDay",
          "line": 48,
          "parameters": [
            {
              "name": "dateLeft",
              "type": "Date"
            },
            {
              "name": "dateRight",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getDayWorkingHours",
          "line": 58,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            },
            {
              "name": "settings",
              "type": "IWorkingHoursSettings"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "sd",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [
            {
              "name": "fh",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAvailableTimeSlots",
          "line": 80,
          "parameters": [
            {
              "name": "dateString",
              "type": "string"
            },
            {
              "name": "treatmentId",
              "type": "string"
            },
            {
              "name": "selectedDurationId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 111,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "calculateBookingPrice",
          "line": 215,
          "parameters": [
            {
              "name": "payload",
              "type": "unknown"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 246,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 299,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createBooking",
          "line": 382,
          "parameters": [
            {
              "name": "payload",
              "type": "unknown"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 475,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "getUserBookings",
          "line": 680,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "filters",
              "type": "{\n    status?: string\n    treatment?: string\n    dateRange?: string\n    search?: string\n    page?: number\n    limit?: number\n    sortBy?: string\n    sortDirection?: \"asc\" | \"desc\"\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 801,
          "parameters": [
            {
              "name": "key",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "cancelBooking",
          "line": 812,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            },
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "cancelledByRole",
              "type": "\"user\" | \"admin\""
            },
            {
              "name": "reason",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 824,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 873,
          "parameters": [
            {
              "name": "entry",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getBookingInitialData",
          "line": 901,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getFulfilledValue",
          "line": 930,
          "parameters": [
            {
              "name": "result",
              "type": "PromiseSettledResult<any>"
            },
            {
              "name": "defaultValue",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 968,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 973,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 979,
          "parameters": [
            {
              "name": "voucher",
              "type": "IGiftVoucher"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 984,
          "parameters": [
            {
              "name": "t",
              "type": "ITreatment"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 991,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "professionalAcceptBooking",
          "line": 1016,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1027,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "professionalMarkEnRoute",
          "line": 1090,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "professionalMarkCompleted",
          "line": 1117,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getAllBookings",
          "line": 1144,
          "parameters": [
            {
              "name": "filters",
              "type": "{\n    status?: string\n    professional?: string\n    treatment?: string\n    dateRange?: string\n    priceRange?: string\n    address?: string\n    page?: number\n    limit?: number\n    sortBy?: string\n    sortDirection?: \"asc\" | \"desc\"\n    search?: string\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1255,
          "parameters": [
            {
              "name": "booking",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "assignProfessionalToBooking",
          "line": 1265,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            },
            {
              "name": "professionalId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1275,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "getAvailableProfessionals",
          "line": 1378,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1389,
          "parameters": [
            {
              "name": "p",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateBookingByAdmin",
          "line": 1396,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            },
            {
              "name": "updates",
              "type": "{\n    status?: BookingStatus\n    bookingDateTime?: Date\n    recipientName?: string\n    recipientPhone?: string\n    recipientEmail?: string\n    notes?: string\n    professionalId?: string\n    paymentStatus?: \"pending\" | \"paid\" | \"failed\" | \"not_required\"\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "createGuestBooking",
          "line": 1445,
          "parameters": [
            {
              "name": "payload",
              "type": "unknown"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1492,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1687,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1690,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getGuestBookingInitialData",
          "line": 1772,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "getFulfilledValue",
          "line": 1780,
          "parameters": [
            {
              "name": "result",
              "type": "PromiseSettledResult<any>"
            },
            {
              "name": "defaultValue",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1792,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1794,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createGuestUser",
          "line": 1815,
          "parameters": [
            {
              "name": "guestInfo",
              "type": "{\n  firstName: string\n  lastName: string\n  email: string\n  phone: string\n  birthDate?: Date\n  gender?: \"male\" | \"female\" | \"other\"\n}"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1843,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "saveAbandonedBooking",
          "line": 1884,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "formData",
              "type": "{\n    guestInfo?: any\n    guestAddress?: any\n    bookingOptions?: any\n    calculatedPrice?: any\n    currentStep: number\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1968,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getAbandonedBooking",
          "line": 2043,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateBookingStatusAfterPayment",
          "line": 2060,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            },
            {
              "name": "paymentStatus",
              "type": "\"success\" | \"failed\""
            },
            {
              "name": "transactionId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "findSuitableProfessionals",
          "line": 2110,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 2144,
          "parameters": [
            {
              "name": "prof",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 2148,
          "parameters": [
            {
              "name": "prof",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 2149,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport { getServerSession } from \"next-aut"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 29,
          "rule": "import { CalculatePricePayloadSchema, CreateBookingPayloadSchema, CreateGuestBookingPayloadSchema } "
        },
        {
          "type": "general",
          "line": 31,
          "rule": "\"@/lib/validation/booking-schemas\""
        },
        {
          "type": "general",
          "line": 32,
          "rule": "import type { CreateBookingPayloadType as CreateBookingPayloadSchemaType, CreateGuestBookingPayloadT"
        },
        {
          "type": "general",
          "line": 35,
          "rule": "\"@/lib/validation/booking-schemas\""
        },
        {
          "type": "general",
          "line": 225,
          "rule": "const validatedPayload = validationResult.data"
        },
        {
          "type": "general",
          "line": 225,
          "rule": "const validatedPayload = validationResult.data"
        },
        {
          "type": "general",
          "line": 225,
          "rule": "validatedPayload = validationResult.data"
        },
        {
          "type": "general",
          "line": 225,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 226,
          "rule": "const {\n      treatmentId,\n      selectedDurationId,\n      bookingDateTime,\n      couponCode,\n      "
        },
        {
          "type": "general",
          "line": 226,
          "rule": "const {\n      treatmentId,\n      selectedDurationId,\n      bookingDateTime,\n      couponCode,\n      "
        },
        {
          "type": "general",
          "line": 226,
          "rule": "{\n      treatmentId,\n      selectedDurationId,\n      bookingDateTime,\n      couponCode,\n      giftVo"
        },
        {
          "type": "general",
          "line": 230,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 378,
          "rule": "catch (error) {\n    logger.error(\"Error calculating booking price:\", { error, payload: validatedPayl"
        },
        {
          "type": "general",
          "line": 378,
          "rule": "{\n    logger.error(\"Error calculating booking price:\", { error, payload: validatedPayload })\n    ret"
        },
        {
          "type": "general",
          "line": 378,
          "rule": "logger.error(\"Error calculating booking price:\", { error, payload: validatedPayload })"
        },
        {
          "type": "general",
          "line": 378,
          "rule": "logger.error(\"Error calculating booking price:\", { error, payload: validatedPayload })"
        },
        {
          "type": "general",
          "line": 379,
          "rule": "{ error, payload: validatedPayload }"
        },
        {
          "type": "general",
          "line": 379,
          "rule": "payload: validatedPayload"
        },
        {
          "type": "general",
          "line": 380,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 391,
          "rule": "const validatedPayload = validationResult.data as CreateBookingPayloadSchemaType & {\n    priceDetail"
        },
        {
          "type": "general",
          "line": 391,
          "rule": "const validatedPayload = validationResult.data as CreateBookingPayloadSchemaType & {\n    priceDetail"
        },
        {
          "type": "general",
          "line": 391,
          "rule": "validatedPayload = validationResult.data as CreateBookingPayloadSchemaType & {\n    priceDetails: Cli"
        },
        {
          "type": "general",
          "line": 391,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 395,
          "rule": "if (!session || session.user.id !== validatedPayload.userId) {\n    return { success: false, error: \""
        },
        {
          "type": "general",
          "line": 395,
          "rule": "!session || session.user.id !== validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 395,
          "rule": "session.user.id !== validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 396,
          "rule": "validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 396,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "try {\n    await dbConnect()\n\n    const bookingUser = await User.findById(validatedPayload.userId).se"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "{\n    await dbConnect()\n\n    const bookingUser = await User.findById(validatedPayload.userId).select"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "const bookingUser = await User.findById(validatedPayload.userId).select(\"name email phone\").lean()"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "const bookingUser = await User.findById(validatedPayload.userId).select(\"name email phone\").lean()"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "bookingUser = await User.findById(validatedPayload.userId).select(\"name email phone\").lean()"
        },
        {
          "type": "email",
          "line": 402,
          "rule": "await User.findById(validatedPayload.userId).select(\"name email phone\").lean()"
        },
        {
          "type": "email",
          "line": 402,
          "rule": "User.findById(validatedPayload.userId).select(\"name email phone\").lean()"
        },
        {
          "type": "email",
          "line": 402,
          "rule": "User.findById(validatedPayload.userId).select(\"name email phone\").lean"
        },
        {
          "type": "email",
          "line": 402,
          "rule": "User.findById(validatedPayload.userId).select(\"name email phone\")"
        },
        {
          "type": "general",
          "line": 402,
          "rule": "User.findById(validatedPayload.userId).select"
        },
        {
          "type": "general",
          "line": 402,
          "rule": "User.findById(validatedPayload.userId)"
        },
        {
          "type": "general",
          "line": 402,
          "rule": "validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 402,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 403,
          "rule": "\"name email phone\""
        },
        {
          "type": "general",
          "line": 407,
          "rule": "if (validatedPayload.customAddressDetails) {\n      if (!validatedPayload.customAddressDetails.fullAd"
        },
        {
          "type": "general",
          "line": 407,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 407,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 408,
          "rule": "{\n      if (!validatedPayload.customAddressDetails.fullAddress) {\n        validatedPayload.customAdd"
        },
        {
          "type": "general",
          "line": 408,
          "rule": "if (!validatedPayload.customAddressDetails.fullAddress) {\n        validatedPayload.customAddressDeta"
        },
        {
          "type": "general",
          "line": 408,
          "rule": "!validatedPayload.customAddressDetails.fullAddress"
        },
        {
          "type": "general",
          "line": 408,
          "rule": "validatedPayload.customAddressDetails.fullAddress"
        },
        {
          "type": "general",
          "line": 408,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 408,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 409,
          "rule": "{\n        validatedPayload.customAddressDetails.fullAddress = constructFullAddressHelper(\n          "
        },
        {
          "type": "general",
          "line": 409,
          "rule": "validatedPayload.customAddressDetails.fullAddress = constructFullAddressHelper(\n          validatedP"
        },
        {
          "type": "general",
          "line": 409,
          "rule": "validatedPayload.customAddressDetails.fullAddress = constructFullAddressHelper(\n          validatedP"
        },
        {
          "type": "general",
          "line": 409,
          "rule": "validatedPayload.customAddressDetails.fullAddress"
        },
        {
          "type": "general",
          "line": 409,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 409,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 410,
          "rule": "constructFullAddressHelper(\n          validatedPayload.customAddressDetails as Partial<IAddress>,\n  "
        },
        {
          "type": "general",
          "line": 411,
          "rule": "validatedPayload.customAddressDetails as Partial<IAddress>"
        },
        {
          "type": "general",
          "line": 411,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 411,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 412,
          "rule": "bookingAddressSnapshot = validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 412,
          "rule": "bookingAddressSnapshot = validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 413,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 413,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 414,
          "rule": "if (validatedPayload.selectedAddressId) {\n      const selectedAddressDoc = (await Address.findById(v"
        },
        {
          "type": "general",
          "line": 414,
          "rule": "validatedPayload.selectedAddressId"
        },
        {
          "type": "general",
          "line": 414,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 415,
          "rule": "{\n      const selectedAddressDoc = (await Address.findById(validatedPayload.selectedAddressId).lean("
        },
        {
          "type": "general",
          "line": 415,
          "rule": "const selectedAddressDoc = (await Address.findById(validatedPayload.selectedAddressId).lean()) as IA"
        },
        {
          "type": "general",
          "line": 415,
          "rule": "const selectedAddressDoc = (await Address.findById(validatedPayload.selectedAddressId).lean()) as IA"
        },
        {
          "type": "general",
          "line": 415,
          "rule": "selectedAddressDoc = (await Address.findById(validatedPayload.selectedAddressId).lean()) as IAddress"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "(await Address.findById(validatedPayload.selectedAddressId).lean()) as IAddress | null"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "(await Address.findById(validatedPayload.selectedAddressId).lean())"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "await Address.findById(validatedPayload.selectedAddressId).lean()"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "Address.findById(validatedPayload.selectedAddressId).lean()"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "Address.findById(validatedPayload.selectedAddressId).lean"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "Address.findById(validatedPayload.selectedAddressId)"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "validatedPayload.selectedAddressId"
        },
        {
          "type": "general",
          "line": 416,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 417,
          "rule": "if (!selectedAddressDoc) {\n        logger.error(\"Selected address not found during booking creation\""
        },
        {
          "type": "general",
          "line": 418,
          "rule": "{\n        logger.error(\"Selected address not found during booking creation\", {\n          selectedAdd"
        },
        {
          "type": "general",
          "line": 418,
          "rule": "logger.error(\"Selected address not found during booking creation\", {\n          selectedAddressId: va"
        },
        {
          "type": "general",
          "line": 418,
          "rule": "logger.error(\"Selected address not found during booking creation\", {\n          selectedAddressId: va"
        },
        {
          "type": "general",
          "line": 419,
          "rule": "{\n          selectedAddressId: validatedPayload.selectedAddressId,\n          userId: validatedPayloa"
        },
        {
          "type": "general",
          "line": 419,
          "rule": "selectedAddressId: validatedPayload.selectedAddressId"
        },
        {
          "type": "general",
          "line": 420,
          "rule": "validatedPayload.selectedAddressId"
        },
        {
          "type": "general",
          "line": 420,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 421,
          "rule": "userId: validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 421,
          "rule": "validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 421,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 471,
          "rule": "{\n      logger.warn(\"No address provided for booking\", { userId: validatedPayload.userId })\n      re"
        },
        {
          "type": "general",
          "line": 471,
          "rule": "logger.warn(\"No address provided for booking\", { userId: validatedPayload.userId })"
        },
        {
          "type": "general",
          "line": 471,
          "rule": "logger.warn(\"No address provided for booking\", { userId: validatedPayload.userId })"
        },
        {
          "type": "general",
          "line": 472,
          "rule": "{ userId: validatedPayload.userId }"
        },
        {
          "type": "general",
          "line": 472,
          "rule": "userId: validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 472,
          "rule": "validatedPayload.userId"
        },
        {
          "type": "general",
          "line": 472,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 478,
          "rule": "const newBooking = new Booking({\n        ...validatedPayload,\n        bookingNumber,\n        bookedB"
        },
        {
          "type": "email",
          "line": 478,
          "rule": "const newBooking = new Booking({\n        ...validatedPayload,\n        bookingNumber,\n        bookedB"
        },
        {
          "type": "email",
          "line": 478,
          "rule": "newBooking = new Booking({\n        ...validatedPayload,\n        bookingNumber,\n        bookedByUserN"
        },
        {
          "type": "email",
          "line": 479,
          "rule": "new Booking({\n        ...validatedPayload,\n        bookingNumber,\n        bookedByUserName: bookingU"
        },
        {
          "type": "email",
          "line": 479,
          "rule": "{\n        ...validatedPayload,\n        bookingNumber,\n        bookedByUserName: bookingUser.name,\n  "
        },
        {
          "type": "general",
          "line": 479,
          "rule": "...validatedPayload"
        },
        {
          "type": "general",
          "line": 479,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 481,
          "rule": "bookedByUserEmail: bookingUser.email"
        },
        {
          "type": "email",
          "line": 481,
          "rule": "bookingUser.email"
        },
        {
          "type": "email",
          "line": 482,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 482,
          "rule": "bookedByUserPhone: bookingUser.phone"
        },
        {
          "type": "phone",
          "line": 482,
          "rule": "bookingUser.phone"
        },
        {
          "type": "phone",
          "line": 483,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 484,
          "rule": "priceDetails: {\n          basePrice: validatedPayload.priceDetails.basePrice,\n          surcharges: "
        },
        {
          "type": "general",
          "line": 486,
          "rule": "{\n          basePrice: validatedPayload.priceDetails.basePrice,\n          surcharges: validatedPaylo"
        },
        {
          "type": "general",
          "line": 486,
          "rule": "{\n          basePrice: validatedPayload.priceDetails.basePrice,\n          surcharges: validatedPaylo"
        },
        {
          "type": "general",
          "line": 486,
          "rule": "basePrice: validatedPayload.priceDetails.basePrice"
        },
        {
          "type": "general",
          "line": 486,
          "rule": "validatedPayload.priceDetails.basePrice"
        },
        {
          "type": "general",
          "line": 486,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 486,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 487,
          "rule": "surcharges: validatedPayload.priceDetails.surcharges"
        },
        {
          "type": "general",
          "line": 487,
          "rule": "validatedPayload.priceDetails.surcharges"
        },
        {
          "type": "general",
          "line": 487,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 487,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 488,
          "rule": "totalSurchargesAmount: validatedPayload.priceDetails.totalSurchargesAmount"
        },
        {
          "type": "general",
          "line": 489,
          "rule": "validatedPayload.priceDetails.totalSurchargesAmount"
        },
        {
          "type": "general",
          "line": 489,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 489,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 490,
          "rule": "treatmentPriceAfterSubscriptionOrTreatmentVoucher:\n            validatedPayload.priceDetails.treatme"
        },
        {
          "type": "general",
          "line": 491,
          "rule": "validatedPayload.priceDetails.treatmentPriceAfterSubscriptionOrTreatmentVoucher"
        },
        {
          "type": "general",
          "line": 491,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 491,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 493,
          "rule": "discountAmount: validatedPayload.priceDetails.couponDiscount"
        },
        {
          "type": "general",
          "line": 494,
          "rule": "validatedPayload.priceDetails.couponDiscount"
        },
        {
          "type": "general",
          "line": 494,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 494,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 495,
          "rule": "voucherAppliedAmount: validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 495,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 495,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 495,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 496,
          "rule": "finalAmount: validatedPayload.priceDetails.finalAmount"
        },
        {
          "type": "general",
          "line": 497,
          "rule": "validatedPayload.priceDetails.finalAmount"
        },
        {
          "type": "general",
          "line": 497,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 497,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 498,
          "rule": "isBaseTreatmentCoveredBySubscription: validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscrip"
        },
        {
          "type": "general",
          "line": 498,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscription"
        },
        {
          "type": "general",
          "line": 498,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 498,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 500,
          "rule": "isBaseTreatmentCoveredByTreatmentVoucher:\n            validatedPayload.priceDetails.isBaseTreatmentC"
        },
        {
          "type": "general",
          "line": 501,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher"
        },
        {
          "type": "general",
          "line": 501,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 501,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 503,
          "rule": "isFullyCoveredByVoucherOrSubscription: validatedPayload.priceDetails.isFullyCoveredByVoucherOrSubscr"
        },
        {
          "type": "general",
          "line": 504,
          "rule": "validatedPayload.priceDetails.isFullyCoveredByVoucherOrSubscription"
        },
        {
          "type": "general",
          "line": 504,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 504,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 505,
          "rule": "appliedCouponId: validatedPayload.priceDetails.appliedCouponId\n            ? new mongoose.Types.Obje"
        },
        {
          "type": "general",
          "line": 505,
          "rule": "validatedPayload.priceDetails.appliedCouponId\n            ? new mongoose.Types.ObjectId(validatedPay"
        },
        {
          "type": "general",
          "line": 505,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 505,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 505,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 507,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.priceDetails.appliedCouponId)"
        },
        {
          "type": "general",
          "line": 507,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 507,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 507,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 509,
          "rule": "appliedGiftVoucherId: validatedPayload.priceDetails.appliedGiftVoucherId\n            ? new mongoose."
        },
        {
          "type": "general",
          "line": 509,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId\n            ? new mongoose.Types.ObjectId(validat"
        },
        {
          "type": "general",
          "line": 509,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 509,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 509,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 511,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.priceDetails.appliedGiftVoucherId)"
        },
        {
          "type": "general",
          "line": 511,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 511,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 511,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 513,
          "rule": "redeemedUserSubscriptionId: validatedPayload.priceDetails.redeemedUserSubscriptionId\n            ? n"
        },
        {
          "type": "general",
          "line": 513,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId\n            ? new mongoose.Types.ObjectId(v"
        },
        {
          "type": "general",
          "line": 513,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId"
        },
        {
          "type": "general",
          "line": 513,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 513,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 515,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.priceDetails.redeemedUserSubscriptionId)"
        },
        {
          "type": "general",
          "line": 515,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId"
        },
        {
          "type": "general",
          "line": 515,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 515,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 518,
          "rule": "paymentDetails: {\n          paymentMethodId: validatedPayload.paymentDetails.paymentMethodId\n       "
        },
        {
          "type": "general",
          "line": 518,
          "rule": "{\n          paymentMethodId: validatedPayload.paymentDetails.paymentMethodId\n            ? new mongo"
        },
        {
          "type": "general",
          "line": 518,
          "rule": "paymentMethodId: validatedPayload.paymentDetails.paymentMethodId\n            ? new mongoose.Types.Ob"
        },
        {
          "type": "general",
          "line": 519,
          "rule": "validatedPayload.paymentDetails.paymentMethodId\n            ? new mongoose.Types.ObjectId(validatedP"
        },
        {
          "type": "general",
          "line": 519,
          "rule": "validatedPayload.paymentDetails.paymentMethodId"
        },
        {
          "type": "general",
          "line": 519,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 519,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 520,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.paymentDetails.paymentMethodId)"
        },
        {
          "type": "general",
          "line": 521,
          "rule": "validatedPayload.paymentDetails.paymentMethodId"
        },
        {
          "type": "general",
          "line": 521,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 521,
          "rule": "validatedPayload"
        },
        {
          "type": "required",
          "line": 522,
          "rule": "paymentStatus:\n            validatedPayload.priceDetails.finalAmount === 0\n              ? \"not_requ"
        },
        {
          "type": "required",
          "line": 522,
          "rule": "validatedPayload.priceDetails.finalAmount === 0\n              ? \"not_required\"\n              : valid"
        },
        {
          "type": "general",
          "line": 522,
          "rule": "validatedPayload.priceDetails.finalAmount === 0"
        },
        {
          "type": "general",
          "line": 522,
          "rule": "validatedPayload.priceDetails.finalAmount"
        },
        {
          "type": "general",
          "line": 522,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 522,
          "rule": "validatedPayload"
        },
        {
          "type": "required",
          "line": 524,
          "rule": "\"not_required\""
        },
        {
          "type": "general",
          "line": 525,
          "rule": "validatedPayload.paymentDetails.paymentStatus || \"pending\""
        },
        {
          "type": "general",
          "line": 525,
          "rule": "validatedPayload.paymentDetails.paymentStatus"
        },
        {
          "type": "general",
          "line": 525,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 525,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 526,
          "rule": "transactionId: validatedPayload.paymentDetails.transactionId"
        },
        {
          "type": "general",
          "line": 526,
          "rule": "validatedPayload.paymentDetails.transactionId"
        },
        {
          "type": "general",
          "line": 526,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 526,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 530,
          "rule": "if (\n        validatedPayload.priceDetails.redeemedUserSubscriptionId &&\n        validatedPayload.pr"
        },
        {
          "type": "general",
          "line": 530,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId &&\n        validatedPayload.priceDetails.is"
        },
        {
          "type": "general",
          "line": 530,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId"
        },
        {
          "type": "general",
          "line": 530,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 530,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 532,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscription"
        },
        {
          "type": "general",
          "line": 532,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 532,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 533,
          "rule": "{\n        const userSub = await UserSubscription.findById(\n          validatedPayload.priceDetails.r"
        },
        {
          "type": "general",
          "line": 533,
          "rule": "const userSub = await UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUse"
        },
        {
          "type": "general",
          "line": 533,
          "rule": "const userSub = await UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUse"
        },
        {
          "type": "general",
          "line": 534,
          "rule": "userSub = await UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUserSubsc"
        },
        {
          "type": "general",
          "line": 534,
          "rule": "await UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUserSubscriptionId,"
        },
        {
          "type": "general",
          "line": 534,
          "rule": "UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUserSubscriptionId,\n     "
        },
        {
          "type": "general",
          "line": 534,
          "rule": "UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUserSubscriptionId,\n     "
        },
        {
          "type": "general",
          "line": 534,
          "rule": "UserSubscription.findById(\n          validatedPayload.priceDetails.redeemedUserSubscriptionId,\n     "
        },
        {
          "type": "general",
          "line": 535,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId"
        },
        {
          "type": "general",
          "line": 535,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 535,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 544,
          "rule": "if (\n        validatedPayload.priceDetails.appliedGiftVoucherId &&\n        validatedPayload.priceDet"
        },
        {
          "type": "general",
          "line": 544,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId &&\n        validatedPayload.priceDetails.voucherA"
        },
        {
          "type": "general",
          "line": 544,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 544,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 544,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 545,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount > 0"
        },
        {
          "type": "general",
          "line": 545,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 545,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 545,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "{\n        const voucher = (await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVouch"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "const voucher = (await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).sess"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "const voucher = (await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).sess"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "voucher = (await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(\n "
        },
        {
          "type": "general",
          "line": 547,
          "rule": "(await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(\n          m"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "(await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(\n          m"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(\n          mo"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(\n          mongoose"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session"
        },
        {
          "type": "general",
          "line": 547,
          "rule": "GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId)"
        },
        {
          "type": "general",
          "line": 548,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 548,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 548,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 555,
          "rule": "if (\n          voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBase"
        },
        {
          "type": "general",
          "line": 555,
          "rule": "voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBaseTreatmentCovere"
        },
        {
          "type": "general",
          "line": 556,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher"
        },
        {
          "type": "general",
          "line": 556,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 556,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 560,
          "rule": "if (voucher.voucherType === \"monetary\") {\n          if (\n            typeof voucher.remainingAmount "
        },
        {
          "type": "general",
          "line": 561,
          "rule": "{\n          if (\n            typeof voucher.remainingAmount !== \"number\" ||\n            voucher.rema"
        },
        {
          "type": "general",
          "line": 561,
          "rule": "if (\n            typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount "
        },
        {
          "type": "general",
          "line": 561,
          "rule": "typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount < validatedPayloa"
        },
        {
          "type": "general",
          "line": 563,
          "rule": "voucher.remainingAmount < validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 563,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 563,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 563,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 566,
          "rule": "voucher.remainingAmount -= validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 566,
          "rule": "voucher.remainingAmount -= validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 567,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 567,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 567,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 574,
          "rule": "voucher.usageHistory.push({\n          date: new Date(),\n          amount: validatedPayload.priceDeta"
        },
        {
          "type": "general",
          "line": 574,
          "rule": "voucher.usageHistory.push({\n          date: new Date(),\n          amount: validatedPayload.priceDeta"
        },
        {
          "type": "general",
          "line": 575,
          "rule": "{\n          date: new Date(),\n          amount: validatedPayload.priceDetails.voucherAppliedAmount,\n"
        },
        {
          "type": "general",
          "line": 575,
          "rule": "amount: validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 576,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 576,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 576,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 581,
          "rule": "if (validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > "
        },
        {
          "type": "general",
          "line": 581,
          "rule": "validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > 0"
        },
        {
          "type": "general",
          "line": 581,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 581,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 581,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 582,
          "rule": "validatedPayload.priceDetails.couponDiscount > 0"
        },
        {
          "type": "general",
          "line": 582,
          "rule": "validatedPayload.priceDetails.couponDiscount"
        },
        {
          "type": "general",
          "line": 582,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 582,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 583,
          "rule": "{\n        const coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).sessio"
        },
        {
          "type": "general",
          "line": 583,
          "rule": "const coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongoose"
        },
        {
          "type": "general",
          "line": 583,
          "rule": "const coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongoose"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongooseDbSess"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongooseDbSession)"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongooseDbSession)"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "Coupon.findById(validatedPayload.priceDetails.appliedCouponId)"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 584,
          "rule": "validatedPayload"
        },
        {
          "type": "required",
          "line": 590,
          "rule": "if (bookingResult) {\n        if (bookingResult.priceDetails.finalAmount === 0) {\n          bookingRe"
        },
        {
          "type": "required",
          "line": 590,
          "rule": "{\n        if (bookingResult.priceDetails.finalAmount === 0) {\n          bookingResult.paymentDetails"
        },
        {
          "type": "required",
          "line": 590,
          "rule": "if (bookingResult.priceDetails.finalAmount === 0) {\n          bookingResult.paymentDetails.paymentSt"
        },
        {
          "type": "required",
          "line": 591,
          "rule": "{\n          bookingResult.paymentDetails.paymentStatus = \"not_required\"\n        }"
        },
        {
          "type": "required",
          "line": 591,
          "rule": "bookingResult.paymentDetails.paymentStatus = \"not_required\""
        },
        {
          "type": "required",
          "line": 591,
          "rule": "bookingResult.paymentDetails.paymentStatus = \"not_required\""
        },
        {
          "type": "required",
          "line": 592,
          "rule": "\"not_required\""
        },
        {
          "type": "general",
          "line": 596,
          "rule": "if (bookingResult) {\n      revalidatePath(\"/dashboard/member/book-treatment\")\n      revalidatePath(\""
        },
        {
          "type": "general",
          "line": 596,
          "rule": "{\n      revalidatePath(\"/dashboard/member/book-treatment\")\n      revalidatePath(\"/dashboard/member/s"
        },
        {
          "type": "general",
          "line": 596,
          "rule": "revalidatePath(\"/dashboard/member/book-treatment\")"
        },
        {
          "type": "general",
          "line": 596,
          "rule": "revalidatePath(\"/dashboard/member/book-treatment\")"
        },
        {
          "type": "general",
          "line": 596,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 597,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 597,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 597,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 599,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 599,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 599,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 600,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 600,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 600,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 601,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 601,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 601,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 606,
          "rule": "try {\n        const userForNotification = await User.findById(finalBookingObject.userId)\n          ."
        },
        {
          "type": "email",
          "line": 606,
          "rule": "{\n        const userForNotification = await User.findById(finalBookingObject.userId)\n          .sele"
        },
        {
          "type": "email",
          "line": 606,
          "rule": "const userForNotification = await User.findById(finalBookingObject.userId)\n          .select(\"name e"
        },
        {
          "type": "email",
          "line": 606,
          "rule": "const userForNotification = await User.findById(finalBookingObject.userId)\n          .select(\"name e"
        },
        {
          "type": "email",
          "line": 606,
          "rule": "userForNotification = await User.findById(finalBookingObject.userId)\n          .select(\"name email p"
        },
        {
          "type": "email",
          "line": 607,
          "rule": "await User.findById(finalBookingObject.userId)\n          .select(\"name email phone notificationPrefe"
        },
        {
          "type": "email",
          "line": 607,
          "rule": "User.findById(finalBookingObject.userId)\n          .select(\"name email phone notificationPreferences"
        },
        {
          "type": "email",
          "line": 607,
          "rule": "User.findById(finalBookingObject.userId)\n          .select(\"name email phone notificationPreferences"
        },
        {
          "type": "email",
          "line": 607,
          "rule": "User.findById(finalBookingObject.userId)\n          .select(\"name email phone notificationPreferences"
        },
        {
          "type": "email",
          "line": 608,
          "rule": "\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 616,
          "rule": "const methods = userForNotification.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 616,
          "rule": "const methods = userForNotification.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 616,
          "rule": "methods = userForNotification.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 617,
          "rule": "userForNotification.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 618,
          "rule": "[\"email\"]"
        },
        {
          "type": "email",
          "line": 618,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 619,
          "rule": "if (methods.includes(\"email\") && userForNotification.email) {\n            recipients.push({ type: \"e"
        },
        {
          "type": "email",
          "line": 619,
          "rule": "methods.includes(\"email\") && userForNotification.email"
        },
        {
          "type": "email",
          "line": 619,
          "rule": "methods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 619,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 620,
          "rule": "userForNotification.email"
        },
        {
          "type": "email",
          "line": 620,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 620,
          "rule": "{\n            recipients.push({ type: \"email\", value: userForNotification.email, name: userForNotifi"
        },
        {
          "type": "email",
          "line": 620,
          "rule": "recipients.push({ type: \"email\", value: userForNotification.email, name: userForNotification.name, l"
        },
        {
          "type": "email",
          "line": 620,
          "rule": "recipients.push({ type: \"email\", value: userForNotification.email, name: userForNotification.name, l"
        },
        {
          "type": "email",
          "line": 621,
          "rule": "{ type: \"email\", value: userForNotification.email, name: userForNotification.name, language: lang as"
        },
        {
          "type": "email",
          "line": 621,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 621,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 621,
          "rule": "value: userForNotification.email"
        },
        {
          "type": "email",
          "line": 621,
          "rule": "userForNotification.email"
        },
        {
          "type": "email",
          "line": 622,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 623,
          "rule": "if (methods.includes(\"sms\") && userForNotification.phone) {\n            recipients.push({ type: \"pho"
        },
        {
          "type": "phone",
          "line": 623,
          "rule": "methods.includes(\"sms\") && userForNotification.phone"
        },
        {
          "type": "phone",
          "line": 624,
          "rule": "userForNotification.phone"
        },
        {
          "type": "phone",
          "line": 624,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "{\n            recipients.push({ type: \"phone\", value: userForNotification.phone, language: lang as a"
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "recipients.push({ type: \"phone\", value: userForNotification.phone, language: lang as any })"
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "recipients.push({ type: \"phone\", value: userForNotification.phone, language: lang as any })"
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "{ type: \"phone\", value: userForNotification.phone, language: lang as any }"
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 625,
          "rule": "value: userForNotification.phone"
        },
        {
          "type": "phone",
          "line": 626,
          "rule": "userForNotification.phone"
        },
        {
          "type": "phone",
          "line": 626,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 627,
          "rule": "if (\n            finalBookingObject.recipientEmail &&\n            finalBookingObject.recipientEmail "
        },
        {
          "type": "email",
          "line": 633,
          "rule": "finalBookingObject.recipientEmail &&\n            finalBookingObject.recipientEmail !== userForNotifi"
        },
        {
          "type": "email",
          "line": 634,
          "rule": "finalBookingObject.recipientEmail !== userForNotification.email"
        },
        {
          "type": "email",
          "line": 635,
          "rule": "userForNotification.email"
        },
        {
          "type": "email",
          "line": 635,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 636,
          "rule": "{\n            recipients.push({\n              type: \"email\",\n              value: finalBookingObject"
        },
        {
          "type": "email",
          "line": 636,
          "rule": "recipients.push({\n              type: \"email\",\n              value: finalBookingObject.recipientEmai"
        },
        {
          "type": "email",
          "line": 636,
          "rule": "recipients.push({\n              type: \"email\",\n              value: finalBookingObject.recipientEmai"
        },
        {
          "type": "email",
          "line": 636,
          "rule": "{\n              type: \"email\",\n              value: finalBookingObject.recipientEmail,\n             "
        },
        {
          "type": "email",
          "line": 636,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 637,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 641,
          "rule": "if (\n            finalBookingObject.recipientPhone &&\n            finalBookingObject.recipientPhone "
        },
        {
          "type": "phone",
          "line": 641,
          "rule": "finalBookingObject.recipientPhone &&\n            finalBookingObject.recipientPhone !== userForNotifi"
        },
        {
          "type": "phone",
          "line": 642,
          "rule": "finalBookingObject.recipientPhone !== userForNotification.phone"
        },
        {
          "type": "phone",
          "line": 643,
          "rule": "userForNotification.phone"
        },
        {
          "type": "phone",
          "line": 643,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 644,
          "rule": "{\n            recipients.push({\n              type: \"phone\",\n              value: finalBookingObject"
        },
        {
          "type": "phone",
          "line": 644,
          "rule": "recipients.push({\n              type: \"phone\",\n              value: finalBookingObject.recipientPhon"
        },
        {
          "type": "phone",
          "line": 644,
          "rule": "recipients.push({\n              type: \"phone\",\n              value: finalBookingObject.recipientPhon"
        },
        {
          "type": "phone",
          "line": 644,
          "rule": "{\n              type: \"phone\",\n              value: finalBookingObject.recipientPhone,\n             "
        },
        {
          "type": "phone",
          "line": 644,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 645,
          "rule": "\"phone\""
        },
        {
          "type": "general",
          "line": 671,
          "rule": "catch (error) {\n    logger.error(\"Error creating booking:\", { error, userId: session?.user?.id, payl"
        },
        {
          "type": "general",
          "line": 672,
          "rule": "{\n    logger.error(\"Error creating booking:\", { error, userId: session?.user?.id, payload: validated"
        },
        {
          "type": "general",
          "line": 672,
          "rule": "logger.error(\"Error creating booking:\", { error, userId: session?.user?.id, payload: validatedPayloa"
        },
        {
          "type": "general",
          "line": 672,
          "rule": "logger.error(\"Error creating booking:\", { error, userId: session?.user?.id, payload: validatedPayloa"
        },
        {
          "type": "general",
          "line": 673,
          "rule": "{ error, userId: session?.user?.id, payload: validatedPayload }"
        },
        {
          "type": "general",
          "line": 673,
          "rule": "payload: validatedPayload"
        },
        {
          "type": "general",
          "line": 674,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 885,
          "rule": "if (success) {\n      revalidatePath(\"/dashboard/member/book-treatment\")\n      revalidatePath(\"/dashb"
        },
        {
          "type": "general",
          "line": 886,
          "rule": "{\n      revalidatePath(\"/dashboard/member/book-treatment\")\n      revalidatePath(\"/dashboard/admin/bo"
        },
        {
          "type": "general",
          "line": 886,
          "rule": "revalidatePath(\"/dashboard/member/book-treatment\")"
        },
        {
          "type": "general",
          "line": 886,
          "rule": "revalidatePath(\"/dashboard/member/book-treatment\")"
        },
        {
          "type": "general",
          "line": 886,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 887,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 887,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 887,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 888,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 888,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 888,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 889,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 889,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 889,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 917,
          "rule": "GiftVoucher.find({\n        $or: [{ ownerUserId: userId }, { recipientEmail: authSession.user.email }"
        },
        {
          "type": "email",
          "line": 917,
          "rule": "GiftVoucher.find({\n        $or: [{ ownerUserId: userId }, { recipientEmail: authSession.user.email }"
        },
        {
          "type": "email",
          "line": 917,
          "rule": "GiftVoucher.find({\n        $or: [{ ownerUserId: userId }, { recipientEmail: authSession.user.email }"
        },
        {
          "type": "email",
          "line": 918,
          "rule": "{\n        $or: [{ ownerUserId: userId }, { recipientEmail: authSession.user.email }],\n        status"
        },
        {
          "type": "email",
          "line": 918,
          "rule": "$or: [{ ownerUserId: userId }, { recipientEmail: authSession.user.email }]"
        },
        {
          "type": "email",
          "line": 918,
          "rule": "[{ ownerUserId: userId }, { recipientEmail: authSession.user.email }]"
        },
        {
          "type": "email",
          "line": 918,
          "rule": "{ recipientEmail: authSession.user.email }"
        },
        {
          "type": "email",
          "line": 918,
          "rule": "recipientEmail: authSession.user.email"
        },
        {
          "type": "email",
          "line": 919,
          "rule": "authSession.user.email"
        },
        {
          "type": "email",
          "line": 919,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 922,
          "rule": "User.findById(userId).select(\"preferences name email phone notificationPreferences treatmentPreferen"
        },
        {
          "type": "email",
          "line": 922,
          "rule": "User.findById(userId).select(\"preferences name email phone notificationPreferences treatmentPreferen"
        },
        {
          "type": "email",
          "line": 922,
          "rule": "User.findById(userId).select(\"preferences name email phone notificationPreferences treatmentPreferen"
        },
        {
          "type": "email",
          "line": 923,
          "rule": "\"preferences name email phone notificationPreferences treatmentPreferences\""
        },
        {
          "type": "email",
          "line": 1001,
          "rule": "userPreferences: {\n        therapistGender: treatmentPrefs.therapistGender || \"any\",\n        notific"
        },
        {
          "type": "email",
          "line": 1002,
          "rule": "{\n        therapistGender: treatmentPrefs.therapistGender || \"any\",\n        notificationMethods: not"
        },
        {
          "type": "email",
          "line": 1003,
          "rule": "notificationMethods: notificationPrefs.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1004,
          "rule": "notificationPrefs.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1004,
          "rule": "[\"email\"]"
        },
        {
          "type": "email",
          "line": 1004,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1008,
          "rule": "currentUser: {\n        id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n"
        },
        {
          "type": "email",
          "line": 1008,
          "rule": "{\n        id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n        phone"
        },
        {
          "type": "email",
          "line": 1009,
          "rule": "email: user.email"
        },
        {
          "type": "email",
          "line": 1009,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1010,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 1010,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1010,
          "rule": "phone: user.phone"
        },
        {
          "type": "phone",
          "line": 1010,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1010,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 1010,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 1038,
          "rule": "if (acceptedBooking) {\n      revalidatePath(`/dashboard/professional/booking-management/${bookingId}"
        },
        {
          "type": "general",
          "line": 1038,
          "rule": "{\n      revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)\n      revalidatePa"
        },
        {
          "type": "general",
          "line": 1039,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1039,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1039,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1040,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1040,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1040,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 1041,
          "rule": "try {\n        const clientUser = await User.findById(acceptedBooking.userId)\n          .select(\"name"
        },
        {
          "type": "email",
          "line": 1041,
          "rule": "{\n        const clientUser = await User.findById(acceptedBooking.userId)\n          .select(\"name ema"
        },
        {
          "type": "email",
          "line": 1041,
          "rule": "const clientUser = await User.findById(acceptedBooking.userId)\n          .select(\"name email phone n"
        },
        {
          "type": "email",
          "line": 1041,
          "rule": "const clientUser = await User.findById(acceptedBooking.userId)\n          .select(\"name email phone n"
        },
        {
          "type": "email",
          "line": 1042,
          "rule": "clientUser = await User.findById(acceptedBooking.userId)\n          .select(\"name email phone notific"
        },
        {
          "type": "email",
          "line": 1042,
          "rule": "await User.findById(acceptedBooking.userId)\n          .select(\"name email phone notificationPreferen"
        },
        {
          "type": "email",
          "line": 1042,
          "rule": "User.findById(acceptedBooking.userId)\n          .select(\"name email phone notificationPreferences\")\n"
        },
        {
          "type": "email",
          "line": 1042,
          "rule": "User.findById(acceptedBooking.userId)\n          .select(\"name email phone notificationPreferences\")\n"
        },
        {
          "type": "email",
          "line": 1042,
          "rule": "User.findById(acceptedBooking.userId)\n          .select(\"name email phone notificationPreferences\")"
        },
        {
          "type": "email",
          "line": 1043,
          "rule": "\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 1051,
          "rule": "const clientNotificationMethods = clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1051,
          "rule": "const clientNotificationMethods = clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1052,
          "rule": "clientNotificationMethods = clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1052,
          "rule": "clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1053,
          "rule": "[\"email\"]"
        },
        {
          "type": "email",
          "line": 1053,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1063,
          "rule": "if (clientNotificationMethods.includes(\"email\") && clientUser.email) {\n            await notificatio"
        },
        {
          "type": "email",
          "line": 1063,
          "rule": "clientNotificationMethods.includes(\"email\") && clientUser.email"
        },
        {
          "type": "email",
          "line": 1063,
          "rule": "clientNotificationMethods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 1064,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1064,
          "rule": "clientUser.email"
        },
        {
          "type": "email",
          "line": 1064,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1064,
          "rule": "{\n            await notificationManager.sendNotification(\n              { type: \"email\", value: clie"
        },
        {
          "type": "email",
          "line": 1064,
          "rule": "await notificationManager.sendNotification(\n              { type: \"email\", value: clientUser.email, "
        },
        {
          "type": "email",
          "line": 1064,
          "rule": "await notificationManager.sendNotification(\n              { type: \"email\", value: clientUser.email, "
        },
        {
          "type": "email",
          "line": 1065,
          "rule": "notificationManager.sendNotification(\n              { type: \"email\", value: clientUser.email, name: "
        },
        {
          "type": "email",
          "line": 1065,
          "rule": "{ type: \"email\", value: clientUser.email, name: clientUser.name, language: clientLang }"
        },
        {
          "type": "email",
          "line": 1066,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 1066,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1066,
          "rule": "value: clientUser.email"
        },
        {
          "type": "email",
          "line": 1066,
          "rule": "clientUser.email"
        },
        {
          "type": "email",
          "line": 1066,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1069,
          "rule": "if (clientNotificationMethods.includes(\"sms\") && clientUser.phone) {\n            await notificationM"
        },
        {
          "type": "phone",
          "line": 1069,
          "rule": "clientNotificationMethods.includes(\"sms\") && clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1070,
          "rule": "clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1070,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1070,
          "rule": "{\n            await notificationManager.sendNotification(\n              { type: \"phone\", value: clie"
        },
        {
          "type": "phone",
          "line": 1070,
          "rule": "await notificationManager.sendNotification(\n              { type: \"phone\", value: clientUser.phone, "
        },
        {
          "type": "phone",
          "line": 1070,
          "rule": "await notificationManager.sendNotification(\n              { type: \"phone\", value: clientUser.phone, "
        },
        {
          "type": "phone",
          "line": 1070,
          "rule": "notificationManager.sendNotification(\n              { type: \"phone\", value: clientUser.phone, langua"
        },
        {
          "type": "phone",
          "line": 1071,
          "rule": "{ type: \"phone\", value: clientUser.phone, language: clientLang }"
        },
        {
          "type": "phone",
          "line": 1072,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 1072,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 1072,
          "rule": "value: clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1072,
          "rule": "clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1072,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 1109,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1109,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1109,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1135,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1135,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1135,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1137,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1137,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1137,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 1234,
          "rule": "const bookings = await Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(sk"
        },
        {
          "type": "email",
          "line": 1234,
          "rule": "const bookings = await Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(sk"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "bookings = await Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n  "
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "await Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit("
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1235,
          "rule": "Booking.find(filterQuery)\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)"
        },
        {
          "type": "email",
          "line": 1238,
          "rule": "\"name email phone dateOfBirth gender roles activeRole treatmentPreferences notificationPreferences c"
        },
        {
          "type": "email",
          "line": 1241,
          "rule": "\"name email phone specialization\""
        },
        {
          "type": "general",
          "line": 1296,
          "rule": "if (assignedBooking) {\n      revalidatePath(\"/dashboard/admin/bookings\")\n      revalidatePath(`/dash"
        },
        {
          "type": "general",
          "line": 1296,
          "rule": "{\n      revalidatePath(\"/dashboard/admin/bookings\")\n      revalidatePath(`/dashboard/professional/bo"
        },
        {
          "type": "general",
          "line": 1296,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1296,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1296,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1297,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1297,
          "rule": "revalidatePath(`/dashboard/professional/booking-management/${bookingId}`)"
        },
        {
          "type": "general",
          "line": 1297,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "{\n        // Send notifications to client and professional\n        const [clientUser, professional, "
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "const [clientUser, professional, treatment] = await Promise.all([\n          User.findById(assignedBo"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "const [clientUser, professional, treatment] = await Promise.all([\n          User.findById(assignedBo"
        },
        {
          "type": "email",
          "line": 1300,
          "rule": "[clientUser, professional, treatment] = await Promise.all([\n          User.findById(assignedBooking."
        },
        {
          "type": "email",
          "line": 1301,
          "rule": "await Promise.all([\n          User.findById(assignedBooking.userId).select(\"name email phone notific"
        },
        {
          "type": "email",
          "line": 1301,
          "rule": "Promise.all([\n          User.findById(assignedBooking.userId).select(\"name email phone notificationP"
        },
        {
          "type": "email",
          "line": 1302,
          "rule": "[\n          User.findById(assignedBooking.userId).select(\"name email phone notificationPreferences\")"
        },
        {
          "type": "email",
          "line": 1302,
          "rule": "User.findById(assignedBooking.userId).select(\"name email phone notificationPreferences\").lean()"
        },
        {
          "type": "email",
          "line": 1302,
          "rule": "User.findById(assignedBooking.userId).select(\"name email phone notificationPreferences\").lean"
        },
        {
          "type": "email",
          "line": 1302,
          "rule": "User.findById(assignedBooking.userId).select(\"name email phone notificationPreferences\")"
        },
        {
          "type": "email",
          "line": 1303,
          "rule": "\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 1304,
          "rule": "User.findById(professionalId).select(\"name email phone notificationPreferences\").lean()"
        },
        {
          "type": "email",
          "line": 1304,
          "rule": "User.findById(professionalId).select(\"name email phone notificationPreferences\").lean"
        },
        {
          "type": "email",
          "line": 1304,
          "rule": "User.findById(professionalId).select(\"name email phone notificationPreferences\")"
        },
        {
          "type": "email",
          "line": 1305,
          "rule": "\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 1312,
          "rule": "const clientNotificationMethods = clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1312,
          "rule": "const clientNotificationMethods = clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1312,
          "rule": "clientNotificationMethods = clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1312,
          "rule": "clientUser.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1313,
          "rule": "[\"email\"]"
        },
        {
          "type": "email",
          "line": 1313,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1323,
          "rule": "if (clientNotificationMethods.includes(\"email\") && clientUser.email) {\n            await notificatio"
        },
        {
          "type": "email",
          "line": 1323,
          "rule": "clientNotificationMethods.includes(\"email\") && clientUser.email"
        },
        {
          "type": "email",
          "line": 1323,
          "rule": "clientNotificationMethods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 1324,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1324,
          "rule": "clientUser.email"
        },
        {
          "type": "email",
          "line": 1324,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1324,
          "rule": "{\n            await notificationManager.sendNotification(\n              { type: \"email\", value: clie"
        },
        {
          "type": "email",
          "line": 1324,
          "rule": "await notificationManager.sendNotification(\n              { type: \"email\", value: clientUser.email, "
        },
        {
          "type": "email",
          "line": 1324,
          "rule": "await notificationManager.sendNotification(\n              { type: \"email\", value: clientUser.email, "
        },
        {
          "type": "email",
          "line": 1325,
          "rule": "notificationManager.sendNotification(\n              { type: \"email\", value: clientUser.email, name: "
        },
        {
          "type": "email",
          "line": 1325,
          "rule": "{ type: \"email\", value: clientUser.email, name: clientUser.name, language: clientLang }"
        },
        {
          "type": "email",
          "line": 1326,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 1326,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1326,
          "rule": "value: clientUser.email"
        },
        {
          "type": "email",
          "line": 1326,
          "rule": "clientUser.email"
        },
        {
          "type": "email",
          "line": 1326,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1329,
          "rule": "if (clientNotificationMethods.includes(\"sms\") && clientUser.phone) {\n            await notificationM"
        },
        {
          "type": "phone",
          "line": 1329,
          "rule": "clientNotificationMethods.includes(\"sms\") && clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1330,
          "rule": "clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1330,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1330,
          "rule": "{\n            await notificationManager.sendNotification(\n              { type: \"phone\", value: clie"
        },
        {
          "type": "phone",
          "line": 1330,
          "rule": "await notificationManager.sendNotification(\n              { type: \"phone\", value: clientUser.phone, "
        },
        {
          "type": "phone",
          "line": 1330,
          "rule": "await notificationManager.sendNotification(\n              { type: \"phone\", value: clientUser.phone, "
        },
        {
          "type": "phone",
          "line": 1331,
          "rule": "notificationManager.sendNotification(\n              { type: \"phone\", value: clientUser.phone, langua"
        },
        {
          "type": "phone",
          "line": 1331,
          "rule": "{ type: \"phone\", value: clientUser.phone, language: clientLang }"
        },
        {
          "type": "phone",
          "line": 1332,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 1332,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 1332,
          "rule": "value: clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1332,
          "rule": "clientUser.phone"
        },
        {
          "type": "phone",
          "line": 1332,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1337,
          "rule": "const professionalNotificationMethods = professional.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1337,
          "rule": "const professionalNotificationMethods = professional.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1338,
          "rule": "professionalNotificationMethods = professional.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1338,
          "rule": "professional.notificationPreferences?.methods || [\"email\"]"
        },
        {
          "type": "email",
          "line": 1339,
          "rule": "[\"email\"]"
        },
        {
          "type": "email",
          "line": 1340,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1349,
          "rule": "if (professionalNotificationMethods.includes(\"email\") && professional.email) {\n            await not"
        },
        {
          "type": "email",
          "line": 1350,
          "rule": "professionalNotificationMethods.includes(\"email\") && professional.email"
        },
        {
          "type": "email",
          "line": 1350,
          "rule": "professionalNotificationMethods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 1350,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1351,
          "rule": "professional.email"
        },
        {
          "type": "email",
          "line": 1351,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1351,
          "rule": "{\n            await notificationManager.sendNotification(\n              { type: \"email\", value: prof"
        },
        {
          "type": "email",
          "line": 1351,
          "rule": "await notificationManager.sendNotification(\n              { type: \"email\", value: professional.email"
        },
        {
          "type": "email",
          "line": 1351,
          "rule": "await notificationManager.sendNotification(\n              { type: \"email\", value: professional.email"
        },
        {
          "type": "email",
          "line": 1351,
          "rule": "notificationManager.sendNotification(\n              { type: \"email\", value: professional.email, name"
        },
        {
          "type": "email",
          "line": 1352,
          "rule": "{ type: \"email\", value: professional.email, name: professional.name, language: professionalLang }"
        },
        {
          "type": "email",
          "line": 1352,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 1353,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1353,
          "rule": "value: professional.email"
        },
        {
          "type": "email",
          "line": 1353,
          "rule": "professional.email"
        },
        {
          "type": "email",
          "line": 1353,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1356,
          "rule": "if (professionalNotificationMethods.includes(\"sms\") && professional.phone) {\n            await notif"
        },
        {
          "type": "phone",
          "line": 1356,
          "rule": "professionalNotificationMethods.includes(\"sms\") && professional.phone"
        },
        {
          "type": "phone",
          "line": 1357,
          "rule": "professional.phone"
        },
        {
          "type": "phone",
          "line": 1357,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1357,
          "rule": "{\n            await notificationManager.sendNotification(\n              { type: \"phone\", value: prof"
        },
        {
          "type": "phone",
          "line": 1358,
          "rule": "await notificationManager.sendNotification(\n              { type: \"phone\", value: professional.phone"
        },
        {
          "type": "phone",
          "line": 1358,
          "rule": "await notificationManager.sendNotification(\n              { type: \"phone\", value: professional.phone"
        },
        {
          "type": "phone",
          "line": 1358,
          "rule": "notificationManager.sendNotification(\n              { type: \"phone\", value: professional.phone, lang"
        },
        {
          "type": "phone",
          "line": 1359,
          "rule": "{ type: \"phone\", value: professional.phone, language: professionalLang }"
        },
        {
          "type": "phone",
          "line": 1359,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 1359,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 1359,
          "rule": "value: professional.phone"
        },
        {
          "type": "phone",
          "line": 1359,
          "rule": "professional.phone"
        },
        {
          "type": "phone",
          "line": 1360,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1384,
          "rule": "try {\n    await dbConnect()\n\n    const professionals = await User.find({ roles: \"professional\" })\n  "
        },
        {
          "type": "email",
          "line": 1384,
          "rule": "{\n    await dbConnect()\n\n    const professionals = await User.find({ roles: \"professional\" })\n      "
        },
        {
          "type": "email",
          "line": 1385,
          "rule": "const professionals = await User.find({ roles: \"professional\" })\n      .select(\"_id name email phone"
        },
        {
          "type": "email",
          "line": 1385,
          "rule": "const professionals = await User.find({ roles: \"professional\" })\n      .select(\"_id name email phone"
        },
        {
          "type": "email",
          "line": 1385,
          "rule": "professionals = await User.find({ roles: \"professional\" })\n      .select(\"_id name email phone gende"
        },
        {
          "type": "email",
          "line": 1385,
          "rule": "await User.find({ roles: \"professional\" })\n      .select(\"_id name email phone gender\")\n      .lean("
        },
        {
          "type": "email",
          "line": 1386,
          "rule": "User.find({ roles: \"professional\" })\n      .select(\"_id name email phone gender\")\n      .lean()"
        },
        {
          "type": "email",
          "line": 1386,
          "rule": "User.find({ roles: \"professional\" })\n      .select(\"_id name email phone gender\")\n      .lean"
        },
        {
          "type": "email",
          "line": 1386,
          "rule": "User.find({ roles: \"professional\" })\n      .select(\"_id name email phone gender\")"
        },
        {
          "type": "email",
          "line": 1387,
          "rule": "\"_id name email phone gender\""
        },
        {
          "type": "email",
          "line": 1387,
          "rule": "return {\n      success: true,\n      professionals: professionals.map((p) => ({\n        _id: p._id.to"
        },
        {
          "type": "email",
          "line": 1388,
          "rule": "{\n      success: true,\n      professionals: professionals.map((p) => ({\n        _id: p._id.toString("
        },
        {
          "type": "email",
          "line": 1388,
          "rule": "professionals: professionals.map((p) => ({\n        _id: p._id.toString(),\n        name: p.name,\n    "
        },
        {
          "type": "email",
          "line": 1389,
          "rule": "professionals.map((p) => ({\n        _id: p._id.toString(),\n        name: p.name,\n        email: p.em"
        },
        {
          "type": "email",
          "line": 1389,
          "rule": "(p) => ({\n        _id: p._id.toString(),\n        name: p.name,\n        email: p.email,\n        phone"
        },
        {
          "type": "email",
          "line": 1389,
          "rule": "({\n        _id: p._id.toString(),\n        name: p.name,\n        email: p.email,\n        phone: p.pho"
        },
        {
          "type": "email",
          "line": 1389,
          "rule": "{\n        _id: p._id.toString(),\n        name: p.name,\n        email: p.email,\n        phone: p.phon"
        },
        {
          "type": "email",
          "line": 1390,
          "rule": "email: p.email"
        },
        {
          "type": "email",
          "line": 1390,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1391,
          "rule": "p.email"
        },
        {
          "type": "email",
          "line": 1391,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1391,
          "rule": "phone: p.phone"
        },
        {
          "type": "phone",
          "line": 1391,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1391,
          "rule": "p.phone"
        },
        {
          "type": "phone",
          "line": 1391,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 1401,
          "rule": "paymentStatus?: \"pending\" | \"paid\" | \"failed\" | \"not_required\""
        },
        {
          "type": "required",
          "line": 1401,
          "rule": "\"pending\" | \"paid\" | \"failed\" | \"not_required\""
        },
        {
          "type": "required",
          "line": 1402,
          "rule": "\"not_required\""
        },
        {
          "type": "required",
          "line": 1402,
          "rule": "\"not_required\""
        },
        {
          "type": "general",
          "line": 1437,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1437,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1437,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1439,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 1439,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 1439,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1440,
          "rule": "revalidatePath(\"/dashboard/professional/bookings\")"
        },
        {
          "type": "general",
          "line": 1440,
          "rule": "revalidatePath(\"/dashboard/professional/bookings\")"
        },
        {
          "type": "general",
          "line": 1440,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1459,
          "rule": "const validatedPayload = validationResult.data as CreateGuestBookingPayloadType & {\n    priceDetails"
        },
        {
          "type": "general",
          "line": 1459,
          "rule": "const validatedPayload = validationResult.data as CreateGuestBookingPayloadType & {\n    priceDetails"
        },
        {
          "type": "general",
          "line": 1459,
          "rule": "validatedPayload = validationResult.data as CreateGuestBookingPayloadType & {\n    priceDetails: Clie"
        },
        {
          "type": "general",
          "line": 1459,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1467,
          "rule": "const guestInfo = validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1467,
          "rule": "const guestInfo = validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1469,
          "rule": "guestInfo = validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1469,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1469,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1470,
          "rule": "if (!guestInfo || !guestInfo.name || !guestInfo.email || !guestInfo.phone) {\n      console.log(\"❌ Mi"
        },
        {
          "type": "email",
          "line": 1470,
          "rule": "!guestInfo || !guestInfo.name || !guestInfo.email || !guestInfo.phone"
        },
        {
          "type": "email",
          "line": 1470,
          "rule": "!guestInfo || !guestInfo.name || !guestInfo.email"
        },
        {
          "type": "email",
          "line": 1470,
          "rule": "!guestInfo.email"
        },
        {
          "type": "email",
          "line": 1470,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1471,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1471,
          "rule": "!guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1471,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1471,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 1474,
          "rule": "console.log(\"✅ Guest info validated:\", guestInfo)"
        },
        {
          "type": "general",
          "line": 1474,
          "rule": "console.log(\"✅ Guest info validated:\", guestInfo)"
        },
        {
          "type": "general",
          "line": 1475,
          "rule": "\"✅ Guest info validated:\""
        },
        {
          "type": "general",
          "line": 1477,
          "rule": "if (validatedPayload.customAddressDetails) {\n      if (!validatedPayload.customAddressDetails.fullAd"
        },
        {
          "type": "general",
          "line": 1477,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1477,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1478,
          "rule": "{\n      if (!validatedPayload.customAddressDetails.fullAddress) {\n        validatedPayload.customAdd"
        },
        {
          "type": "general",
          "line": 1478,
          "rule": "if (!validatedPayload.customAddressDetails.fullAddress) {\n        validatedPayload.customAddressDeta"
        },
        {
          "type": "general",
          "line": 1478,
          "rule": "!validatedPayload.customAddressDetails.fullAddress"
        },
        {
          "type": "general",
          "line": 1478,
          "rule": "validatedPayload.customAddressDetails.fullAddress"
        },
        {
          "type": "general",
          "line": 1478,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1478,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1479,
          "rule": "{\n        validatedPayload.customAddressDetails.fullAddress = constructFullAddressHelper(\n          "
        },
        {
          "type": "general",
          "line": 1479,
          "rule": "validatedPayload.customAddressDetails.fullAddress = constructFullAddressHelper(\n          validatedP"
        },
        {
          "type": "general",
          "line": 1479,
          "rule": "validatedPayload.customAddressDetails.fullAddress = constructFullAddressHelper(\n          validatedP"
        },
        {
          "type": "general",
          "line": 1479,
          "rule": "validatedPayload.customAddressDetails.fullAddress"
        },
        {
          "type": "general",
          "line": 1479,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1479,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1480,
          "rule": "constructFullAddressHelper(\n          validatedPayload.customAddressDetails as Partial<IAddress>,\n  "
        },
        {
          "type": "general",
          "line": 1481,
          "rule": "validatedPayload.customAddressDetails as Partial<IAddress>"
        },
        {
          "type": "general",
          "line": 1481,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1481,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1482,
          "rule": "bookingAddressSnapshot = validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1482,
          "rule": "bookingAddressSnapshot = validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1483,
          "rule": "validatedPayload.customAddressDetails"
        },
        {
          "type": "general",
          "line": 1483,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1498,
          "rule": "const newBooking = new Booking({\n        ...validatedPayload,\n        userId: null, // Guest booking"
        },
        {
          "type": "general",
          "line": 1498,
          "rule": "const newBooking = new Booking({\n        ...validatedPayload,\n        userId: null, // Guest booking"
        },
        {
          "type": "general",
          "line": 1499,
          "rule": "newBooking = new Booking({\n        ...validatedPayload,\n        userId: null, // Guest booking - no "
        },
        {
          "type": "general",
          "line": 1499,
          "rule": "new Booking({\n        ...validatedPayload,\n        userId: null, // Guest booking - no user associat"
        },
        {
          "type": "general",
          "line": 1499,
          "rule": "{\n        ...validatedPayload,\n        userId: null, // Guest booking - no user association initiall"
        },
        {
          "type": "general",
          "line": 1499,
          "rule": "...validatedPayload"
        },
        {
          "type": "general",
          "line": 1499,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1502,
          "rule": "bookedByUserEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1503,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1503,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1503,
          "rule": "bookedByUserPhone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1504,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1504,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 1504,
          "rule": "recipientName: validatedPayload.recipientName || guestInfo.name"
        },
        {
          "type": "general",
          "line": 1505,
          "rule": "validatedPayload.recipientName || guestInfo.name"
        },
        {
          "type": "general",
          "line": 1505,
          "rule": "validatedPayload.recipientName"
        },
        {
          "type": "general",
          "line": 1505,
          "rule": "validatedPayload"
        },
        {
          "type": "phone",
          "line": 1506,
          "rule": "recipientPhone: validatedPayload.recipientPhone || guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1506,
          "rule": "validatedPayload.recipientPhone || guestInfo.phone"
        },
        {
          "type": "general",
          "line": 1506,
          "rule": "validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1506,
          "rule": "validatedPayload"
        },
        {
          "type": "phone",
          "line": 1507,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1507,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1507,
          "rule": "recipientEmail: validatedPayload.recipientEmail || guestInfo.email"
        },
        {
          "type": "email",
          "line": 1508,
          "rule": "validatedPayload.recipientEmail || guestInfo.email"
        },
        {
          "type": "general",
          "line": 1508,
          "rule": "validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1508,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1508,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1508,
          "rule": "email"
        },
        {
          "type": "general",
          "line": 1509,
          "rule": "recipientBirthDate: validatedPayload.recipientBirthDate"
        },
        {
          "type": "general",
          "line": 1509,
          "rule": "validatedPayload.recipientBirthDate"
        },
        {
          "type": "general",
          "line": 1509,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1510,
          "rule": "recipientGender: validatedPayload.recipientGender"
        },
        {
          "type": "general",
          "line": 1510,
          "rule": "validatedPayload.recipientGender"
        },
        {
          "type": "general",
          "line": 1510,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1512,
          "rule": "priceDetails: {\n          basePrice: validatedPayload.priceDetails.basePrice,\n          surcharges: "
        },
        {
          "type": "general",
          "line": 1514,
          "rule": "{\n          basePrice: validatedPayload.priceDetails.basePrice,\n          surcharges: validatedPaylo"
        },
        {
          "type": "general",
          "line": 1514,
          "rule": "{\n          basePrice: validatedPayload.priceDetails.basePrice,\n          surcharges: validatedPaylo"
        },
        {
          "type": "general",
          "line": 1514,
          "rule": "basePrice: validatedPayload.priceDetails.basePrice"
        },
        {
          "type": "general",
          "line": 1515,
          "rule": "validatedPayload.priceDetails.basePrice"
        },
        {
          "type": "general",
          "line": 1515,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1515,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1515,
          "rule": "surcharges: validatedPayload.priceDetails.surcharges"
        },
        {
          "type": "general",
          "line": 1516,
          "rule": "validatedPayload.priceDetails.surcharges"
        },
        {
          "type": "general",
          "line": 1516,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1516,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1517,
          "rule": "totalSurchargesAmount: validatedPayload.priceDetails.totalSurchargesAmount"
        },
        {
          "type": "general",
          "line": 1517,
          "rule": "validatedPayload.priceDetails.totalSurchargesAmount"
        },
        {
          "type": "general",
          "line": 1517,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1517,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1518,
          "rule": "treatmentPriceAfterSubscriptionOrTreatmentVoucher:\n            validatedPayload.priceDetails.treatme"
        },
        {
          "type": "general",
          "line": 1520,
          "rule": "validatedPayload.priceDetails.treatmentPriceAfterSubscriptionOrTreatmentVoucher"
        },
        {
          "type": "general",
          "line": 1520,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1520,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1521,
          "rule": "discountAmount: validatedPayload.priceDetails.couponDiscount"
        },
        {
          "type": "general",
          "line": 1522,
          "rule": "validatedPayload.priceDetails.couponDiscount"
        },
        {
          "type": "general",
          "line": 1522,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1522,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1523,
          "rule": "voucherAppliedAmount: validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1524,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1524,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1524,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1525,
          "rule": "finalAmount: validatedPayload.priceDetails.finalAmount"
        },
        {
          "type": "general",
          "line": 1525,
          "rule": "validatedPayload.priceDetails.finalAmount"
        },
        {
          "type": "general",
          "line": 1525,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1525,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1526,
          "rule": "isBaseTreatmentCoveredBySubscription: validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscrip"
        },
        {
          "type": "general",
          "line": 1527,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscription"
        },
        {
          "type": "general",
          "line": 1527,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1527,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1528,
          "rule": "isBaseTreatmentCoveredByTreatmentVoucher:\n            validatedPayload.priceDetails.isBaseTreatmentC"
        },
        {
          "type": "general",
          "line": 1529,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher"
        },
        {
          "type": "general",
          "line": 1529,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1529,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1531,
          "rule": "isFullyCoveredByVoucherOrSubscription: validatedPayload.priceDetails.isFullyCoveredByVoucherOrSubscr"
        },
        {
          "type": "general",
          "line": 1532,
          "rule": "validatedPayload.priceDetails.isFullyCoveredByVoucherOrSubscription"
        },
        {
          "type": "general",
          "line": 1532,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1532,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1533,
          "rule": "appliedCouponId: validatedPayload.priceDetails.appliedCouponId\n            ? new mongoose.Types.Obje"
        },
        {
          "type": "general",
          "line": 1534,
          "rule": "validatedPayload.priceDetails.appliedCouponId\n            ? new mongoose.Types.ObjectId(validatedPay"
        },
        {
          "type": "general",
          "line": 1534,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 1534,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1534,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1535,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.priceDetails.appliedCouponId)"
        },
        {
          "type": "general",
          "line": 1536,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 1536,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1536,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1537,
          "rule": "appliedGiftVoucherId: validatedPayload.priceDetails.appliedGiftVoucherId\n            ? new mongoose."
        },
        {
          "type": "general",
          "line": 1538,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId\n            ? new mongoose.Types.ObjectId(validat"
        },
        {
          "type": "general",
          "line": 1538,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 1538,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1538,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1539,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.priceDetails.appliedGiftVoucherId)"
        },
        {
          "type": "general",
          "line": 1540,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 1540,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1540,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1541,
          "rule": "redeemedUserSubscriptionId: validatedPayload.priceDetails.redeemedUserSubscriptionId\n            ? n"
        },
        {
          "type": "general",
          "line": 1542,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId\n            ? new mongoose.Types.ObjectId(v"
        },
        {
          "type": "general",
          "line": 1542,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId"
        },
        {
          "type": "general",
          "line": 1542,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1542,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1543,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.priceDetails.redeemedUserSubscriptionId)"
        },
        {
          "type": "general",
          "line": 1544,
          "rule": "validatedPayload.priceDetails.redeemedUserSubscriptionId"
        },
        {
          "type": "general",
          "line": 1544,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1544,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1546,
          "rule": "paymentDetails: {\n          paymentMethodId: validatedPayload.paymentDetails.paymentMethodId\n       "
        },
        {
          "type": "general",
          "line": 1546,
          "rule": "{\n          paymentMethodId: validatedPayload.paymentDetails.paymentMethodId\n            ? new mongo"
        },
        {
          "type": "general",
          "line": 1547,
          "rule": "paymentMethodId: validatedPayload.paymentDetails.paymentMethodId\n            ? new mongoose.Types.Ob"
        },
        {
          "type": "general",
          "line": 1547,
          "rule": "validatedPayload.paymentDetails.paymentMethodId\n            ? new mongoose.Types.ObjectId(validatedP"
        },
        {
          "type": "general",
          "line": 1547,
          "rule": "validatedPayload.paymentDetails.paymentMethodId"
        },
        {
          "type": "general",
          "line": 1547,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 1547,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1548,
          "rule": "new mongoose.Types.ObjectId(validatedPayload.paymentDetails.paymentMethodId)"
        },
        {
          "type": "general",
          "line": 1549,
          "rule": "validatedPayload.paymentDetails.paymentMethodId"
        },
        {
          "type": "general",
          "line": 1549,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 1549,
          "rule": "validatedPayload"
        },
        {
          "type": "required",
          "line": 1550,
          "rule": "paymentStatus:\n            validatedPayload.priceDetails.finalAmount === 0\n              ? \"not_requ"
        },
        {
          "type": "required",
          "line": 1551,
          "rule": "validatedPayload.priceDetails.finalAmount === 0\n              ? \"not_required\"\n              : valid"
        },
        {
          "type": "general",
          "line": 1551,
          "rule": "validatedPayload.priceDetails.finalAmount === 0"
        },
        {
          "type": "general",
          "line": 1551,
          "rule": "validatedPayload.priceDetails.finalAmount"
        },
        {
          "type": "general",
          "line": 1551,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1551,
          "rule": "validatedPayload"
        },
        {
          "type": "required",
          "line": 1552,
          "rule": "\"not_required\""
        },
        {
          "type": "general",
          "line": 1553,
          "rule": "validatedPayload.paymentDetails.paymentStatus || \"pending\""
        },
        {
          "type": "general",
          "line": 1553,
          "rule": "validatedPayload.paymentDetails.paymentStatus"
        },
        {
          "type": "general",
          "line": 1553,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 1553,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1554,
          "rule": "transactionId: validatedPayload.paymentDetails.transactionId"
        },
        {
          "type": "general",
          "line": 1555,
          "rule": "validatedPayload.paymentDetails.transactionId"
        },
        {
          "type": "general",
          "line": 1555,
          "rule": "validatedPayload.paymentDetails"
        },
        {
          "type": "general",
          "line": 1555,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1561,
          "rule": "if (validatedPayload.priceDetails.appliedGiftVoucherId && validatedPayload.priceDetails.voucherAppli"
        },
        {
          "type": "general",
          "line": 1563,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId && validatedPayload.priceDetails.voucherAppliedAm"
        },
        {
          "type": "general",
          "line": 1563,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 1563,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1563,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1564,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount > 0"
        },
        {
          "type": "general",
          "line": 1564,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1564,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1564,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1565,
          "rule": "{\n        console.log(\"🎁 Processing gift voucher redemption...\")\n        const voucher = await Gift"
        },
        {
          "type": "general",
          "line": 1566,
          "rule": "const voucher = await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).sessi"
        },
        {
          "type": "general",
          "line": 1566,
          "rule": "const voucher = await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).sessi"
        },
        {
          "type": "general",
          "line": 1566,
          "rule": "voucher = await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(mon"
        },
        {
          "type": "general",
          "line": 1566,
          "rule": "await GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(mongooseDbSes"
        },
        {
          "type": "general",
          "line": 1567,
          "rule": "GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session(mongooseDbSession)"
        },
        {
          "type": "general",
          "line": 1567,
          "rule": "GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId).session"
        },
        {
          "type": "general",
          "line": 1567,
          "rule": "GiftVoucher.findById(validatedPayload.priceDetails.appliedGiftVoucherId)"
        },
        {
          "type": "general",
          "line": 1567,
          "rule": "validatedPayload.priceDetails.appliedGiftVoucherId"
        },
        {
          "type": "general",
          "line": 1567,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1567,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1571,
          "rule": "if (\n          voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBase"
        },
        {
          "type": "general",
          "line": 1571,
          "rule": "voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBaseTreatmentCovere"
        },
        {
          "type": "general",
          "line": 1572,
          "rule": "validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher"
        },
        {
          "type": "general",
          "line": 1572,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1572,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1576,
          "rule": "if (voucher.voucherType === \"monetary\") {\n          if (\n            typeof voucher.remainingAmount "
        },
        {
          "type": "general",
          "line": 1577,
          "rule": "{\n          if (\n            typeof voucher.remainingAmount !== \"number\" ||\n            voucher.rema"
        },
        {
          "type": "general",
          "line": 1577,
          "rule": "if (\n            typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount "
        },
        {
          "type": "general",
          "line": 1578,
          "rule": "typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount < validatedPayloa"
        },
        {
          "type": "general",
          "line": 1579,
          "rule": "voucher.remainingAmount < validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1580,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1580,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1580,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1583,
          "rule": "voucher.remainingAmount -= validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1583,
          "rule": "voucher.remainingAmount -= validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1583,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1583,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1583,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1590,
          "rule": "voucher.usageHistory.push({\n          date: new Date(),\n          amount: validatedPayload.priceDeta"
        },
        {
          "type": "general",
          "line": 1590,
          "rule": "voucher.usageHistory.push({\n          date: new Date(),\n          amount: validatedPayload.priceDeta"
        },
        {
          "type": "general",
          "line": 1591,
          "rule": "{\n          date: new Date(),\n          amount: validatedPayload.priceDetails.voucherAppliedAmount,\n"
        },
        {
          "type": "general",
          "line": 1591,
          "rule": "amount: validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1592,
          "rule": "validatedPayload.priceDetails.voucherAppliedAmount"
        },
        {
          "type": "general",
          "line": 1592,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1592,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1598,
          "rule": "if (validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > "
        },
        {
          "type": "general",
          "line": 1599,
          "rule": "validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > 0"
        },
        {
          "type": "general",
          "line": 1599,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 1599,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1599,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1600,
          "rule": "validatedPayload.priceDetails.couponDiscount > 0"
        },
        {
          "type": "general",
          "line": 1600,
          "rule": "validatedPayload.priceDetails.couponDiscount"
        },
        {
          "type": "general",
          "line": 1600,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1600,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1601,
          "rule": "{\n        console.log(\"🏷️ Processing coupon application...\")\n        const coupon = await Coupon.fi"
        },
        {
          "type": "general",
          "line": 1602,
          "rule": "const coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongoose"
        },
        {
          "type": "general",
          "line": 1602,
          "rule": "const coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongoose"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "coupon = await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongooseDbSess"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "await Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongooseDbSession)"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session(mongooseDbSession)"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "Coupon.findById(validatedPayload.priceDetails.appliedCouponId).session"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "Coupon.findById(validatedPayload.priceDetails.appliedCouponId)"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "validatedPayload.priceDetails.appliedCouponId"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "validatedPayload.priceDetails"
        },
        {
          "type": "general",
          "line": 1603,
          "rule": "validatedPayload"
        },
        {
          "type": "required",
          "line": 1609,
          "rule": "if (bookingResult) {\n        if (bookingResult.priceDetails.finalAmount === 0) {\n          bookingRe"
        },
        {
          "type": "required",
          "line": 1610,
          "rule": "{\n        if (bookingResult.priceDetails.finalAmount === 0) {\n          bookingResult.paymentDetails"
        },
        {
          "type": "required",
          "line": 1610,
          "rule": "if (bookingResult.priceDetails.finalAmount === 0) {\n          bookingResult.paymentDetails.paymentSt"
        },
        {
          "type": "required",
          "line": 1611,
          "rule": "{\n          bookingResult.paymentDetails.paymentStatus = \"not_required\"\n        }"
        },
        {
          "type": "required",
          "line": 1611,
          "rule": "bookingResult.paymentDetails.paymentStatus = \"not_required\""
        },
        {
          "type": "required",
          "line": 1611,
          "rule": "bookingResult.paymentDetails.paymentStatus = \"not_required\""
        },
        {
          "type": "required",
          "line": 1612,
          "rule": "\"not_required\""
        },
        {
          "type": "general",
          "line": 1618,
          "rule": "if (bookingResult) {\n      console.log(\"🔄 Revalidating paths...\")\n      // Revalidate relevant path"
        },
        {
          "type": "general",
          "line": 1618,
          "rule": "{\n      console.log(\"🔄 Revalidating paths...\")\n      // Revalidate relevant paths\n      revalidateP"
        },
        {
          "type": "general",
          "line": 1619,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1619,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 1619,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1630,
          "rule": "if (treatment) {\n          const { sendTreatmentBookingSuccess } = await import(\"@/lib/notifications"
        },
        {
          "type": "general",
          "line": 1630,
          "rule": "{\n          const { sendTreatmentBookingSuccess } = await import(\"@/lib/notifications/notification-m"
        },
        {
          "type": "general",
          "line": 1632,
          "rule": "const isBookingForSomeoneElse = Boolean(validatedPayload.guestInfo.isBookingForSomeoneElse)"
        },
        {
          "type": "general",
          "line": 1632,
          "rule": "const isBookingForSomeoneElse = Boolean(validatedPayload.guestInfo.isBookingForSomeoneElse)"
        },
        {
          "type": "general",
          "line": 1633,
          "rule": "isBookingForSomeoneElse = Boolean(validatedPayload.guestInfo.isBookingForSomeoneElse)"
        },
        {
          "type": "general",
          "line": 1633,
          "rule": "Boolean(validatedPayload.guestInfo.isBookingForSomeoneElse)"
        },
        {
          "type": "general",
          "line": 1634,
          "rule": "validatedPayload.guestInfo.isBookingForSomeoneElse"
        },
        {
          "type": "general",
          "line": 1634,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1634,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1636,
          "rule": "const recipientName = isBookingForSomeoneElse \n            ? `${validatedPayload.recipientName}` \n  "
        },
        {
          "type": "general",
          "line": 1636,
          "rule": "const recipientName = isBookingForSomeoneElse \n            ? `${validatedPayload.recipientName}` \n  "
        },
        {
          "type": "general",
          "line": 1636,
          "rule": "recipientName = isBookingForSomeoneElse \n            ? `${validatedPayload.recipientName}` \n        "
        },
        {
          "type": "general",
          "line": 1636,
          "rule": "isBookingForSomeoneElse \n            ? `${validatedPayload.recipientName}` \n            : bookerName"
        },
        {
          "type": "general",
          "line": 1637,
          "rule": "`${validatedPayload.recipientName}`"
        },
        {
          "type": "general",
          "line": 1637,
          "rule": "validatedPayload.recipientName}`"
        },
        {
          "type": "general",
          "line": 1637,
          "rule": "validatedPayload.recipientName"
        },
        {
          "type": "general",
          "line": 1637,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1642,
          "rule": "const bookerNotificationMethod = validatedPayload.guestInfo.bookerNotificationMethod || \"email\""
        },
        {
          "type": "email",
          "line": 1642,
          "rule": "const bookerNotificationMethod = validatedPayload.guestInfo.bookerNotificationMethod || \"email\""
        },
        {
          "type": "email",
          "line": 1644,
          "rule": "bookerNotificationMethod = validatedPayload.guestInfo.bookerNotificationMethod || \"email\""
        },
        {
          "type": "email",
          "line": 1644,
          "rule": "validatedPayload.guestInfo.bookerNotificationMethod || \"email\""
        },
        {
          "type": "general",
          "line": 1644,
          "rule": "validatedPayload.guestInfo.bookerNotificationMethod"
        },
        {
          "type": "general",
          "line": 1644,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1644,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1645,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 1645,
          "rule": "const bookerNotificationLanguage = validatedPayload.guestInfo.bookerNotificationLanguage || \"he\""
        },
        {
          "type": "general",
          "line": 1645,
          "rule": "const bookerNotificationLanguage = validatedPayload.guestInfo.bookerNotificationLanguage || \"he\""
        },
        {
          "type": "general",
          "line": 1646,
          "rule": "bookerNotificationLanguage = validatedPayload.guestInfo.bookerNotificationLanguage || \"he\""
        },
        {
          "type": "general",
          "line": 1646,
          "rule": "validatedPayload.guestInfo.bookerNotificationLanguage || \"he\""
        },
        {
          "type": "general",
          "line": 1646,
          "rule": "validatedPayload.guestInfo.bookerNotificationLanguage"
        },
        {
          "type": "general",
          "line": 1646,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1646,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1648,
          "rule": "if (bookerNotificationMethod === \"email\" || bookerNotificationMethod === \"both\") {\n            recip"
        },
        {
          "type": "email",
          "line": 1648,
          "rule": "bookerNotificationMethod === \"email\" || bookerNotificationMethod === \"both\""
        },
        {
          "type": "email",
          "line": 1648,
          "rule": "bookerNotificationMethod === \"email\""
        },
        {
          "type": "email",
          "line": 1649,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1650,
          "rule": "{\n            recipients.push({\n              type: \"email\" as const,\n              value: guestInfo"
        },
        {
          "type": "email",
          "line": 1650,
          "rule": "recipients.push({\n              type: \"email\" as const,\n              value: guestInfo.email,\n      "
        },
        {
          "type": "email",
          "line": 1650,
          "rule": "recipients.push({\n              type: \"email\" as const,\n              value: guestInfo.email,\n      "
        },
        {
          "type": "email",
          "line": 1650,
          "rule": "{\n              type: \"email\" as const,\n              value: guestInfo.email,\n              name: bo"
        },
        {
          "type": "email",
          "line": 1650,
          "rule": "type: \"email\" as const"
        },
        {
          "type": "email",
          "line": 1651,
          "rule": "\"email\" as const"
        },
        {
          "type": "email",
          "line": 1651,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1651,
          "rule": "value: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1651,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1652,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1654,
          "rule": "if (bookerNotificationMethod === \"sms\" || bookerNotificationMethod === \"both\") {\n            recipie"
        },
        {
          "type": "phone",
          "line": 1656,
          "rule": "{\n            recipients.push({\n              type: \"phone\" as const,\n              value: guestInfo"
        },
        {
          "type": "phone",
          "line": 1656,
          "rule": "recipients.push({\n              type: \"phone\" as const,\n              value: guestInfo.phone,\n      "
        },
        {
          "type": "phone",
          "line": 1656,
          "rule": "recipients.push({\n              type: \"phone\" as const,\n              value: guestInfo.phone,\n      "
        },
        {
          "type": "phone",
          "line": 1657,
          "rule": "{\n              type: \"phone\" as const,\n              value: guestInfo.phone,\n              language"
        },
        {
          "type": "phone",
          "line": 1657,
          "rule": "type: \"phone\" as const"
        },
        {
          "type": "phone",
          "line": 1657,
          "rule": "\"phone\" as const"
        },
        {
          "type": "phone",
          "line": 1657,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 1657,
          "rule": "value: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1658,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1658,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 1660,
          "rule": "if (isBookingForSomeoneElse && validatedPayload.recipientEmail && validatedPayload.recipientPhone) {"
        },
        {
          "type": "general",
          "line": 1662,
          "rule": "isBookingForSomeoneElse && validatedPayload.recipientEmail && validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1662,
          "rule": "isBookingForSomeoneElse && validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1662,
          "rule": "validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1662,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1663,
          "rule": "validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1663,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1663,
          "rule": "{\n            const recipientNotificationMethod = validatedPayload.guestInfo.recipientNotificationMe"
        },
        {
          "type": "email",
          "line": 1664,
          "rule": "const recipientNotificationMethod = validatedPayload.guestInfo.recipientNotificationMethod || \"email"
        },
        {
          "type": "email",
          "line": 1664,
          "rule": "const recipientNotificationMethod = validatedPayload.guestInfo.recipientNotificationMethod || \"email"
        },
        {
          "type": "email",
          "line": 1664,
          "rule": "recipientNotificationMethod = validatedPayload.guestInfo.recipientNotificationMethod || \"email\""
        },
        {
          "type": "email",
          "line": 1664,
          "rule": "validatedPayload.guestInfo.recipientNotificationMethod || \"email\""
        },
        {
          "type": "general",
          "line": 1664,
          "rule": "validatedPayload.guestInfo.recipientNotificationMethod"
        },
        {
          "type": "general",
          "line": 1664,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1664,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1666,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 1666,
          "rule": "const recipientNotificationLanguage = validatedPayload.guestInfo.recipientNotificationLanguage || \"h"
        },
        {
          "type": "general",
          "line": 1666,
          "rule": "const recipientNotificationLanguage = validatedPayload.guestInfo.recipientNotificationLanguage || \"h"
        },
        {
          "type": "general",
          "line": 1666,
          "rule": "recipientNotificationLanguage = validatedPayload.guestInfo.recipientNotificationLanguage || \"he\""
        },
        {
          "type": "general",
          "line": 1667,
          "rule": "validatedPayload.guestInfo.recipientNotificationLanguage || \"he\""
        },
        {
          "type": "general",
          "line": 1667,
          "rule": "validatedPayload.guestInfo.recipientNotificationLanguage"
        },
        {
          "type": "general",
          "line": 1667,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1667,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1668,
          "rule": "if (recipientNotificationMethod === \"email\" || recipientNotificationMethod === \"both\") {\n           "
        },
        {
          "type": "email",
          "line": 1669,
          "rule": "recipientNotificationMethod === \"email\" || recipientNotificationMethod === \"both\""
        },
        {
          "type": "email",
          "line": 1669,
          "rule": "recipientNotificationMethod === \"email\""
        },
        {
          "type": "email",
          "line": 1669,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1670,
          "rule": "{\n              recipients.push({\n                type: \"email\" as const,\n                value: val"
        },
        {
          "type": "email",
          "line": 1670,
          "rule": "recipients.push({\n                type: \"email\" as const,\n                value: validatedPayload.re"
        },
        {
          "type": "email",
          "line": 1670,
          "rule": "recipients.push({\n                type: \"email\" as const,\n                value: validatedPayload.re"
        },
        {
          "type": "email",
          "line": 1671,
          "rule": "{\n                type: \"email\" as const,\n                value: validatedPayload.recipientEmail,\n  "
        },
        {
          "type": "email",
          "line": 1671,
          "rule": "type: \"email\" as const"
        },
        {
          "type": "email",
          "line": 1671,
          "rule": "\"email\" as const"
        },
        {
          "type": "email",
          "line": 1671,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 1672,
          "rule": "value: validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1672,
          "rule": "validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1672,
          "rule": "validatedPayload"
        },
        {
          "type": "phone",
          "line": 1675,
          "rule": "if (recipientNotificationMethod === \"sms\" || recipientNotificationMethod === \"both\") {\n             "
        },
        {
          "type": "phone",
          "line": 1678,
          "rule": "{\n              recipients.push({\n                type: \"phone\" as const,\n                value: val"
        },
        {
          "type": "phone",
          "line": 1678,
          "rule": "recipients.push({\n                type: \"phone\" as const,\n                value: validatedPayload.re"
        },
        {
          "type": "phone",
          "line": 1678,
          "rule": "recipients.push({\n                type: \"phone\" as const,\n                value: validatedPayload.re"
        },
        {
          "type": "phone",
          "line": 1678,
          "rule": "{\n                type: \"phone\" as const,\n                value: validatedPayload.recipientPhone,\n  "
        },
        {
          "type": "phone",
          "line": 1678,
          "rule": "type: \"phone\" as const"
        },
        {
          "type": "phone",
          "line": 1679,
          "rule": "\"phone\" as const"
        },
        {
          "type": "phone",
          "line": 1679,
          "rule": "\"phone\""
        },
        {
          "type": "general",
          "line": 1679,
          "rule": "value: validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1680,
          "rule": "validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1680,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1685,
          "rule": "{\n              // Send separate notifications for booker and recipient\n              const bookerRe"
        },
        {
          "type": "email",
          "line": 1685,
          "rule": "const bookerRecipients = recipients.filter(r => \n                r.value === guestInfo.email || r.va"
        },
        {
          "type": "email",
          "line": 1685,
          "rule": "const bookerRecipients = recipients.filter(r => \n                r.value === guestInfo.email || r.va"
        },
        {
          "type": "email",
          "line": 1687,
          "rule": "bookerRecipients = recipients.filter(r => \n                r.value === guestInfo.email || r.value =="
        },
        {
          "type": "email",
          "line": 1687,
          "rule": "recipients.filter(r => \n                r.value === guestInfo.email || r.value === guestInfo.phone\n "
        },
        {
          "type": "email",
          "line": 1687,
          "rule": "r => \n                r.value === guestInfo.email || r.value === guestInfo.phone"
        },
        {
          "type": "email",
          "line": 1687,
          "rule": "r.value === guestInfo.email || r.value === guestInfo.phone"
        },
        {
          "type": "email",
          "line": 1687,
          "rule": "r.value === guestInfo.email"
        },
        {
          "type": "email",
          "line": 1688,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1688,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1688,
          "rule": "r.value === guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1689,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1689,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 1689,
          "rule": "const recipientRecipients = recipients.filter(r => \n                r.value === validatedPayload.rec"
        },
        {
          "type": "general",
          "line": 1689,
          "rule": "const recipientRecipients = recipients.filter(r => \n                r.value === validatedPayload.rec"
        },
        {
          "type": "general",
          "line": 1690,
          "rule": "recipientRecipients = recipients.filter(r => \n                r.value === validatedPayload.recipient"
        },
        {
          "type": "general",
          "line": 1690,
          "rule": "recipients.filter(r => \n                r.value === validatedPayload.recipientEmail || r.value === v"
        },
        {
          "type": "general",
          "line": 1690,
          "rule": "r => \n                r.value === validatedPayload.recipientEmail || r.value === validatedPayload.re"
        },
        {
          "type": "general",
          "line": 1691,
          "rule": "r.value === validatedPayload.recipientEmail || r.value === validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1691,
          "rule": "r.value === validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1691,
          "rule": "validatedPayload.recipientEmail"
        },
        {
          "type": "general",
          "line": 1691,
          "rule": "validatedPayload"
        },
        {
          "type": "general",
          "line": 1692,
          "rule": "r.value === validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1692,
          "rule": "validatedPayload.recipientPhone"
        },
        {
          "type": "general",
          "line": 1692,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1752,
          "rule": "logger.info(`Guest booking created successfully`, {\n        bookingId: finalBookingObject._id.toStri"
        },
        {
          "type": "email",
          "line": 1752,
          "rule": "logger.info(`Guest booking created successfully`, {\n        bookingId: finalBookingObject._id.toStri"
        },
        {
          "type": "email",
          "line": 1753,
          "rule": "{\n        bookingId: finalBookingObject._id.toString(),\n        bookingNumber: finalBookingObject.bo"
        },
        {
          "type": "email",
          "line": 1755,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1756,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1756,
          "rule": "email"
        },
        {
          "type": "general",
          "line": 1764,
          "rule": "logger.error(\"Error creating guest booking:\", {\n      error: error instanceof Error ? error.message "
        },
        {
          "type": "general",
          "line": 1764,
          "rule": "logger.error(\"Error creating guest booking:\", {\n      error: error instanceof Error ? error.message "
        },
        {
          "type": "general",
          "line": 1765,
          "rule": "{\n      error: error instanceof Error ? error.message : String(error),\n      guestInfo: validatedPay"
        },
        {
          "type": "general",
          "line": 1767,
          "rule": "guestInfo: validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1767,
          "rule": "validatedPayload.guestInfo"
        },
        {
          "type": "general",
          "line": 1767,
          "rule": "validatedPayload"
        },
        {
          "type": "email",
          "line": 1815,
          "rule": "export async function createGuestUser(guestInfo: {\n  firstName: string\n  lastName: string\n  email: s"
        },
        {
          "type": "email",
          "line": 1816,
          "rule": "guestInfo: {\n  firstName: string\n  lastName: string\n  email: string\n  phone: string\n  birthDate?: Da"
        },
        {
          "type": "email",
          "line": 1816,
          "rule": "{\n  firstName: string\n  lastName: string\n  email: string\n  phone: string\n  birthDate?: Date\n  gender"
        },
        {
          "type": "email",
          "line": 1817,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 1817,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1817,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 1817,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1821,
          "rule": "console.log(\"🔍 Guest info type check:\", {\n      firstName: typeof guestInfo.firstName,\n      lastNa"
        },
        {
          "type": "email",
          "line": 1821,
          "rule": "console.log(\"🔍 Guest info type check:\", {\n      firstName: typeof guestInfo.firstName,\n      lastNa"
        },
        {
          "type": "email",
          "line": 1822,
          "rule": "{\n      firstName: typeof guestInfo.firstName,\n      lastName: typeof guestInfo.lastName,\n      emai"
        },
        {
          "type": "email",
          "line": 1824,
          "rule": "email: typeof guestInfo.email"
        },
        {
          "type": "email",
          "line": 1824,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1824,
          "rule": "typeof guestInfo.email"
        },
        {
          "type": "email",
          "line": 1825,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1825,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1825,
          "rule": "phone: typeof guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1825,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1825,
          "rule": "typeof guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1825,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1826,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1827,
          "rule": "console.log(\"🔍 Guest info values:\", {\n      firstName: guestInfo.firstName,\n      lastName: guestIn"
        },
        {
          "type": "email",
          "line": 1827,
          "rule": "console.log(\"🔍 Guest info values:\", {\n      firstName: guestInfo.firstName,\n      lastName: guestIn"
        },
        {
          "type": "email",
          "line": 1828,
          "rule": "{\n      firstName: guestInfo.firstName,\n      lastName: guestInfo.lastName,\n      email: guestInfo.e"
        },
        {
          "type": "email",
          "line": 1830,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1830,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1830,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1830,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1830,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1830,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1831,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1831,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1833,
          "rule": "const existingUser = await User.findOne({\n      $or: [\n        { email: guestInfo.email },\n        {"
        },
        {
          "type": "email",
          "line": 1833,
          "rule": "const existingUser = await User.findOne({\n      $or: [\n        { email: guestInfo.email },\n        {"
        },
        {
          "type": "email",
          "line": 1834,
          "rule": "existingUser = await User.findOne({\n      $or: [\n        { email: guestInfo.email },\n        { phone"
        },
        {
          "type": "email",
          "line": 1835,
          "rule": "await User.findOne({\n      $or: [\n        { email: guestInfo.email },\n        { phone: guestInfo.pho"
        },
        {
          "type": "email",
          "line": 1835,
          "rule": "User.findOne({\n      $or: [\n        { email: guestInfo.email },\n        { phone: guestInfo.phone }\n "
        },
        {
          "type": "email",
          "line": 1835,
          "rule": "{\n      $or: [\n        { email: guestInfo.email },\n        { phone: guestInfo.phone }\n      ]\n    }"
        },
        {
          "type": "email",
          "line": 1835,
          "rule": "$or: [\n        { email: guestInfo.email },\n        { phone: guestInfo.phone }\n      ]"
        },
        {
          "type": "email",
          "line": 1835,
          "rule": "[\n        { email: guestInfo.email },\n        { phone: guestInfo.phone }\n      ]"
        },
        {
          "type": "email",
          "line": 1835,
          "rule": "{ email: guestInfo.email }"
        },
        {
          "type": "email",
          "line": 1836,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1836,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1836,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1836,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1836,
          "rule": "{ phone: guestInfo.phone }"
        },
        {
          "type": "phone",
          "line": 1836,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1836,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1836,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1837,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1856,
          "rule": "const guestUser = new User({\n      name: `${guestInfo.firstName} ${guestInfo.lastName}`,\n      email"
        },
        {
          "type": "email",
          "line": 1856,
          "rule": "const guestUser = new User({\n      name: `${guestInfo.firstName} ${guestInfo.lastName}`,\n      email"
        },
        {
          "type": "email",
          "line": 1857,
          "rule": "guestUser = new User({\n      name: `${guestInfo.firstName} ${guestInfo.lastName}`,\n      email: gues"
        },
        {
          "type": "email",
          "line": 1857,
          "rule": "new User({\n      name: `${guestInfo.firstName} ${guestInfo.lastName}`,\n      email: guestInfo.email,"
        },
        {
          "type": "email",
          "line": 1857,
          "rule": "{\n      name: `${guestInfo.firstName} ${guestInfo.lastName}`,\n      email: guestInfo.email,\n      ph"
        },
        {
          "type": "email",
          "line": 1858,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1858,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1858,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1859,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1859,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1859,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1859,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1859,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1864,
          "rule": "emailVerified: null"
        },
        {
          "type": "email",
          "line": 1864,
          "rule": "emailVerified"
        },
        {
          "type": "phone",
          "line": 1865,
          "rule": "phoneVerified: null"
        },
        {
          "type": "phone",
          "line": 1865,
          "rule": "phoneVerified"
        },
        {
          "type": "email",
          "line": 1868,
          "rule": "logger.info(\"Guest user created successfully\", {\n      userId: guestUser._id.toString(),\n      email"
        },
        {
          "type": "email",
          "line": 1868,
          "rule": "logger.info(\"Guest user created successfully\", {\n      userId: guestUser._id.toString(),\n      email"
        },
        {
          "type": "email",
          "line": 1869,
          "rule": "{\n      userId: guestUser._id.toString(),\n      email: guestInfo.email,\n    }"
        },
        {
          "type": "email",
          "line": 1869,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1869,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1870,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1870,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1874,
          "rule": "if (error instanceof Error) {\n      if (error.message.includes('duplicate key')) {\n        return { "
        },
        {
          "type": "email",
          "line": 1876,
          "rule": "{\n      if (error.message.includes('duplicate key')) {\n        return { success: false, error: \"User"
        },
        {
          "type": "email",
          "line": 1876,
          "rule": "if (error.message.includes('duplicate key')) {\n        return { success: false, error: \"User with th"
        },
        {
          "type": "email",
          "line": 1877,
          "rule": "{\n        return { success: false, error: \"User with this email or phone already exists\" }\n      }"
        },
        {
          "type": "email",
          "line": 1877,
          "rule": "return { success: false, error: \"User with this email or phone already exists\" }"
        },
        {
          "type": "email",
          "line": 1877,
          "rule": "{ success: false, error: \"User with this email or phone already exists\" }"
        },
        {
          "type": "email",
          "line": 1878,
          "rule": "error: \"User with this email or phone already exists\""
        },
        {
          "type": "email",
          "line": 1878,
          "rule": "\"User with this email or phone already exists\""
        },
        {
          "type": "email",
          "line": 1907,
          "rule": "{\n        existingAbandoned.bookedByUserName = `${formData.guestInfo.firstName} ${formData.guestInfo"
        },
        {
          "type": "email",
          "line": 1909,
          "rule": "existingAbandoned.bookedByUserEmail = formData.guestInfo.email || \"\""
        },
        {
          "type": "email",
          "line": 1909,
          "rule": "existingAbandoned.bookedByUserEmail = formData.guestInfo.email || \"\""
        },
        {
          "type": "email",
          "line": 1910,
          "rule": "formData.guestInfo.email || \"\""
        },
        {
          "type": "email",
          "line": 1910,
          "rule": "formData.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1911,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1911,
          "rule": "existingAbandoned.bookedByUserPhone = formData.guestInfo.phone || \"\""
        },
        {
          "type": "phone",
          "line": 1911,
          "rule": "existingAbandoned.bookedByUserPhone = formData.guestInfo.phone || \"\""
        },
        {
          "type": "phone",
          "line": 1912,
          "rule": "formData.guestInfo.phone || \"\""
        },
        {
          "type": "phone",
          "line": 1912,
          "rule": "formData.guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1912,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1939,
          "rule": "bookedByUserEmail: formData.guestInfo?.email || \"\""
        },
        {
          "type": "email",
          "line": 1940,
          "rule": "formData.guestInfo?.email || \"\""
        },
        {
          "type": "email",
          "line": 1940,
          "rule": "formData.guestInfo?.email"
        },
        {
          "type": "email",
          "line": 1940,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1940,
          "rule": "bookedByUserPhone: formData.guestInfo?.phone || \"\""
        },
        {
          "type": "phone",
          "line": 1941,
          "rule": "formData.guestInfo?.phone || \"\""
        },
        {
          "type": "phone",
          "line": 1941,
          "rule": "formData.guestInfo?.phone"
        },
        {
          "type": "phone",
          "line": 1941,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1947,
          "rule": "recipientEmail: formData.guestInfo?.isBookingForSomeoneElse \n        ? formData.guestInfo.recipientE"
        },
        {
          "type": "email",
          "line": 1948,
          "rule": "formData.guestInfo?.isBookingForSomeoneElse \n        ? formData.guestInfo.recipientEmail\n        : f"
        },
        {
          "type": "email",
          "line": 1950,
          "rule": "formData.guestInfo?.email"
        },
        {
          "type": "email",
          "line": 1950,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1950,
          "rule": "recipientPhone: formData.guestInfo?.isBookingForSomeoneElse \n        ? formData.guestInfo.recipientP"
        },
        {
          "type": "phone",
          "line": 1951,
          "rule": "formData.guestInfo?.isBookingForSomeoneElse \n        ? formData.guestInfo.recipientPhone\n        : f"
        },
        {
          "type": "phone",
          "line": 1953,
          "rule": "formData.guestInfo?.phone"
        },
        {
          "type": "phone",
          "line": 1953,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 2095,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 2095,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 2095,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 2098,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 2098,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 2098,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 2136,
          "rule": "let professionals = await ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n"
        },
        {
          "type": "email",
          "line": 2136,
          "rule": "let professionals = await ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n"
        },
        {
          "type": "email",
          "line": 2136,
          "rule": "professionals = await ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n    "
        },
        {
          "type": "email",
          "line": 2137,
          "rule": "await ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n        select: 'nam"
        },
        {
          "type": "email",
          "line": 2137,
          "rule": "ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n        select: 'name emai"
        },
        {
          "type": "email",
          "line": 2137,
          "rule": "ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n        select: 'name emai"
        },
        {
          "type": "email",
          "line": 2137,
          "rule": "ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n        select: 'name emai"
        },
        {
          "type": "email",
          "line": 2137,
          "rule": "ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n        select: 'name emai"
        },
        {
          "type": "email",
          "line": 2137,
          "rule": "ProfessionalProfile.find(query)\n      .populate({\n        path: 'userId',\n        select: 'name emai"
        },
        {
          "type": "email",
          "line": 2138,
          "rule": "{\n        path: 'userId',\n        select: 'name email phone gender',\n        model: User\n      }"
        },
        {
          "type": "email",
          "line": 2138,
          "rule": "select: 'name email phone gender'"
        },
        {
          "type": "email",
          "line": 2139,
          "rule": "'name email phone gender'"
        }
      ],
      "errorHandling": [
        {
          "line": 84,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 226,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 401,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 606,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 687,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 823,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 904,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1025,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 1041,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1098,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1125,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1156,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1274,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 1299,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1384,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1407,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1465,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 1625,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1774,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1820,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1890,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 2045,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 2064,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 2113,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\gift-voucher-actions.ts",
      "lines": 1664,
      "complexity": 295,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "!exists",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 33,
          "condition": "!voucherDocOrPlain",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "typeof (voucherDocOrPlain as IGiftVoucher).toObject === \"function\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 49,
          "condition": "purchaserUserIdStr",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 53,
          "condition": "voucher.guestInfo",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "ownerUserIdStr",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 58,
          "condition": "voucher.guestInfo",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "voucher.voucherType === \"treatment\" && treatmentIdStr",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 66,
          "condition": "selectedDurationIdStr && treatmentDoc?.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 146,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 149,
          "condition": "!data.code || typeof data.code !== \"string\" || data.code.trim() === \"\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 153,
          "condition": "!data.voucherType || (data.voucherType !== \"monetary\" && data.voucherType !== \"treatment\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 157,
          "condition": "!data.ownerUserId ||\r\n      typeof data.ownerUserId !== \"string\" ||\r\n      !mongoose.Types.ObjectId.isValid(data.ownerUserId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 162,
          "condition": "!data.validFrom || typeof data.validFrom !== \"string\" || isNaN(new Date(data.validFrom).getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 166,
          "condition": "!data.validUntil || typeof data.validUntil !== \"string\" || isNaN(new Date(data.validUntil).getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 170,
          "condition": "new Date(data.validFrom) >= new Date(data.validUntil)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 175,
          "condition": "amountInput === undefined ||\r\n      String(amountInput).trim() === \"\" ||\r\n      isNaN(Number(amountInput)) ||\r\n      Number(amountInput) <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 181,
          "condition": "data.voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 189,
          "condition": "!data.treatmentId || !mongoose.Types.ObjectId.isValid(data.treatmentId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 193,
          "condition": "data.selectedDurationId && !mongoose.Types.ObjectId.isValid(data.selectedDurationId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 198,
          "condition": "!owner",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 214,
          "condition": "data.voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 217,
          "condition": "data.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 233,
          "condition": "error instanceof mongoose.Error.ValidationError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 235,
          "condition": "(error as any).code === 11000 && (error as any).keyPattern?.code",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 248,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 250,
          "condition": "!mongoose.Types.ObjectId.isValid(id)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 255,
          "condition": "!existingVoucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 256,
          "condition": "data.validFrom && (typeof data.validFrom !== \"string\" || isNaN(new Date(data.validFrom).getTime()))",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 261,
          "condition": "data.validUntil && (typeof data.validUntil !== \"string\" || isNaN(new Date(data.validUntil).getTime()))",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 265,
          "condition": "data.ownerUserId && !mongoose.Types.ObjectId.isValid(data.ownerUserId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 268,
          "condition": "data.treatmentId && !mongoose.Types.ObjectId.isValid(data.treatmentId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 272,
          "condition": "data.selectedDurationId && !mongoose.Types.ObjectId.isValid(data.selectedDurationId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 279,
          "condition": "checkValidFrom >= checkValidUntil",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 284,
          "condition": "amountUpdateInput !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 286,
          "condition": "isNaN(newAmount) || newAmount <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 292,
          "condition": "existingVoucher.status !== \"partially_used\" || existingVoucher.amount !== newAmount",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 300,
          "condition": "newVoucherType === \"treatment\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 307,
          "condition": "!updateData.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 310,
          "condition": "data.amount === undefined &&\r\n        (existingVoucher.treatmentId?.toString() !== updateData.treatmentId?.toString() ||\r\n          existingVoucher.selectedDurationId?.toString() !== updateData.select",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 326,
          "condition": "treatmentDoc",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 327,
          "condition": "treatmentDoc.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 329,
          "condition": "treatmentDoc.pricingType === \"duration_based\" &&\r\n            updateData.selectedDurationId &&\r\n            treatmentDoc.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 336,
          "condition": "duration && typeof duration.price === \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 338,
          "condition": "price > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 341,
          "condition": "existingVoucher.status !== \"partially_used\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 352,
          "condition": "newVoucherType === \"monetary\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 352,
          "condition": "data.amount === undefined &&\r\n        data.monetaryValue === undefined &&\r\n        existingVoucher.voucherType !== \"monetary\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 360,
          "condition": "data.status",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 362,
          "condition": "updateData.amount !== undefined &&\r\n      updateData.amount > 0 &&\r\n      existingVoucher.status === \"pending_payment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 372,
          "condition": "!updatedVoucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 385,
          "condition": "error instanceof mongoose.Error.ValidationError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 387,
          "condition": "(error as any).code === 11000 && (error as any).keyPattern?.code",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 397,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 400,
          "condition": "!mongoose.Types.ObjectId.isValid(id)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 404,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 423,
          "condition": "search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 434,
          "condition": "userIds.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 438,
          "condition": "filters.voucherType",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 439,
          "condition": "filters.status",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 440,
          "condition": "filters.dateRange?.from && filters.dateRange?.to",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 444,
          "condition": "filters.dateRange?.from",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 446,
          "condition": "filters.dateRange?.to",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 458,
          "condition": "giftVouchersResults.some((result) => result.status === \"rejected\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 480,
          "condition": "t.pricingType === \"fixed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 536,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 549,
          "condition": "voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 552,
          "condition": "typeof inputMonetaryValue !== \"number\" || inputMonetaryValue < 150",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 568,
          "condition": "!treatmentId || !mongoose.Types.ObjectId.isValid(treatmentId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 580,
          "condition": "!treatmentDoc",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 593,
          "condition": "treatmentDoc.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 594,
          "condition": "typeof treatmentDoc.fixedPrice === \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 602,
          "condition": "treatmentDoc.pricingType === \"duration_based\" &&\r\n        treatmentDoc.durations &&\r\n        treatmentDoc.durations.length > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 605,
          "condition": "!selectedDurationId || !mongoose.Types.ObjectId.isValid(selectedDurationId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 617,
          "condition": "duration && typeof duration.price === \"number\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 631,
          "condition": "treatmentDoc.pricingType === \"duration_based\" &&\r\n        (!treatmentDoc.durations || treatmentDoc.durations.length === 0)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 637,
          "condition": "typeof treatmentDoc.fixedPrice === \"number\" && treatmentDoc.fixedPrice > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 648,
          "condition": "typeof priceFromTreatment === \"number\" && priceFromTreatment > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 663,
          "condition": "determinedPrice <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 686,
          "condition": "voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 688,
          "condition": "selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 715,
          "condition": "error instanceof mongoose.Error.ValidationError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 725,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 727,
          "condition": "!mongoose.Types.ObjectId.isValid(data.voucherId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 733,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 734,
          "condition": "voucher.purchaserUserId.toString() !== session.user.id && !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 744,
          "condition": "voucher.status !== \"pending_payment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 745,
          "condition": "voucher.status === \"active\" || voucher.status === \"sent\" || voucher.status === \"partially_used\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 756,
          "condition": "paymentSuccess",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 758,
          "condition": "!voucher.isGift",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 790,
          "condition": "purchaser",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 810,
          "condition": "methods.includes(\"email\") && purchaser.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 816,
          "condition": "methods.includes(\"sms\") && purchaser.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 835,
          "condition": "voucher.purchaserUserId.toString() !== voucher.ownerUserId.toString()",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 857,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 859,
          "condition": "!mongoose.Types.ObjectId.isValid(voucherId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 863,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 865,
          "condition": "voucher.purchaserUserId.toString() !== session.user.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 868,
          "condition": "![\"active\", \"pending_payment\"].includes(voucher.status)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 881,
          "condition": "!details.recipientName || details.recipientName.trim() === \"\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 884,
          "condition": "!details.recipientPhone || details.recipientPhone.trim() === \"\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 888,
          "condition": "details.sendDate && details.sendDate !== \"immediate\" && isNaN(new Date(details.sendDate).getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 903,
          "condition": "details.sendDate === \"immediate\" || !details.sendDate",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 910,
          "condition": "scheduledSendDate <= now",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 922,
          "condition": "sendNotificationToRecipientNow && voucher.recipientPhone && voucher.recipientName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 955,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 976,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1009,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1012,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1014,
          "condition": "voucher.ownerUserId.toString() !== session.user.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1036,
          "condition": "voucher.validFrom > currentDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1038,
          "condition": "voucher.validUntil < currentDate && voucher.status !== \"expired\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1043,
          "condition": "voucher.status === \"expired\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1045,
          "condition": "!voucher.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1050,
          "condition": "![\"active\", \"partially_used\", \"sent\"].includes(voucher.status)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1062,
          "condition": "voucher.voucherType === \"treatment\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1063,
          "condition": "voucher.status === \"fully_used\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1078,
          "condition": "voucher.voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1079,
          "condition": "(voucher.remainingAmount || 0) <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1086,
          "condition": "amountApplied <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1095,
          "condition": "voucher.remainingAmount <= 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1101,
          "condition": "!voucher.usageHistory",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1106,
          "condition": "voucher.status === \"fully_used\" || voucher.status === \"expired\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1148,
          "condition": "voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1150,
          "condition": "typeof inputMonetaryValue !== \"number\" || inputMonetaryValue < 150",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1164,
          "condition": "!treatmentId || !mongoose.Types.ObjectId.isValid(treatmentId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1175,
          "condition": "!treatmentDoc",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1181,
          "condition": "treatmentDoc.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1183,
          "condition": "treatmentDoc.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1184,
          "condition": "!selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1190,
          "condition": "!durationDoc || !durationDoc.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1195,
          "condition": "determinedPrice <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1215,
          "condition": "isGift",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1216,
          "condition": "data.recipientName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1217,
          "condition": "data.recipientPhone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1219,
          "condition": "data.greetingMessage",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1221,
          "condition": "data.sendDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1223,
          "condition": "voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1226,
          "condition": "selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1251,
          "condition": "error instanceof mongoose.Error.ValidationError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1262,
          "condition": "!mongoose.Types.ObjectId.isValid(data.voucherId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1268,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1270,
          "condition": "voucher.status !== \"pending_payment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1271,
          "condition": "voucher.status === \"active\" || voucher.status === \"sent\" || voucher.status === \"partially_used\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1280,
          "condition": "paymentSuccess",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1281,
          "condition": "!voucher.isGift",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1285,
          "condition": "!voucher.sendDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1286,
          "condition": "sendDate <= new Date()",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 1298,
          "condition": "guestInfo.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1304,
          "condition": "guestInfo.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1339,
          "condition": "existing",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1367,
          "condition": "!purchase",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 1376,
          "condition": "!voucherDoc",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "generateUniqueVoucherCode",
          "line": 17,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "toGiftVoucherPlain",
          "line": 31,
          "parameters": [
            {
              "name": "voucherDocOrPlain",
              "type": "IGiftVoucher | Record<string, any>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 68,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 73,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "h",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createGiftVoucherByAdmin",
          "line": 143,
          "parameters": [
            {
              "name": "data",
              "type": "AdminGiftVoucherFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateGiftVoucherByAdmin",
          "line": 240,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "data",
              "type": "Partial<AdminGiftVoucherFormData>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 334,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "deleteGiftVoucher",
          "line": 392,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getGiftVouchers",
          "line": 416,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "search",
              "type": "any"
            },
            {
              "name": "filters",
              "type": "{\r\n    voucherType?: \"treatment\" | \"monetary\"\r\n    status?: GiftVoucherPlain[\"status\"]\r\n    dateRange?: { from?: string; to?: string }\r\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 429,
          "parameters": [
            {
              "name": "u",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 454,
          "parameters": [
            {
              "name": "doc",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 456,
          "parameters": [
            {
              "name": "result",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 457,
          "parameters": [
            {
              "name": "result",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 459,
          "parameters": [
            {
              "name": "result",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getTreatmentsForSelection",
          "line": 473,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 479,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 486,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getUsersForAdminSelection",
          "line": 497,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 503,
          "parameters": [
            {
              "name": "u",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "initiatePurchaseGiftVoucher",
          "line": 524,
          "parameters": [
            {
              "name": "data",
              "type": "PurchaseInitiationData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 612,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 616,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 718,
          "parameters": [
            {
              "name": "err",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "confirmGiftVoucherPurchase",
          "line": 722,
          "parameters": [
            {
              "name": "data",
              "type": "PaymentResultData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "setGiftDetails",
          "line": 854,
          "parameters": [
            {
              "name": "voucherId",
              "type": "string"
            },
            {
              "name": "details",
              "type": "GiftDetailsPayload"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getMemberPurchasedVouchers",
          "line": 953,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 963,
          "parameters": [
            {
              "name": "doc",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 963,
          "parameters": [
            {
              "name": "err",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getMemberOwnedVouchers",
          "line": 974,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 990,
          "parameters": [
            {
              "name": "doc",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 991,
          "parameters": [
            {
              "name": "err",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "redeemGiftVoucher",
          "line": 1005,
          "parameters": [
            {
              "name": "code",
              "type": "string"
            },
            {
              "name": "orderDetails",
              "type": "OrderDetailsForRedemption"
            }
          ],
          "isAsync": true
        },
        {
          "name": "initiateGuestPurchaseGiftVoucher",
          "line": 1127,
          "parameters": [
            {
              "name": "data",
              "type": "PurchaseInitiationData & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n}"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 1189,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1254,
          "parameters": [
            {
              "name": "err",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "confirmGuestGiftVoucherPurchase",
          "line": 1258,
          "parameters": [
            {
              "name": "data",
              "type": "PaymentResultData & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n}"
            }
          ],
          "isAsync": true
        },
        {
          "name": "saveAbandonedGiftVoucherPurchase",
          "line": 1330,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "formData",
              "type": "{\r\n    guestInfo?: any\r\n    purchaseOptions?: any\r\n    currentStep: number\r\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getAbandonedGiftVoucherPurchase",
          "line": 1357,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getGiftVoucherByCode",
          "line": 1372,
          "parameters": [
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { revalidatePath } from \"next/cache\"\r\nimport { getServerSession } from \"next-"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 149,
          "rule": "if (!data.code || typeof data.code !== \"string\" || data.code.trim() === \"\") {\r\n      return { succes"
        },
        {
          "type": "required",
          "line": 152,
          "rule": "{\r\n      return { success: false, error: \"Code is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 152,
          "rule": "return { success: false, error: \"Code is required.\" }"
        },
        {
          "type": "required",
          "line": 152,
          "rule": "{ success: false, error: \"Code is required.\" }"
        },
        {
          "type": "required",
          "line": 153,
          "rule": "error: \"Code is required.\""
        },
        {
          "type": "required",
          "line": 153,
          "rule": "\"Code is required.\""
        },
        {
          "type": "required",
          "line": 153,
          "rule": "if (!data.voucherType || (data.voucherType !== \"monetary\" && data.voucherType !== \"treatment\")) {\r\n "
        },
        {
          "type": "required",
          "line": 155,
          "rule": "{\r\n      return { success: false, error: \"Valid voucher type is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 156,
          "rule": "return { success: false, error: \"Valid voucher type is required.\" }"
        },
        {
          "type": "required",
          "line": 156,
          "rule": "{ success: false, error: \"Valid voucher type is required.\" }"
        },
        {
          "type": "required",
          "line": 156,
          "rule": "error: \"Valid voucher type is required.\""
        },
        {
          "type": "required",
          "line": 156,
          "rule": "\"Valid voucher type is required.\""
        },
        {
          "type": "required",
          "line": 160,
          "rule": "{\r\n      return { success: false, error: \"Valid Owner User ID is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 160,
          "rule": "return { success: false, error: \"Valid Owner User ID is required.\" }"
        },
        {
          "type": "required",
          "line": 160,
          "rule": "{ success: false, error: \"Valid Owner User ID is required.\" }"
        },
        {
          "type": "required",
          "line": 161,
          "rule": "error: \"Valid Owner User ID is required.\""
        },
        {
          "type": "required",
          "line": 161,
          "rule": "\"Valid Owner User ID is required.\""
        },
        {
          "type": "required",
          "line": 162,
          "rule": "if (!data.validFrom || typeof data.validFrom !== \"string\" || isNaN(new Date(data.validFrom).getTime("
        },
        {
          "type": "required",
          "line": 164,
          "rule": "{\r\n      return { success: false, error: \"Valid 'valid from' date is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 164,
          "rule": "return { success: false, error: \"Valid 'valid from' date is required.\" }"
        },
        {
          "type": "required",
          "line": 164,
          "rule": "{ success: false, error: \"Valid 'valid from' date is required.\" }"
        },
        {
          "type": "required",
          "line": 165,
          "rule": "error: \"Valid 'valid from' date is required.\""
        },
        {
          "type": "required",
          "line": 165,
          "rule": "\"Valid 'valid from' date is required.\""
        },
        {
          "type": "required",
          "line": 166,
          "rule": "if (!data.validUntil || typeof data.validUntil !== \"string\" || isNaN(new Date(data.validUntil).getTi"
        },
        {
          "type": "required",
          "line": 168,
          "rule": "{\r\n      return { success: false, error: \"Valid 'valid until' date is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 168,
          "rule": "return { success: false, error: \"Valid 'valid until' date is required.\" }"
        },
        {
          "type": "required",
          "line": 168,
          "rule": "{ success: false, error: \"Valid 'valid until' date is required.\" }"
        },
        {
          "type": "required",
          "line": 169,
          "rule": "error: \"Valid 'valid until' date is required.\""
        },
        {
          "type": "required",
          "line": 169,
          "rule": "\"Valid 'valid until' date is required.\""
        },
        {
          "type": "required",
          "line": 178,
          "rule": "{\r\n      return { success: false, error: \"Valid positive amount is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 178,
          "rule": "return { success: false, error: \"Valid positive amount is required.\" }"
        },
        {
          "type": "required",
          "line": 179,
          "rule": "{ success: false, error: \"Valid positive amount is required.\" }"
        },
        {
          "type": "required",
          "line": 179,
          "rule": "error: \"Valid positive amount is required.\""
        },
        {
          "type": "required",
          "line": 179,
          "rule": "\"Valid positive amount is required.\""
        },
        {
          "type": "required",
          "line": 181,
          "rule": "if (data.voucherType === \"treatment\") {\r\n      if (!data.treatmentId || !mongoose.Types.ObjectId.isV"
        },
        {
          "type": "required",
          "line": 189,
          "rule": "{\r\n      if (!data.treatmentId || !mongoose.Types.ObjectId.isValid(data.treatmentId)) {\r\n        ret"
        },
        {
          "type": "required",
          "line": 189,
          "rule": "if (!data.treatmentId || !mongoose.Types.ObjectId.isValid(data.treatmentId)) {\r\n        return { suc"
        },
        {
          "type": "required",
          "line": 190,
          "rule": "{\r\n        return { success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 190,
          "rule": "return { success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 191,
          "rule": "{ success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 191,
          "rule": "error: \"Valid Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "required",
          "line": 191,
          "rule": "\"Valid Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "general",
          "line": 200,
          "rule": "{\r\n      code: data.code,\r\n      voucherType: data.voucherType,\r\n      amount: effectiveAmount,\r\n   "
        },
        {
          "type": "general",
          "line": 222,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 222,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 222,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 223,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 223,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 223,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 285,
          "rule": "{\r\n      const newAmount = Number(amountUpdateInput)\r\n      if (isNaN(newAmount) || newAmount <= 0) "
        },
        {
          "type": "required",
          "line": 286,
          "rule": "if (isNaN(newAmount) || newAmount <= 0) {\r\n        return { success: false, error: \"Valid positive a"
        },
        {
          "type": "required",
          "line": 287,
          "rule": "{\r\n        return { success: false, error: \"Valid positive amount is required.\" }\r\n      }"
        },
        {
          "type": "required",
          "line": 287,
          "rule": "return { success: false, error: \"Valid positive amount is required.\" }"
        },
        {
          "type": "required",
          "line": 288,
          "rule": "{ success: false, error: \"Valid positive amount is required.\" }"
        },
        {
          "type": "required",
          "line": 288,
          "rule": "error: \"Valid positive amount is required.\""
        },
        {
          "type": "required",
          "line": 288,
          "rule": "\"Valid positive amount is required.\""
        },
        {
          "type": "required",
          "line": 307,
          "rule": "if (!updateData.treatmentId) return { success: false, error: \"Treatment ID is required for treatment"
        },
        {
          "type": "required",
          "line": 308,
          "rule": "return { success: false, error: \"Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 308,
          "rule": "{ success: false, error: \"Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 309,
          "rule": "error: \"Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "required",
          "line": 309,
          "rule": "\"Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "required",
          "line": 355,
          "rule": "{\r\n        return { success: false, error: \"Amount is required when changing to monetary voucher typ"
        },
        {
          "type": "required",
          "line": 356,
          "rule": "return { success: false, error: \"Amount is required when changing to monetary voucher type.\" }"
        },
        {
          "type": "required",
          "line": 356,
          "rule": "{ success: false, error: \"Amount is required when changing to monetary voucher type.\" }"
        },
        {
          "type": "required",
          "line": 356,
          "rule": "error: \"Amount is required when changing to monetary voucher type.\""
        },
        {
          "type": "required",
          "line": 356,
          "rule": "\"Amount is required when changing to monetary voucher type.\""
        },
        {
          "type": "general",
          "line": 374,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 374,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 374,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 375,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 375,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 375,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 406,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 406,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 406,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 407,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 407,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 407,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 423,
          "rule": "if (search) {\r\n      const searchRegex = { $regex: search, $options: \"i\" }\r\n      const usersByNameO"
        },
        {
          "type": "email",
          "line": 423,
          "rule": "{\r\n      const searchRegex = { $regex: search, $options: \"i\" }\r\n      const usersByNameOrEmail = awa"
        },
        {
          "type": "email",
          "line": 424,
          "rule": "const usersByNameOrEmail = await User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRe"
        },
        {
          "type": "email",
          "line": 424,
          "rule": "const usersByNameOrEmail = await User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRe"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "usersByNameOrEmail = await User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }]"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "await User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      })\r\n        "
        },
        {
          "type": "email",
          "line": 425,
          "rule": "User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      })\r\n        .selec"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      })\r\n        .selec"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      })\r\n        .selec"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      })\r\n        .selec"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "User.find({\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      })"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "{\r\n        $or: [{ name: searchRegex }, { email: searchRegex }],\r\n      }"
        },
        {
          "type": "email",
          "line": 425,
          "rule": "$or: [{ name: searchRegex }, { email: searchRegex }]"
        },
        {
          "type": "email",
          "line": 426,
          "rule": "[{ name: searchRegex }, { email: searchRegex }]"
        },
        {
          "type": "email",
          "line": 426,
          "rule": "{ email: searchRegex }"
        },
        {
          "type": "email",
          "line": 426,
          "rule": "email: searchRegex"
        },
        {
          "type": "email",
          "line": 426,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 429,
          "rule": "query.$or = [\r\n        { code: searchRegex }, \r\n        { recipientName: searchRegex },\r\n        // "
        },
        {
          "type": "email",
          "line": 429,
          "rule": "query.$or = [\r\n        { code: searchRegex }, \r\n        { recipientName: searchRegex },\r\n        // "
        },
        {
          "type": "email",
          "line": 429,
          "rule": "[\r\n        { code: searchRegex }, \r\n        { recipientName: searchRegex },\r\n        // Add search f"
        },
        {
          "type": "email",
          "line": 432,
          "rule": "{ 'guestInfo.email': searchRegex }"
        },
        {
          "type": "email",
          "line": 433,
          "rule": "'guestInfo.email': searchRegex"
        },
        {
          "type": "email",
          "line": 433,
          "rule": "'guestInfo.email'"
        },
        {
          "type": "phone",
          "line": 433,
          "rule": "{ 'guestInfo.phone': searchRegex }"
        },
        {
          "type": "phone",
          "line": 433,
          "rule": "'guestInfo.phone': searchRegex"
        },
        {
          "type": "phone",
          "line": 433,
          "rule": "'guestInfo.phone'"
        },
        {
          "type": "email",
          "line": 498,
          "rule": "{\r\n  try {\r\n    await dbConnect()\r\n    const users = await User.find({ roles: { $in: [\"member\", \"adm"
        },
        {
          "type": "email",
          "line": 498,
          "rule": "try {\r\n    await dbConnect()\r\n    const users = await User.find({ roles: { $in: [\"member\", \"admin\", "
        },
        {
          "type": "email",
          "line": 498,
          "rule": "{\r\n    await dbConnect()\r\n    const users = await User.find({ roles: { $in: [\"member\", \"admin\", \"par"
        },
        {
          "type": "email",
          "line": 498,
          "rule": "const users = await User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n "
        },
        {
          "type": "email",
          "line": 498,
          "rule": "const users = await User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n "
        },
        {
          "type": "email",
          "line": 499,
          "rule": "users = await User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n      ."
        },
        {
          "type": "email",
          "line": 499,
          "rule": "await User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n      .select(\""
        },
        {
          "type": "email",
          "line": 499,
          "rule": "User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n      .select(\"_id na"
        },
        {
          "type": "email",
          "line": 499,
          "rule": "User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n      .select(\"_id na"
        },
        {
          "type": "email",
          "line": 499,
          "rule": "User.find({ roles: { $in: [\"member\", \"admin\", \"partner\", \"professional\"] } })\r\n      .select(\"_id na"
        },
        {
          "type": "email",
          "line": 501,
          "rule": "\"_id name email roles\""
        },
        {
          "type": "email",
          "line": 501,
          "rule": "return {\r\n      success: true,\r\n      users: users.map((u) => ({\r\n        _id: u._id.toString(),\r\n  "
        },
        {
          "type": "email",
          "line": 502,
          "rule": "{\r\n      success: true,\r\n      users: users.map((u) => ({\r\n        _id: u._id.toString(),\r\n        n"
        },
        {
          "type": "email",
          "line": 502,
          "rule": "users: users.map((u) => ({\r\n        _id: u._id.toString(),\r\n        name: u.name || u.email,\r\n      "
        },
        {
          "type": "email",
          "line": 502,
          "rule": "users.map((u) => ({\r\n        _id: u._id.toString(),\r\n        name: u.name || u.email,\r\n        email"
        },
        {
          "type": "email",
          "line": 503,
          "rule": "(u) => ({\r\n        _id: u._id.toString(),\r\n        name: u.name || u.email,\r\n        email: u.email,"
        },
        {
          "type": "email",
          "line": 503,
          "rule": "({\r\n        _id: u._id.toString(),\r\n        name: u.name || u.email,\r\n        email: u.email,\r\n     "
        },
        {
          "type": "email",
          "line": 503,
          "rule": "{\r\n        _id: u._id.toString(),\r\n        name: u.name || u.email,\r\n        email: u.email,\r\n      "
        },
        {
          "type": "email",
          "line": 504,
          "rule": "name: u.name || u.email"
        },
        {
          "type": "email",
          "line": 504,
          "rule": "u.name || u.email"
        },
        {
          "type": "email",
          "line": 504,
          "rule": "u.email"
        },
        {
          "type": "email",
          "line": 504,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 504,
          "rule": "email: u.email"
        },
        {
          "type": "email",
          "line": 504,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 505,
          "rule": "u.email"
        },
        {
          "type": "email",
          "line": 505,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 570,
          "rule": "{\r\n        logger.warn(`[${requestId}] Invalid treatment ID for treatment voucher`, { treatmentId })"
        },
        {
          "type": "required",
          "line": 572,
          "rule": "return { success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 572,
          "rule": "{ success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 573,
          "rule": "error: \"Valid Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "required",
          "line": 573,
          "rule": "\"Valid Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "general",
          "line": 686,
          "rule": "if (voucherType === \"treatment\") {\r\n      giftVoucherData.treatmentId = new mongoose.Types.ObjectId("
        },
        {
          "type": "general",
          "line": 687,
          "rule": "{\r\n      giftVoucherData.treatmentId = new mongoose.Types.ObjectId(treatmentId!) // treatmentId is v"
        },
        {
          "type": "general",
          "line": 688,
          "rule": "if (selectedDurationId) {\r\n        // selectedDurationId is validated above if provided\r\n        gif"
        },
        {
          "type": "general",
          "line": 690,
          "rule": "{\r\n        // selectedDurationId is validated above if provided\r\n        giftVoucherData.selectedDur"
        },
        {
          "type": "email",
          "line": 785,
          "rule": "try {\r\n        const purchaser = await User.findById(voucher.purchaserUserId)\r\n          .select(\"na"
        },
        {
          "type": "email",
          "line": 786,
          "rule": "{\r\n        const purchaser = await User.findById(voucher.purchaserUserId)\r\n          .select(\"name e"
        },
        {
          "type": "email",
          "line": 786,
          "rule": "const purchaser = await User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone "
        },
        {
          "type": "email",
          "line": 786,
          "rule": "const purchaser = await User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone "
        },
        {
          "type": "email",
          "line": 787,
          "rule": "purchaser = await User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone notifi"
        },
        {
          "type": "email",
          "line": 787,
          "rule": "await User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone notificationPrefer"
        },
        {
          "type": "email",
          "line": 787,
          "rule": "User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 787,
          "rule": "User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 787,
          "rule": "User.findById(voucher.purchaserUserId)\r\n          .select(\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 788,
          "rule": "\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 790,
          "rule": "if (purchaser) {\r\n          const lang = purchaser.notificationPreferences?.language || \"he\"\r\n      "
        },
        {
          "type": "email",
          "line": 790,
          "rule": "{\r\n          const lang = purchaser.notificationPreferences?.language || \"he\"\r\n          const metho"
        },
        {
          "type": "email",
          "line": 792,
          "rule": "const methods = purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 792,
          "rule": "const methods = purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 792,
          "rule": "methods = purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 792,
          "rule": "purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 793,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 793,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 810,
          "rule": "if (methods.includes(\"email\") && purchaser.email) {\r\n            await notificationManager.sendNotif"
        },
        {
          "type": "email",
          "line": 810,
          "rule": "methods.includes(\"email\") && purchaser.email"
        },
        {
          "type": "email",
          "line": 810,
          "rule": "methods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 811,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 811,
          "rule": "purchaser.email"
        },
        {
          "type": "email",
          "line": 811,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 811,
          "rule": "{\r\n            await notificationManager.sendNotification(\r\n              { type: \"email\", value: pu"
        },
        {
          "type": "email",
          "line": 811,
          "rule": "await notificationManager.sendNotification(\r\n              { type: \"email\", value: purchaser.email, "
        },
        {
          "type": "email",
          "line": 811,
          "rule": "await notificationManager.sendNotification(\r\n              { type: \"email\", value: purchaser.email, "
        },
        {
          "type": "email",
          "line": 812,
          "rule": "notificationManager.sendNotification(\r\n              { type: \"email\", value: purchaser.email, name: "
        },
        {
          "type": "email",
          "line": 813,
          "rule": "{ type: \"email\", value: purchaser.email, name: purchaser.name, language: lang as any }"
        },
        {
          "type": "email",
          "line": 813,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 813,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 813,
          "rule": "value: purchaser.email"
        },
        {
          "type": "email",
          "line": 813,
          "rule": "purchaser.email"
        },
        {
          "type": "email",
          "line": 814,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 816,
          "rule": "if (methods.includes(\"sms\") && purchaser.phone) {\r\n            await notificationManager.sendNotific"
        },
        {
          "type": "phone",
          "line": 816,
          "rule": "methods.includes(\"sms\") && purchaser.phone"
        },
        {
          "type": "phone",
          "line": 817,
          "rule": "purchaser.phone"
        },
        {
          "type": "phone",
          "line": 817,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 817,
          "rule": "{\r\n            await notificationManager.sendNotification(\r\n              { type: \"phone\", value: pu"
        },
        {
          "type": "phone",
          "line": 817,
          "rule": "await notificationManager.sendNotification(\r\n              { type: \"phone\", value: purchaser.phone, "
        },
        {
          "type": "phone",
          "line": 817,
          "rule": "await notificationManager.sendNotification(\r\n              { type: \"phone\", value: purchaser.phone, "
        },
        {
          "type": "phone",
          "line": 818,
          "rule": "notificationManager.sendNotification(\r\n              { type: \"phone\", value: purchaser.phone, langua"
        },
        {
          "type": "phone",
          "line": 818,
          "rule": "{ type: \"phone\", value: purchaser.phone, language: lang as any }"
        },
        {
          "type": "phone",
          "line": 819,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 819,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 819,
          "rule": "value: purchaser.phone"
        },
        {
          "type": "phone",
          "line": 819,
          "rule": "purchaser.phone"
        },
        {
          "type": "phone",
          "line": 819,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 833,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 833,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 833,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 835,
          "rule": "if (voucher.purchaserUserId.toString() !== voucher.ownerUserId.toString()) {\r\n        revalidatePath"
        },
        {
          "type": "general",
          "line": 837,
          "rule": "{\r\n        revalidatePath(`/dashboard/user/${voucher.ownerUserId.toString()}/gift-vouchers`) // This"
        },
        {
          "type": "general",
          "line": 837,
          "rule": "revalidatePath(`/dashboard/user/${voucher.ownerUserId.toString()}/gift-vouchers`)"
        },
        {
          "type": "general",
          "line": 837,
          "rule": "revalidatePath(`/dashboard/user/${voucher.ownerUserId.toString()}/gift-vouchers`)"
        },
        {
          "type": "general",
          "line": 837,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 881,
          "rule": "if (!details.recipientName || details.recipientName.trim() === \"\") {\r\n      return { success: false,"
        },
        {
          "type": "required",
          "line": 882,
          "rule": "{\r\n      return { success: false, error: \"Recipient name is required.\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 882,
          "rule": "return { success: false, error: \"Recipient name is required.\" }"
        },
        {
          "type": "required",
          "line": 882,
          "rule": "{ success: false, error: \"Recipient name is required.\" }"
        },
        {
          "type": "required",
          "line": 883,
          "rule": "error: \"Recipient name is required.\""
        },
        {
          "type": "required",
          "line": 883,
          "rule": "\"Recipient name is required.\""
        },
        {
          "type": "phone",
          "line": 884,
          "rule": "if (!details.recipientPhone || details.recipientPhone.trim() === \"\") {\r\n      return { success: fals"
        },
        {
          "type": "phone",
          "line": 887,
          "rule": "{\r\n      return { success: false, error: \"Recipient phone is required.\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 887,
          "rule": "return { success: false, error: \"Recipient phone is required.\" }"
        },
        {
          "type": "phone",
          "line": 887,
          "rule": "{ success: false, error: \"Recipient phone is required.\" }"
        },
        {
          "type": "phone",
          "line": 887,
          "rule": "error: \"Recipient phone is required.\""
        },
        {
          "type": "phone",
          "line": 888,
          "rule": "\"Recipient phone is required.\""
        },
        {
          "type": "general",
          "line": 941,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 941,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 941,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1112,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 1112,
          "rule": "revalidatePath(\"/dashboard/member/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 1112,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1113,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 1113,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 1113,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 1127,
          "rule": "export async function initiateGuestPurchaseGiftVoucher(data: PurchaseInitiationData & {\r\n  guestInfo"
        },
        {
          "type": "email",
          "line": 1128,
          "rule": "data: PurchaseInitiationData & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: st"
        },
        {
          "type": "email",
          "line": 1128,
          "rule": "PurchaseInitiationData & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n"
        },
        {
          "type": "email",
          "line": 1129,
          "rule": "{\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n}"
        },
        {
          "type": "email",
          "line": 1129,
          "rule": "guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 1129,
          "rule": "{\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 1129,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 1129,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1130,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 1130,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1139,
          "rule": "guestEmail: data.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1139,
          "rule": "data.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1140,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1142,
          "rule": "logger.info(`[${requestId}] Database connected`, { \r\n      dbConnectTime: `${dbConnectTime}ms`,\r\n   "
        },
        {
          "type": "email",
          "line": 1142,
          "rule": "logger.info(`[${requestId}] Database connected`, { \r\n      dbConnectTime: `${dbConnectTime}ms`,\r\n   "
        },
        {
          "type": "email",
          "line": 1143,
          "rule": "{ \r\n      dbConnectTime: `${dbConnectTime}ms`,\r\n      guestEmail: data.guestInfo.email\r\n    }"
        },
        {
          "type": "email",
          "line": 1144,
          "rule": "guestEmail: data.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1145,
          "rule": "data.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1145,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 1166,
          "rule": "{\r\n        logger.warn(`[${requestId}] Invalid treatment ID for treatment voucher`, { treatmentId })"
        },
        {
          "type": "required",
          "line": 1168,
          "rule": "return { success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 1168,
          "rule": "{ success: false, error: \"Valid Treatment ID is required for treatment voucher.\" }"
        },
        {
          "type": "required",
          "line": 1169,
          "rule": "error: \"Valid Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "required",
          "line": 1169,
          "rule": "\"Valid Treatment ID is required for treatment voucher.\""
        },
        {
          "type": "email",
          "line": 1211,
          "rule": "guestInfo: {\r\n        name: guestInfo.name,\r\n        email: guestInfo.email,\r\n        phone: guestIn"
        },
        {
          "type": "email",
          "line": 1213,
          "rule": "{\r\n        name: guestInfo.name,\r\n        email: guestInfo.email,\r\n        phone: guestInfo.phone,\r\n"
        },
        {
          "type": "email",
          "line": 1214,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1214,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1214,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1214,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1214,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1214,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1214,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1215,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1239,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1239,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1239,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1250,
          "rule": "guestEmail: data.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1251,
          "rule": "data.guestInfo.email"
        },
        {
          "type": "email",
          "line": 1251,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1258,
          "rule": "export async function confirmGuestGiftVoucherPurchase(data: PaymentResultData & {\r\n  guestInfo: {\r\n "
        },
        {
          "type": "email",
          "line": 1259,
          "rule": "data: PaymentResultData & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r"
        },
        {
          "type": "email",
          "line": 1260,
          "rule": "PaymentResultData & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n"
        },
        {
          "type": "email",
          "line": 1260,
          "rule": "{\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n}"
        },
        {
          "type": "email",
          "line": 1260,
          "rule": "guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 1260,
          "rule": "{\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 1261,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 1261,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1261,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 1261,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1298,
          "rule": "if (guestInfo.email) {\r\n          await notificationManager.sendNotification(\r\n            { type: \""
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "{\r\n          await notificationManager.sendNotification(\r\n            { type: \"email\", value: guestI"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"email\", value: guestInfo.email, na"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"email\", value: guestInfo.email, na"
        },
        {
          "type": "email",
          "line": 1299,
          "rule": "notificationManager.sendNotification(\r\n            { type: \"email\", value: guestInfo.email, name: gu"
        },
        {
          "type": "email",
          "line": 1300,
          "rule": "{ type: \"email\", value: guestInfo.email, name: guestInfo.name, language: lang as any }"
        },
        {
          "type": "email",
          "line": 1300,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 1301,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 1301,
          "rule": "value: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1301,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1301,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 1304,
          "rule": "if (guestInfo.phone) {\r\n          await notificationManager.sendNotification(\r\n            { type: \""
        },
        {
          "type": "phone",
          "line": 1304,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1304,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 1304,
          "rule": "{\r\n          await notificationManager.sendNotification(\r\n            { type: \"phone\", value: guestI"
        },
        {
          "type": "phone",
          "line": 1304,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"phone\", value: guestInfo.phone, la"
        },
        {
          "type": "phone",
          "line": 1304,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"phone\", value: guestInfo.phone, la"
        },
        {
          "type": "phone",
          "line": 1305,
          "rule": "notificationManager.sendNotification(\r\n            { type: \"phone\", value: guestInfo.phone, language"
        },
        {
          "type": "phone",
          "line": 1306,
          "rule": "{ type: \"phone\", value: guestInfo.phone, language: lang as any }"
        },
        {
          "type": "phone",
          "line": 1306,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 1306,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 1306,
          "rule": "value: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1306,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 1307,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 1309,
          "rule": "catch (notificationError) {\r\n        logger.error(\"Failed to send purchase success notification for "
        },
        {
          "type": "email",
          "line": 1310,
          "rule": "{\r\n        logger.error(\"Failed to send purchase success notification for guest gift voucher:\", {\r\n "
        },
        {
          "type": "email",
          "line": 1310,
          "rule": "logger.error(\"Failed to send purchase success notification for guest gift voucher:\", {\r\n          gu"
        },
        {
          "type": "email",
          "line": 1310,
          "rule": "logger.error(\"Failed to send purchase success notification for guest gift voucher:\", {\r\n          gu"
        },
        {
          "type": "email",
          "line": 1311,
          "rule": "{\r\n          guestEmail: guestInfo.email,\r\n          voucherId: voucher._id.toString(),\r\n          e"
        },
        {
          "type": "email",
          "line": 1311,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 1312,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 1312,
          "rule": "email"
        },
        {
          "type": "general",
          "line": 1316,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 1316,
          "rule": "revalidatePath(\"/dashboard/admin/gift-vouchers\")"
        },
        {
          "type": "general",
          "line": 1316,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 42,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 144,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 243,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 396,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 421,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 474,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 498,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 529,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 724,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 785,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 856,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 924,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 954,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 975,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1007,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1133,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1262,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1291,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1335,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1360,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 1373,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\notifications\\templates\\email-templates.ts",
      "lines": 553,
      "complexity": 199,
      "conditionals": [
        {
          "type": "switch",
          "line": 123,
          "cases": 8,
          "expression": "data.type"
        },
        {
          "type": "if",
          "line": 145,
          "condition": "isForSomeoneElse",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 218,
          "condition": "data.isBookerForSomeoneElse && data.actualRecipientName",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "getEmailTemplate",
          "line": 12,
          "parameters": [
            {
              "name": "data",
              "type": "EmailNotificationData"
            },
            {
              "name": "language",
              "type": "any"
            },
            {
              "name": "userName",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "wrapHtml",
          "line": 24,
          "parameters": [
            {
              "name": "content",
              "type": "string"
            },
            {
              "name": "emailSubject",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 5,
          "rule": "email?: string"
        },
        {
          "type": "email",
          "line": 5,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "{\r\n  let subject = \"\"\r\n  let text = \"\"\r\n  let html = \"\"\r\n  const appName = process.env.NEXT_PUBLIC_A"
        },
        {
          "type": "email",
          "line": 16,
          "rule": "const emailFrom = process.env.EMAIL_FROM || \"Masu\""
        },
        {
          "type": "email",
          "line": 16,
          "rule": "const emailFrom = process.env.EMAIL_FROM || \"Masu\""
        },
        {
          "type": "email",
          "line": 16,
          "rule": "emailFrom = process.env.EMAIL_FROM || \"Masu\""
        },
        {
          "type": "email",
          "line": 16,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "const emailTextSignature = `\r\n\r\n────────────────────\r\nלכל שאלה או בעיה ניתן לפנות אלינו בהודעת Whats"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "const emailTextSignature = `\r\n\r\n────────────────────\r\nלכל שאלה או בעיה ניתן לפנות אלינו בהודעת Whats"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "emailTextSignature = `\r\n\r\n────────────────────\r\nלכל שאלה או בעיה ניתן לפנות אלינו בהודעת WhatsApp או"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "const wrapHtml = (content: string, emailSubject: string): string => `\r\n<!DOCTYPE html>\r\n<html lang=\""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "const wrapHtml = (content: string, emailSubject: string): string => `\r\n<!DOCTYPE html>\r\n<html lang=\""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "wrapHtml = (content: string, emailSubject: string): string => `\r\n<!DOCTYPE html>\r\n<html lang=\"${lang"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "(content: string, emailSubject: string): string => `\r\n<!DOCTYPE html>\r\n<html lang=\"${language}\" dir="
        },
        {
          "type": "email",
          "line": 25,
          "rule": "emailSubject: string"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "emailSubject"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "emailSubject}</title>\r\n<style>\r\n/* Reset styles */\r\n* { margin: 0; padding: 0; box-sizing: border-bo"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "emailSubject"
        },
        {
          "type": "email",
          "line": 35,
          "rule": "language === \"he\" ? \"rtl\" : \"ltr\"}; \r\n  line-height: 1.6;\r\n}\r\n\r\n/* Container */\r\n.email-container { "
        },
        {
          "type": "email",
          "line": 35,
          "rule": "}; \r\n  line-height: 1.6;\r\n}\r\n\r\n/* Container */\r\n.email-container { \r\n  max-width: 600px; \r\n  margin:"
        },
        {
          "type": "email",
          "line": 159,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 159,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 166,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 166,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 172,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 172,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 213,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 213,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 214,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 214,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 214,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 214,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 230,
          "rule": "`שלום ${recipientName},\\n\\nההזמנה שביצעתה עבור ${data.actualRecipientName} בוצעה ונשלחה לו על כך הוד"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "`Hello ${recipientName},\\n\\nThe booking you made for ${data.actualRecipientName} has been completed "
        },
        {
          "type": "email",
          "line": 241,
          "rule": "data.actualRecipientName} has been completed and a notification has been sent to them via SMS and em"
        },
        {
          "type": "email",
          "line": 242,
          "rule": "} has been completed and a notification has been sent to them via SMS and email.\\n\\nYou can view the"
        },
        {
          "type": "email",
          "line": 244,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 244,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 257,
          "rule": "`The booking you made for ${data.actualRecipientName} has been completed and a notification has been"
        },
        {
          "type": "email",
          "line": 257,
          "rule": "data.actualRecipientName} has been completed and a notification has been sent to them via SMS and em"
        },
        {
          "type": "email",
          "line": 258,
          "rule": "} has been completed and a notification has been sent to them via SMS and email.`"
        },
        {
          "type": "email",
          "line": 265,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 265,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 266,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 266,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 266,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 266,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 282,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 282,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 289,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 289,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 295,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 295,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 335,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 335,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 335,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 335,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 335,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 336,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 336,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 336,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 336,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 336,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 337,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 337,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 345,
          "rule": "const otpTextContent =\r\n        language === \"he\"\r\n          ? `שלום,\\n\\nקוד האימות שלך הוא: ${data."
        },
        {
          "type": "email",
          "line": 345,
          "rule": "const otpTextContent =\r\n        language === \"he\"\r\n          ? `שלום,\\n\\nקוד האימות שלך הוא: ${data."
        },
        {
          "type": "email",
          "line": 345,
          "rule": "otpTextContent =\r\n        language === \"he\"\r\n          ? `שלום,\\n\\nקוד האימות שלך הוא: ${data.code}\\"
        },
        {
          "type": "email",
          "line": 345,
          "rule": "language === \"he\"\r\n          ? `שלום,\\n\\nקוד האימות שלך הוא: ${data.code}\\nהקוד תקף ל-${data.expires"
        },
        {
          "type": "email",
          "line": 346,
          "rule": "`שלום,\\n\\nקוד האימות שלך הוא: ${data.code}\\nהקוד תקף ל-${data.expiresIn || 10} דקות.${emailTextSigna"
        },
        {
          "type": "email",
          "line": 348,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 348,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 349,
          "rule": "language === \"ru\"\r\n            ? `Здравствуйте,\\n\\nВаш код подтверждения: ${data.code}\\nКод действит"
        },
        {
          "type": "email",
          "line": 349,
          "rule": "`Здравствуйте,\\n\\nВаш код подтверждения: ${data.code}\\nКод действителен в течение ${data.expiresIn |"
        },
        {
          "type": "email",
          "line": 352,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 352,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 352,
          "rule": "`Hello,\\n\\nYour verification code is: ${data.code}\\nThis code is valid for ${data.expiresIn || 10} m"
        },
        {
          "type": "email",
          "line": 355,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 355,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 369,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 369,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 370,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 370,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 370,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 370,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 371,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 371,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 371,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 371,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 371,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 371,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 378,
          "rule": "const welcomeTextContent =\r\n        language === \"he\"\r\n          ? `שלום ${data.userName || userName"
        },
        {
          "type": "email",
          "line": 378,
          "rule": "const welcomeTextContent =\r\n        language === \"he\"\r\n          ? `שלום ${data.userName || userName"
        },
        {
          "type": "email",
          "line": 378,
          "rule": "welcomeTextContent =\r\n        language === \"he\"\r\n          ? `שלום ${data.userName || userName},\\n\\n"
        },
        {
          "type": "email",
          "line": 379,
          "rule": "language === \"he\"\r\n          ? `שלום ${data.userName || userName},\\n\\nברוך הבא ל-${appName}!${emailT"
        },
        {
          "type": "email",
          "line": 379,
          "rule": "`שלום ${data.userName || userName},\\n\\nברוך הבא ל-${appName}!${emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 381,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 381,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 381,
          "rule": "language === \"ru\"\r\n            ? `Здравствуйте, ${data.userName || userName},\\n\\nДобро пожаловать в "
        },
        {
          "type": "email",
          "line": 382,
          "rule": "`Здравствуйте, ${data.userName || userName},\\n\\nДобро пожаловать в ${appName}!${emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 384,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 384,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 384,
          "rule": "`Hello ${data.userName || userName},\\n\\nWelcome to ${appName}!${emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 386,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 386,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 398,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 398,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 398,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 398,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 398,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 398,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 409,
          "rule": "language === \"he\"\r\n          ? `שלום ${data.userName || userName},\\n\\nאנא לחץ על הקישור הבא לאיפוס ס"
        },
        {
          "type": "email",
          "line": 409,
          "rule": "`שלום ${data.userName || userName},\\n\\nאנא לחץ על הקישור הבא לאיפוס סיסמתך: ${data.resetLink}\\n\\nאם "
        },
        {
          "type": "email",
          "line": 412,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 412,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 417,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 417,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 418,
          "rule": "`Hello ${data.userName || userName},\\n\\nPlease click the following link to reset your password: ${da"
        },
        {
          "type": "email",
          "line": 420,
          "rule": "data.resetLink}\\n\\nIf you did not request this, please ignore this email.${"
        },
        {
          "type": "email",
          "line": 420,
          "rule": "}\\n\\nIf you did not request this, please ignore this email.${"
        },
        {
          "type": "email",
          "line": 422,
          "rule": "emailTextSignature}`"
        },
        {
          "type": "email",
          "line": 422,
          "rule": "emailTextSignature"
        },
        {
          "type": "email",
          "line": 438,
          "rule": "language === \"ru\" ? \"Если вы не запрашивали это, пожалуйста, проигнорируйте это письмо.\" : \"If you d"
        },
        {
          "type": "email",
          "line": 440,
          "rule": "\"If you did not request this, please ignore this email.\""
        },
        {
          "type": "email",
          "line": 443,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 445,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 445,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 458,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 458,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 466,
          "rule": "emailFrom} Team</p>\r\n`"
        },
        {
          "type": "email",
          "line": 466,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 476,
          "rule": "language === \"he\"\r\n          ? `שלום ${data.userName || userName},\\n\\nמנהל המערכת ביקש לאפס את סיסמת"
        },
        {
          "type": "email",
          "line": 476,
          "rule": "`שלום ${data.userName || userName},\\n\\nמנהל המערכת ביקש לאפס את סיסמתך.\\nאנא לחץ על הקישור הבא לאיפו"
        },
        {
          "type": "email",
          "line": 479,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 479,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 485,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 485,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 485,
          "rule": "`Hello ${data.userName || userName},\\n\\nA system administrator has requested to reset your password."
        },
        {
          "type": "email",
          "line": 489,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 489,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 510,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 510,
          "rule": "language === \"he\" ? `צוות ${emailFrom}` : language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailF"
        },
        {
          "type": "email",
          "line": 511,
          "rule": "`צוות ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 511,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 511,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 511,
          "rule": "language === \"ru\" ? `Команда ${emailFrom}` : `The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 512,
          "rule": "`Команда ${emailFrom}`"
        },
        {
          "type": "email",
          "line": 512,
          "rule": "emailFrom}`"
        },
        {
          "type": "email",
          "line": 512,
          "rule": "emailFrom"
        },
        {
          "type": "email",
          "line": 512,
          "rule": "`The ${emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 512,
          "rule": "emailFrom} Team`"
        },
        {
          "type": "email",
          "line": 512,
          "rule": "emailFrom"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "actions\\purchase-summary-actions.ts",
      "lines": 775,
      "complexity": 154,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 30,
          "condition": "!isConnected",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 36,
          "condition": "!filters?.type || filters.type.includes('booking')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "!filters?.type || filters.type.includes('subscription')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "!filters?.type || filters.type.includes('gift_voucher')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 142,
          "condition": "filters?.status && filters.status.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 145,
          "condition": "filters?.dateFrom",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 148,
          "condition": "filters?.dateTo",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 150,
          "condition": "filters?.amountMin",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 153,
          "condition": "filters?.amountMax",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 156,
          "condition": "filters?.search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 179,
          "condition": "!session?.user?.roles?.includes('admin')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 181,
          "condition": "!mongoose.Types.ObjectId.isValid(customerId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 187,
          "condition": "!customer",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 261,
          "condition": "!session?.user?.roles?.includes('admin')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 264,
          "condition": "!isConnected",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 267,
          "condition": "userType === 'guests'",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 270,
          "condition": "userType === 'members'",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 274,
          "condition": "search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 285,
          "condition": "summaryResult.success && summaryResult.data",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 306,
          "condition": "!session?.user?.roles?.includes('admin')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 309,
          "condition": "!isConnected",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 314,
          "condition": "filters?.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 316,
          "condition": "!filters?.type || filters.type.includes('booking')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 358,
          "condition": "!filters?.type || filters.type.includes('subscription')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 393,
          "condition": "!filters?.type || filters.type.includes('gift_voucher')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 395,
          "condition": "filters?.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 442,
          "condition": "filters?.status && filters.status.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 446,
          "condition": "filters?.dateFrom",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 448,
          "condition": "filters?.dateTo",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 451,
          "condition": "filters?.search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 477,
          "condition": "!session?.user?.roles?.includes('admin')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 480,
          "condition": "!isConnected",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "safeDbConnect",
          "line": 14,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "getUserPurchaseHistory",
          "line": 19,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "filters",
              "type": "Partial<PurchaseFilters>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 123,
          "parameters": [
            {
              "name": "h",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 144,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 149,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 152,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 155,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 159,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 163,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getCustomerSummary",
          "line": 174,
          "parameters": [
            {
              "name": "customerId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 192,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 193,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 196,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 199,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 205,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 207,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 211,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 213,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 214,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 222,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 224,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 231,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 244,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAllCustomers",
          "line": 253,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "search",
              "type": "string"
            },
            {
              "name": "userType",
              "type": "'all' | 'guests' | 'members'"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getAllPurchaseTransactions",
          "line": 298,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "filters",
              "type": "Partial<PurchaseFilters>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 418,
          "parameters": [
            {
              "name": "h",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 445,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 447,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 450,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 453,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 460,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPurchaseStats",
          "line": 472,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 492,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 494,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 497,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 499,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 502,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 504,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 507,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 508,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 519,
          "parameters": [
            {
              "name": "u",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 526,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 528,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 531,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 532,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 534,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 536,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 232,
          "rule": "const customerSummary: CustomerSummary = {\n      userId: customer._id.toString(),\n      customerName"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "const customerSummary: CustomerSummary = {\n      userId: customer._id.toString(),\n      customerName"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "customerSummary: CustomerSummary = {\n      userId: customer._id.toString(),\n      customerName: cust"
        },
        {
          "type": "email",
          "line": 233,
          "rule": "{\n      userId: customer._id.toString(),\n      customerName: customer.name,\n      customerEmail: cus"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "customerEmail: customer.email"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "customer.email"
        },
        {
          "type": "email",
          "line": 235,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "customerPhone: customer.phone || ''"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "customer.phone || ''"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "customer.phone"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 274,
          "rule": "if (search) {\n      userQuery.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        {"
        },
        {
          "type": "email",
          "line": 274,
          "rule": "{\n      userQuery.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { email: { $r"
        },
        {
          "type": "email",
          "line": 274,
          "rule": "userQuery.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { email: { $regex: se"
        },
        {
          "type": "email",
          "line": 274,
          "rule": "userQuery.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { email: { $regex: se"
        },
        {
          "type": "email",
          "line": 274,
          "rule": "[\n        { name: { $regex: search, $options: 'i' } },\n        { email: { $regex: search, $options: "
        },
        {
          "type": "email",
          "line": 276,
          "rule": "{ email: { $regex: search, $options: 'i' } }"
        },
        {
          "type": "email",
          "line": 276,
          "rule": "email: { $regex: search, $options: 'i' }"
        },
        {
          "type": "email",
          "line": 276,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 277,
          "rule": "{ phone: { $regex: search, $options: 'i' } }"
        },
        {
          "type": "phone",
          "line": 277,
          "rule": "phone: { $regex: search, $options: 'i' }"
        },
        {
          "type": "phone",
          "line": 277,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 318,
          "rule": "{\n      const bookings = await Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n   "
        },
        {
          "type": "email",
          "line": 318,
          "rule": "const bookings = await Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .po"
        },
        {
          "type": "email",
          "line": 318,
          "rule": "const bookings = await Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .po"
        },
        {
          "type": "email",
          "line": 318,
          "rule": "bookings = await Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate"
        },
        {
          "type": "email",
          "line": 318,
          "rule": "await Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate('professio"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate('professionalId'"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate('professionalId'"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate('professionalId'"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate('professionalId'"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "Booking.find(userFilter)\n        .populate('treatmentId', 'name')\n        .populate('professionalId'"
        },
        {
          "type": "email",
          "line": 321,
          "rule": "'name email phone'"
        },
        {
          "type": "email",
          "line": 355,
          "rule": "customerEmail: (booking.userId as any)?.email"
        },
        {
          "type": "email",
          "line": 356,
          "rule": "(booking.userId as any)?.email"
        },
        {
          "type": "email",
          "line": 356,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 357,
          "rule": "customerPhone: (booking.userId as any)?.phone"
        },
        {
          "type": "phone",
          "line": 357,
          "rule": "(booking.userId as any)?.phone"
        },
        {
          "type": "phone",
          "line": 358,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 360,
          "rule": "{\n      const userSubscriptions = await UserSubscription.find(userFilter)\n        .populate('subscri"
        },
        {
          "type": "email",
          "line": 360,
          "rule": "const userSubscriptions = await UserSubscription.find(userFilter)\n        .populate('subscriptionId'"
        },
        {
          "type": "email",
          "line": 360,
          "rule": "const userSubscriptions = await UserSubscription.find(userFilter)\n        .populate('subscriptionId'"
        },
        {
          "type": "email",
          "line": 360,
          "rule": "userSubscriptions = await UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'nam"
        },
        {
          "type": "email",
          "line": 361,
          "rule": "await UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'name')\n        .populat"
        },
        {
          "type": "email",
          "line": 361,
          "rule": "UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'name')\n        .populate('tre"
        },
        {
          "type": "email",
          "line": 361,
          "rule": "UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'name')\n        .populate('tre"
        },
        {
          "type": "email",
          "line": 361,
          "rule": "UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'name')\n        .populate('tre"
        },
        {
          "type": "email",
          "line": 361,
          "rule": "UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'name')\n        .populate('tre"
        },
        {
          "type": "email",
          "line": 361,
          "rule": "UserSubscription.find(userFilter)\n        .populate('subscriptionId', 'name')\n        .populate('tre"
        },
        {
          "type": "email",
          "line": 364,
          "rule": "'name email phone'"
        },
        {
          "type": "email",
          "line": 390,
          "rule": "customerEmail: (userSub.userId as any)?.email"
        },
        {
          "type": "email",
          "line": 390,
          "rule": "(userSub.userId as any)?.email"
        },
        {
          "type": "email",
          "line": 391,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 391,
          "rule": "customerPhone: (userSub.userId as any)?.phone"
        },
        {
          "type": "phone",
          "line": 392,
          "rule": "(userSub.userId as any)?.phone"
        },
        {
          "type": "phone",
          "line": 392,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 400,
          "rule": "const vouchers = await GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n    "
        },
        {
          "type": "email",
          "line": 400,
          "rule": "const vouchers = await GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n    "
        },
        {
          "type": "email",
          "line": 401,
          "rule": "vouchers = await GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .p"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "await GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('pu"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 401,
          "rule": "GiftVoucher.find(voucherFilter)\n        .populate('treatmentId', 'name')\n        .populate('purchase"
        },
        {
          "type": "email",
          "line": 403,
          "rule": "'name email phone'"
        },
        {
          "type": "email",
          "line": 404,
          "rule": "'name email phone'"
        },
        {
          "type": "email",
          "line": 438,
          "rule": "customerEmail: (customerData as any)?.email"
        },
        {
          "type": "email",
          "line": 439,
          "rule": "(customerData as any)?.email"
        },
        {
          "type": "email",
          "line": 439,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 439,
          "rule": "customerPhone: (customerData as any)?.phone"
        },
        {
          "type": "phone",
          "line": 440,
          "rule": "(customerData as any)?.phone"
        },
        {
          "type": "phone",
          "line": 440,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 16,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 26,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 178,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 259,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 305,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 475,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\common\\purchase\\purchase-history-table.tsx",
      "lines": 755,
      "complexity": 149,
      "conditionals": [
        {
          "type": "switch",
          "line": 29,
          "cases": 8,
          "expression": "status"
        },
        {
          "type": "switch",
          "line": 38,
          "cases": 8,
          "expression": "status"
        },
        {
          "type": "switch",
          "line": 53,
          "cases": 4,
          "expression": "type"
        },
        {
          "type": "switch",
          "line": 60,
          "cases": 4,
          "expression": "type"
        },
        {
          "type": "if",
          "line": 69,
          "condition": "amount === undefined || amount === null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "isNaN(numericAmount)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "type === 'booking'",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 174,
          "condition": "type === 'subscription'",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 241,
          "condition": "type === 'gift_voucher'",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 326,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 334,
          "condition": "transactions.length === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseHistoryTable",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseHistoryTableProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusBadgeVariant",
          "line": 29,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusText",
          "line": 37,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getTypeIcon",
          "line": 53,
          "parameters": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getTypeText",
          "line": 60,
          "parameters": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatCurrency",
          "line": 68,
          "parameters": [
            {
              "name": "amount",
              "type": "number | undefined | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 74,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderTransactionDetails",
          "line": 77,
          "parameters": [
            {
              "name": "transaction",
              "type": "PurchaseTransaction"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 314,
          "parameters": [
            {
              "name": "usage",
              "type": "any"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 378,
          "parameters": [
            {
              "name": "transaction",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 434,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 446,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "BookingDetails",
          "line": 530,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ details: any }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SubscriptionDetails",
          "line": 563,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ details: any }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "GiftVoucherDetails",
          "line": 594,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ details: any }"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 138,
          "rule": "{bookingDetails.paymentStatus === 'not_required' && (t('purchaseHistory.payment.notRequired') || 'לא"
        },
        {
          "type": "required",
          "line": 138,
          "rule": "bookingDetails.paymentStatus === 'not_required' && (t('purchaseHistory.payment.notRequired') || 'לא "
        },
        {
          "type": "required",
          "line": 138,
          "rule": "bookingDetails.paymentStatus === 'not_required'"
        },
        {
          "type": "required",
          "line": 139,
          "rule": "'not_required'"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "lines": 873,
      "complexity": 122,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 31,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 35,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "!selectedProfessional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 117,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 196,
          "condition": "!status",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 221,
          "condition": "booking?.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 254,
          "condition": "!booking?.professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 270,
          "condition": "!booking?.priceDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 287,
          "condition": "!booking?.recipientName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 291,
          "condition": "booking.recipientBirthDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 295,
          "condition": "monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 316,
          "condition": "!treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 320,
          "condition": "treatment.pricingType === \"duration_based\" && booking.selectedDurationId && treatment.durations",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 325,
          "condition": "selectedDuration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 327,
          "condition": "treatment.pricingType === \"fixed\" && treatment.defaultDurationMinutes",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 345,
          "condition": "!address",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 379,
          "condition": "!priceDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 387,
          "condition": "!hasRedemption",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 415,
          "condition": "!priceDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 419,
          "condition": "treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 419,
          "condition": "treatment.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 422,
          "condition": "treatment.pricingType === \"duration_based\" && booking.selectedDurationId && treatment.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 427,
          "condition": "selectedDuration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 431,
          "condition": "priceDetails.surcharges",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 434,
          "condition": "surcharge && typeof surcharge.amount === 'number' && surcharge.amount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 436,
          "condition": "surcharge.professionalShare",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 439,
          "condition": "surcharge.professionalShare.type === 'percentage'",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 442,
          "condition": "surcharge.professionalShare.type === 'fixed'",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 457,
          "condition": "priceDetails.surcharges",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 460,
          "condition": "surcharge && typeof surcharge.amount === 'number' && surcharge.amount > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 482,
          "condition": "!booking?.recipientName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 485,
          "condition": "booking.recipientBirthDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 490,
          "condition": "monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDateSafe",
          "line": 26,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatTimeSafe",
          "line": 30,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateTimeSafe",
          "line": 34,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            },
            {
              "name": "language",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatCreatedAtSafe",
          "line": 41,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ProfessionalAssignmentDialog",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ \n  booking: PopulatedBooking\n  isOpen: boolean\n  onClose: () => void\n  t: TFunction \n}"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleAssign",
          "line": 56,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 86,
          "parameters": [
            {
              "name": "professional",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AdminBookingActions",
          "line": 112,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ \n  booking: PopulatedBooking; \n  t: TFunction;\n}"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDropdownClick",
          "line": 125,
          "parameters": [
            {
              "name": "e",
              "type": "React.MouseEvent"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 155,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 172,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 193,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "AdminBookingStatusBadge",
          "line": 195,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ status: string; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ClientInfo",
          "line": 220,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ProfessionalInfo",
          "line": 252,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PriceDetailsInfo",
          "line": 269,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "RecipientInfo",
          "line": 286,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "TreatmentInfo",
          "line": 314,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 323,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AddressDetailsInfo",
          "line": 340,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "RedemptionInfo",
          "line": 377,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "FinancialSummaryInfo",
          "line": 412,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 425,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "EnhancedRecipientInfo",
          "line": 481,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAdminBookingColumns",
          "line": 508,
          "parameters": [
            {
              "name": "t",
              "type": "TFunction"
            },
            {
              "name": "locale",
              "type": "string"
            },
            {
              "name": "onRowClick",
              "type": "(booking: PopulatedBooking) => void"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 513,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 515,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 520,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 529,
          "parameters": [
            {
              "name": "rowA",
              "type": "any"
            },
            {
              "name": "rowB",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 536,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 537,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 542,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 547,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 551,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 556,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 559,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 563,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 566,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 568,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 573,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 577,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 582,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 585,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 585,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 59,
          "rule": "if (result.success) {\n        toast.success(t(\"adminBookings.assignSuccess\"))\n        queryClient.in"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "{\n        toast.success(t(\"adminBookings.assignSuccess\"))\n        queryClient.invalidateQueries({ qu"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"adminBookings\"] })"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"adminBookings\"] })"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "queryClient.invalidateQueries"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "invalidateQueries"
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "<div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n          <Phone className=\""
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "{user.phone || \"-\"}"
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "user.phone || \"-\""
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 230,
          "rule": "<div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n          <Mail className=\"h"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "{user.email || \"-\"}"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "user.email || \"-\""
        },
        {
          "type": "email",
          "line": 232,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 261,
          "rule": "<div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n        <Phone className=\"h-"
        },
        {
          "type": "phone",
          "line": 264,
          "rule": "{professional.phone || \"-\"}"
        },
        {
          "type": "phone",
          "line": 264,
          "rule": "professional.phone || \"-\""
        },
        {
          "type": "phone",
          "line": 264,
          "rule": "professional.phone"
        },
        {
          "type": "phone",
          "line": 264,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 265,
          "rule": "<div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n        <Mail className=\"h-3"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "{professional.email || \"-\"}"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "professional.email || \"-\""
        },
        {
          "type": "email",
          "line": 267,
          "rule": "professional.email"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 27,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 31,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 35,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 42,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 57,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "lines": 1002,
      "complexity": 122,
      "conditionals": [
        {
          "type": "if",
          "line": 40,
          "condition": "booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 45,
          "condition": "isNaN(d.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 52,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "isNaN(d.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "editedBooking.status !== booking.status",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "editedBooking.bookingDateTime !== booking.bookingDateTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "editedBooking.recipientName !== booking.recipientName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "editedBooking.recipientPhone !== booking.recipientPhone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 81,
          "condition": "editedBooking.recipientEmail !== booking.recipientEmail",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "editedBooking.notes !== booking.notes",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "editedBooking.paymentDetails?.paymentStatus !== booking.paymentDetails?.paymentStatus",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "Object.keys(updates).length > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 94,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 111,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 216,
          "condition": "e.target.value && booking.bookingDateTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 235,
          "condition": "e.target.value && booking.bookingDateTime",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ComprehensiveBookingEditModal",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "ComprehensiveBookingEditModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "formatDateTime",
          "line": 43,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "safeFormatDate",
          "line": 50,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            },
            {
              "name": "formatStr",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusBadgeColor",
          "line": 58,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSave",
          "line": 67,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleAssignProfessional",
          "line": 109,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 113,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 190,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 191,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 216,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 224,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 235,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 243,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 331,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 379,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 379,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 390,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 390,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 403,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 404,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 506,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 506,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 515,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 516,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 526,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 527,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 558,
          "parameters": [
            {
              "name": "prof",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 625,
          "parameters": [
            {
              "name": "prof",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 677,
          "parameters": [
            {
              "name": "surcharge",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 796,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 796,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 943,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 944,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 953,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 953,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 93,
          "rule": "{\n        const result = await updateBookingByAdmin(booking._id, updates)\n        if (result.success"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "if (result.success) {\n          toast.success(t(\"adminBookings.saveSuccess\"))\n          queryClient."
        },
        {
          "type": "general",
          "line": 95,
          "rule": "{\n          toast.success(t(\"adminBookings.saveSuccess\"))\n          queryClient.invalidateQueries({ "
        },
        {
          "type": "general",
          "line": 96,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"adminBookings\"] })"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"adminBookings\"] })"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "queryClient.invalidateQueries"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "invalidateQueries"
        },
        {
          "type": "general",
          "line": 111,
          "rule": "if (result.success) {\n        toast.success(t(\"adminBookings.assignSuccess\"))\n        setEditedBooki"
        },
        {
          "type": "general",
          "line": 112,
          "rule": "{\n        toast.success(t(\"adminBookings.assignSuccess\"))\n        setEditedBooking(prev => ({ ...pre"
        },
        {
          "type": "general",
          "line": 114,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"adminBookings\"] })"
        },
        {
          "type": "general",
          "line": 114,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"adminBookings\"] })"
        },
        {
          "type": "general",
          "line": 114,
          "rule": "queryClient.invalidateQueries"
        },
        {
          "type": "general",
          "line": 115,
          "rule": "invalidateQueries"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "const bookedByInfo = {\n    name: booking.bookedByUserName || client?.name || t(\"common.unknown\"),\n  "
        },
        {
          "type": "email",
          "line": 125,
          "rule": "const bookedByInfo = {\n    name: booking.bookedByUserName || client?.name || t(\"common.unknown\"),\n  "
        },
        {
          "type": "email",
          "line": 125,
          "rule": "bookedByInfo = {\n    name: booking.bookedByUserName || client?.name || t(\"common.unknown\"),\n    emai"
        },
        {
          "type": "email",
          "line": 126,
          "rule": "{\n    name: booking.bookedByUserName || client?.name || t(\"common.unknown\"),\n    email: booking.book"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "email: booking.bookedByUserEmail || client?.email || \"\""
        },
        {
          "type": "email",
          "line": 127,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "booking.bookedByUserEmail || client?.email || \"\""
        },
        {
          "type": "email",
          "line": 127,
          "rule": "booking.bookedByUserEmail || client?.email"
        },
        {
          "type": "email",
          "line": 128,
          "rule": "client?.email"
        },
        {
          "type": "email",
          "line": 128,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "phone: booking.bookedByUserPhone || client?.phone || \"\""
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "booking.bookedByUserPhone || client?.phone || \"\""
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "booking.bookedByUserPhone || client?.phone"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "client?.phone"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 387,
          "rule": "<Input \n                      type=\"email\"\n                      value={editedBooking.bookedByUserEm"
        },
        {
          "type": "email",
          "line": 387,
          "rule": "type=\"email\"\n                      value={editedBooking.bookedByUserEmail || bookedByInfo.email}\n   "
        },
        {
          "type": "email",
          "line": 387,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 388,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 388,
          "rule": "value={editedBooking.bookedByUserEmail || bookedByInfo.email}"
        },
        {
          "type": "email",
          "line": 388,
          "rule": "{editedBooking.bookedByUserEmail || bookedByInfo.email}"
        },
        {
          "type": "email",
          "line": 388,
          "rule": "editedBooking.bookedByUserEmail || bookedByInfo.email"
        },
        {
          "type": "email",
          "line": 389,
          "rule": "bookedByInfo.email"
        },
        {
          "type": "email",
          "line": 389,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 400,
          "rule": "<Input \n                      type=\"tel\"\n                      value={editedBooking.bookedByUserPhon"
        },
        {
          "type": "phone",
          "line": 400,
          "rule": "type=\"tel\"\n                      value={editedBooking.bookedByUserPhone || bookedByInfo.phone}\n     "
        },
        {
          "type": "phone",
          "line": 401,
          "rule": "value={editedBooking.bookedByUserPhone || bookedByInfo.phone}"
        },
        {
          "type": "phone",
          "line": 401,
          "rule": "{editedBooking.bookedByUserPhone || bookedByInfo.phone}"
        },
        {
          "type": "phone",
          "line": 401,
          "rule": "editedBooking.bookedByUserPhone || bookedByInfo.phone"
        },
        {
          "type": "phone",
          "line": 402,
          "rule": "bookedByInfo.phone"
        },
        {
          "type": "phone",
          "line": 402,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 519,
          "rule": "<div className=\"space-y-2 mt-4\">\n                        <Label>{t(\"adminBookings.recipientEmail\")}<"
        },
        {
          "type": "email",
          "line": 523,
          "rule": "<Input \n                          type=\"email\"\n                          value={editedBooking.recipi"
        },
        {
          "type": "email",
          "line": 523,
          "rule": "type=\"email\"\n                          value={editedBooking.recipientEmail || booking.recipientEmail"
        },
        {
          "type": "email",
          "line": 523,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 523,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 584,
          "rule": "<div className=\"grid grid-cols-2 gap-4 mt-3 text-sm\">\n                        {professional?.phone &"
        },
        {
          "type": "phone",
          "line": 586,
          "rule": "{professional?.phone && (\n                          <div className=\"flex items-center gap-2 text-gre"
        },
        {
          "type": "phone",
          "line": 586,
          "rule": "professional?.phone && (\n                          <div className=\"flex items-center gap-2 text-gree"
        },
        {
          "type": "phone",
          "line": 586,
          "rule": "professional?.phone"
        },
        {
          "type": "phone",
          "line": 586,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 586,
          "rule": "(\n                          <div className=\"flex items-center gap-2 text-green-700\">\n               "
        },
        {
          "type": "phone",
          "line": 586,
          "rule": "<div className=\"flex items-center gap-2 text-green-700\">\n                            <Phone classNam"
        },
        {
          "type": "phone",
          "line": 590,
          "rule": "<span>{professional.phone}</span>"
        },
        {
          "type": "phone",
          "line": 590,
          "rule": "{professional.phone}"
        },
        {
          "type": "phone",
          "line": 590,
          "rule": "professional.phone"
        },
        {
          "type": "phone",
          "line": 590,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 592,
          "rule": "{professional?.email && (\n                          <div className=\"flex items-center gap-2 text-gre"
        },
        {
          "type": "email",
          "line": 592,
          "rule": "professional?.email && (\n                          <div className=\"flex items-center gap-2 text-gree"
        },
        {
          "type": "email",
          "line": 592,
          "rule": "professional?.email"
        },
        {
          "type": "email",
          "line": 592,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 593,
          "rule": "(\n                          <div className=\"flex items-center gap-2 text-green-700\">\n               "
        },
        {
          "type": "email",
          "line": 593,
          "rule": "<div className=\"flex items-center gap-2 text-green-700\">\n                            <Mail className"
        },
        {
          "type": "email",
          "line": 596,
          "rule": "<span>{professional.email}</span>"
        },
        {
          "type": "email",
          "line": 596,
          "rule": "{professional.email}"
        },
        {
          "type": "email",
          "line": 596,
          "rule": "professional.email"
        },
        {
          "type": "email",
          "line": 596,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 812,
          "rule": "<SelectItem value=\"not_required\">{t(\"adminBookings.paymentStatuses.notRequired\")}</SelectItem>"
        },
        {
          "type": "required",
          "line": 812,
          "rule": "<SelectItem value=\"not_required\">"
        },
        {
          "type": "required",
          "line": 812,
          "rule": "value=\"not_required\""
        },
        {
          "type": "required",
          "line": 812,
          "rule": "value=\"not_required\""
        },
        {
          "type": "required",
          "line": 813,
          "rule": "\"not_required\""
        }
      ],
      "errorHandling": [
        {
          "line": 44,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 53,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 68,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 109,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\booking\\guest-booking-wizard.tsx",
      "lines": 911,
      "complexity": 111,
      "conditionals": [
        {
          "type": "if",
          "line": 112,
          "condition": "currentStep === 1 && !guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 121,
          "condition": "updatedState.firstName && updatedState.lastName && updatedState.email && updatedState.phone",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 142,
          "condition": "result.success && result.userId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 190,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 206,
          "condition": "savedUserId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 209,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 226,
          "condition": "!guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n        guestInfo.firstName &&\r\n        guestInfo.lastName &&\r\n        guestInfo.email &&\r\n        guestInfo.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 237,
          "condition": "result.success && result.userId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 251,
          "condition": "guestUserId && currentStep > 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 259,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 272,
          "condition": "!bookingOptions.bookingDate || !bookingOptions.selectedTreatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 290,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 310,
          "condition": "!bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n      !bookingOptions.bookingTime ||\r\n      !guestInfo.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 317,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && !bookingOptions.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 332,
          "condition": "result.success && result.priceDetails",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 346,
          "condition": "currentStep >= 4",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 354,
          "condition": "timeSlots.length > 0 && !bookingOptions.bookingTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 357,
          "condition": "firstAvailableSlot",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 362,
          "condition": "abandonedBooking?.formState",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 373,
          "condition": "guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 388,
          "condition": "currentStep === 1 && !guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 396,
          "condition": "guestInfo.firstName && guestInfo.lastName && guestInfo.email && guestInfo.phone",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 405,
          "condition": "result.success && result.userId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 432,
          "condition": "currentStep === TOTAL_STEPS_WITH_PAYMENT - 1 && // Summary step\r\n      calculatedPrice?.finalAmount === 0 &&\r\n      calculatedPrice?.isFullyCoveredByVoucherOrSubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 443,
          "condition": "!guestInfo.firstName || !guestInfo.lastName || !guestInfo.email || !guestInfo.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 450,
          "condition": "!bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n      !bookingOptions.bookingTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 507,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 530,
          "condition": "!pendingBookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 540,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 544,
          "condition": "guestUserId",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 563,
          "cases": 8,
          "expression": "currentStep"
        },
        {
          "type": "switch",
          "line": 608,
          "cases": 8,
          "expression": "currentStep"
        },
        {
          "type": "if",
          "line": 621,
          "condition": "currentStep === CONFIRMATION_STEP_NUMBER",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestBookingWizard",
          "line": 60,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestBookingWizardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [
            {
              "name": "newInfo",
              "type": "Partial<GuestInfo>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 96,
          "parameters": [
            {
              "name": "prevState",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 102,
          "parameters": [
            {
              "name": "newInfo",
              "type": "Partial<GuestInfo>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "prevState",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 110,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createInitialPendingBooking",
          "line": 177,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "guestInfoData",
              "type": "Partial<GuestInfo>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 201,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "checkForAbandonedBooking",
          "line": 202,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 225,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "attemptAutoCreate",
          "line": 225,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 251,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "saveFormState",
          "line": 252,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 267,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 272,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 277,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 306,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 310,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 316,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 339,
          "parameters": [
            {
              "name": "issue",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 345,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 354,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 356,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 358,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleRecoverBooking",
          "line": 362,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleStartFresh",
          "line": 373,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "nextStep",
          "line": 384,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 437,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "prevStep",
          "line": 439,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 439,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createPendingBooking",
          "line": 441,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 518,
          "parameters": [
            {
              "name": "issue",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFinalSubmit",
          "line": 528,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "renderStep",
          "line": 562,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStepTitle",
          "line": 608,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 22,
          "rule": "import type { CreateBookingPayloadType, CalculatePricePayloadType } from \"@/lib/validation/booking-s"
        },
        {
          "type": "general",
          "line": 23,
          "rule": "\"@/lib/validation/booking-schemas\""
        },
        {
          "type": "email",
          "line": 33,
          "rule": "interface GuestInfo {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  phone: string\r\n  "
        },
        {
          "type": "email",
          "line": 34,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "bookerNotificationMethod?: \"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "recipientNotificationMethod?: \"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 119,
          "rule": "console.log(\"🔍 email:\", updatedState.email)"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "console.log(\"🔍 email:\", updatedState.email)"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "\"🔍 email:\""
        },
        {
          "type": "email",
          "line": 119,
          "rule": "updatedState.email"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 120,
          "rule": "console.log(\"🔍 phone:\", updatedState.phone)"
        },
        {
          "type": "phone",
          "line": 120,
          "rule": "console.log(\"🔍 phone:\", updatedState.phone)"
        },
        {
          "type": "phone",
          "line": 120,
          "rule": "\"🔍 phone:\""
        },
        {
          "type": "phone",
          "line": 120,
          "rule": "updatedState.phone"
        },
        {
          "type": "phone",
          "line": 121,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "if (updatedState.firstName && updatedState.lastName && updatedState.email && updatedState.phone) {\r\n"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "updatedState.firstName && updatedState.lastName && updatedState.email && updatedState.phone"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "updatedState.firstName && updatedState.lastName && updatedState.email"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "updatedState.email"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "updatedState.phone"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "const guestUserData = {\r\n              firstName: updatedState.firstName,\r\n              lastName: u"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "const guestUserData = {\r\n              firstName: updatedState.firstName,\r\n              lastName: u"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "guestUserData = {\r\n              firstName: updatedState.firstName,\r\n              lastName: updated"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "{\r\n              firstName: updatedState.firstName,\r\n              lastName: updatedState.lastName,\r"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "email: updatedState.email"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 128,
          "rule": "updatedState.email"
        },
        {
          "type": "email",
          "line": 128,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "phone: updatedState.phone"
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "updatedState.phone"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 132,
          "rule": "console.log(\"📤 Data types:\", {\r\n              firstName: typeof guestUserData.firstName,\r\n         "
        },
        {
          "type": "email",
          "line": 132,
          "rule": "console.log(\"📤 Data types:\", {\r\n              firstName: typeof guestUserData.firstName,\r\n         "
        },
        {
          "type": "email",
          "line": 133,
          "rule": "{\r\n              firstName: typeof guestUserData.firstName,\r\n              lastName: typeof guestUse"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "email: typeof guestUserData.email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "typeof guestUserData.email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "guestUserData.email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phone: typeof guestUserData.phone"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "typeof guestUserData.phone"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "guestUserData.phone"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 164,
          "rule": "{\r\n            console.log(\"⚠️ Missing required guest info for user creation\")\r\n            console."
        },
        {
          "type": "required",
          "line": 164,
          "rule": "console.log(\"⚠️ Missing required guest info for user creation\")"
        },
        {
          "type": "required",
          "line": 164,
          "rule": "console.log(\"⚠️ Missing required guest info for user creation\")"
        },
        {
          "type": "required",
          "line": 165,
          "rule": "\"⚠️ Missing required guest info for user creation\""
        },
        {
          "type": "email",
          "line": 166,
          "rule": "console.log(\"⚠️ Missing fields:\", {\r\n              firstName: !updatedState.firstName,\r\n            "
        },
        {
          "type": "email",
          "line": 166,
          "rule": "console.log(\"⚠️ Missing fields:\", {\r\n              firstName: !updatedState.firstName,\r\n            "
        },
        {
          "type": "email",
          "line": 167,
          "rule": "{\r\n              firstName: !updatedState.firstName,\r\n              lastName: !updatedState.lastName"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "email: !updatedState.email"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "!updatedState.email"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "updatedState.email"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "phone: !updatedState.phone"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "!updatedState.phone"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "updatedState.phone"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 225,
          "rule": "attemptAutoCreate = async () => {\r\n      if (\r\n        !guestUserId &&\r\n        !guestUserCreatedRef"
        },
        {
          "type": "email",
          "line": 225,
          "rule": "async () => {\r\n      if (\r\n        !guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n       "
        },
        {
          "type": "email",
          "line": 226,
          "rule": "{\r\n      if (\r\n        !guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n        guestInfo.f"
        },
        {
          "type": "email",
          "line": 226,
          "rule": "if (\r\n        !guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n        guestInfo.firstName "
        },
        {
          "type": "email",
          "line": 226,
          "rule": "!guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n        guestInfo.firstName &&\r\n        gu"
        },
        {
          "type": "email",
          "line": 226,
          "rule": "!guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n        guestInfo.firstName &&\r\n        gu"
        },
        {
          "type": "email",
          "line": 228,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 229,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "try {\r\n          const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "{\r\n          const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n  "
        },
        {
          "type": "email",
          "line": 231,
          "rule": "const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            las"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            las"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            lastName:"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            lastName: guestInf"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            lastName: guestInfo.last"
        },
        {
          "type": "email",
          "line": 232,
          "rule": "{\r\n            firstName: guestInfo.firstName,\r\n            lastName: guestInfo.lastName,\r\n         "
        },
        {
          "type": "email",
          "line": 234,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 234,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 234,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 247,
          "rule": "[guestInfo.firstName, guestInfo.lastName, guestInfo.email, guestInfo.phone, guestUserId]"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 249,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 249,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 249,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 309,
          "rule": "useCallback(async () => {\r\n    if (\r\n      !bookingOptions.selectedTreatmentId ||\r\n      !bookingOpt"
        },
        {
          "type": "email",
          "line": 310,
          "rule": "async () => {\r\n    if (\r\n      !bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.booking"
        },
        {
          "type": "email",
          "line": 310,
          "rule": "{\r\n    if (\r\n      !bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n   "
        },
        {
          "type": "email",
          "line": 310,
          "rule": "if (\r\n      !bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n      !boo"
        },
        {
          "type": "email",
          "line": 310,
          "rule": "!bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n      !bookingOptions."
        },
        {
          "type": "email",
          "line": 313,
          "rule": "!guestInfo.email"
        },
        {
          "type": "email",
          "line": 313,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 313,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 343,
          "rule": "[bookingOptions, guestInfo.email, guestUserId, toast, initialData.activeTreatments, t]"
        },
        {
          "type": "email",
          "line": 344,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 344,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 351,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 351,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 394,
          "rule": "console.log(\"🔍 email:\", guestInfo.email)"
        },
        {
          "type": "email",
          "line": 394,
          "rule": "console.log(\"🔍 email:\", guestInfo.email)"
        },
        {
          "type": "email",
          "line": 394,
          "rule": "\"🔍 email:\""
        },
        {
          "type": "email",
          "line": 395,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 395,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 395,
          "rule": "console.log(\"🔍 phone:\", guestInfo.phone)"
        },
        {
          "type": "phone",
          "line": 395,
          "rule": "console.log(\"🔍 phone:\", guestInfo.phone)"
        },
        {
          "type": "phone",
          "line": 395,
          "rule": "\"🔍 phone:\""
        },
        {
          "type": "phone",
          "line": 396,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 396,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 396,
          "rule": "if (guestInfo.firstName && guestInfo.lastName && guestInfo.email && guestInfo.phone) {\r\n        cons"
        },
        {
          "type": "email",
          "line": 396,
          "rule": "guestInfo.firstName && guestInfo.lastName && guestInfo.email && guestInfo.phone"
        },
        {
          "type": "email",
          "line": 396,
          "rule": "guestInfo.firstName && guestInfo.lastName && guestInfo.email"
        },
        {
          "type": "email",
          "line": 397,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 397,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 398,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 398,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "try {\r\n          const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "{\r\n          const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n  "
        },
        {
          "type": "email",
          "line": 399,
          "rule": "const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            las"
        },
        {
          "type": "email",
          "line": 399,
          "rule": "const result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            las"
        },
        {
          "type": "email",
          "line": 400,
          "rule": "result = await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            lastName:"
        },
        {
          "type": "email",
          "line": 400,
          "rule": "await createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            lastName: guestInf"
        },
        {
          "type": "email",
          "line": 400,
          "rule": "createGuestUser({\r\n            firstName: guestInfo.firstName,\r\n            lastName: guestInfo.last"
        },
        {
          "type": "email",
          "line": 400,
          "rule": "{\r\n            firstName: guestInfo.firstName,\r\n            lastName: guestInfo.lastName,\r\n         "
        },
        {
          "type": "email",
          "line": 402,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 402,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 402,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 403,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 403,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 403,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 403,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 403,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 426,
          "rule": "{\r\n        console.log(\"⚠️ Missing required guest info for user creation\")\r\n        console.log(\"⚠️ "
        },
        {
          "type": "required",
          "line": 426,
          "rule": "console.log(\"⚠️ Missing required guest info for user creation\")"
        },
        {
          "type": "required",
          "line": 426,
          "rule": "console.log(\"⚠️ Missing required guest info for user creation\")"
        },
        {
          "type": "required",
          "line": 426,
          "rule": "\"⚠️ Missing required guest info for user creation\""
        },
        {
          "type": "email",
          "line": 427,
          "rule": "console.log(\"⚠️ Missing fields:\", {\r\n          firstName: !guestInfo.firstName,\r\n          lastName:"
        },
        {
          "type": "email",
          "line": 427,
          "rule": "console.log(\"⚠️ Missing fields:\", {\r\n          firstName: !guestInfo.firstName,\r\n          lastName:"
        },
        {
          "type": "email",
          "line": 428,
          "rule": "{\r\n          firstName: !guestInfo.firstName,\r\n          lastName: !guestInfo.lastName,\r\n          e"
        },
        {
          "type": "email",
          "line": 430,
          "rule": "email: !guestInfo.email"
        },
        {
          "type": "email",
          "line": 430,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 430,
          "rule": "!guestInfo.email"
        },
        {
          "type": "email",
          "line": 430,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 430,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 430,
          "rule": "phone: !guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 430,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 431,
          "rule": "!guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 431,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 431,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 440,
          "rule": "const createPendingBooking = async () => {\r\n    console.log(\"🔄 Creating pending booking...\")\r\n    \r"
        },
        {
          "type": "email",
          "line": 440,
          "rule": "const createPendingBooking = async () => {\r\n    console.log(\"🔄 Creating pending booking...\")\r\n    \r"
        },
        {
          "type": "email",
          "line": 441,
          "rule": "createPendingBooking = async () => {\r\n    console.log(\"🔄 Creating pending booking...\")\r\n    \r\n    i"
        },
        {
          "type": "email",
          "line": 441,
          "rule": "async () => {\r\n    console.log(\"🔄 Creating pending booking...\")\r\n    \r\n    if (!guestInfo.firstName"
        },
        {
          "type": "email",
          "line": 441,
          "rule": "{\r\n    console.log(\"🔄 Creating pending booking...\")\r\n    \r\n    if (!guestInfo.firstName || !guestIn"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "if (!guestInfo.firstName || !guestInfo.lastName || !guestInfo.email || !guestInfo.phone) {\r\n      co"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "!guestInfo.firstName || !guestInfo.lastName || !guestInfo.email || !guestInfo.phone"
        },
        {
          "type": "email",
          "line": 443,
          "rule": "!guestInfo.firstName || !guestInfo.lastName || !guestInfo.email"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "!guestInfo.email"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 444,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 444,
          "rule": "!guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 444,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 444,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 480,
          "rule": "paymentDetails: {\r\n          paymentStatus: calculatedPrice!.finalAmount === 0 ? \"not_required\" : \"p"
        },
        {
          "type": "required",
          "line": 480,
          "rule": "{\r\n          paymentStatus: calculatedPrice!.finalAmount === 0 ? \"not_required\" : \"pending\",\r\n      "
        },
        {
          "type": "required",
          "line": 480,
          "rule": "paymentStatus: calculatedPrice!.finalAmount === 0 ? \"not_required\" : \"pending\""
        },
        {
          "type": "required",
          "line": 481,
          "rule": "calculatedPrice!.finalAmount === 0 ? \"not_required\" : \"pending\""
        },
        {
          "type": "required",
          "line": 481,
          "rule": "\"not_required\""
        },
        {
          "type": "email",
          "line": 482,
          "rule": "guestInfo: {\r\n          name: `${guestInfo.firstName} ${guestInfo.lastName}`,\r\n          email: gues"
        },
        {
          "type": "email",
          "line": 483,
          "rule": "{\r\n          name: `${guestInfo.firstName} ${guestInfo.lastName}`,\r\n          email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "email: guestInfo.email!"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "guestInfo.email!"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 485,
          "rule": "phone: guestInfo.phone!"
        },
        {
          "type": "phone",
          "line": 485,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 485,
          "rule": "guestInfo.phone!"
        },
        {
          "type": "phone",
          "line": 485,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 485,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 489,
          "rule": "recipientEmail: guestInfo.isBookingForSomeoneElse \r\n          ? guestInfo.recipientEmail!\r\n         "
        },
        {
          "type": "email",
          "line": 490,
          "rule": "guestInfo.isBookingForSomeoneElse \r\n          ? guestInfo.recipientEmail!\r\n          : guestInfo.ema"
        },
        {
          "type": "email",
          "line": 492,
          "rule": "guestInfo.email!"
        },
        {
          "type": "email",
          "line": 492,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 492,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 492,
          "rule": "recipientPhone: guestInfo.isBookingForSomeoneElse \r\n          ? guestInfo.recipientPhone!\r\n         "
        },
        {
          "type": "phone",
          "line": 493,
          "rule": "guestInfo.isBookingForSomeoneElse \r\n          ? guestInfo.recipientPhone!\r\n          : guestInfo.pho"
        },
        {
          "type": "phone",
          "line": 494,
          "rule": "guestInfo.phone!"
        },
        {
          "type": "phone",
          "line": 494,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 495,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 500,
          "rule": "CreateBookingPayloadType & { guestInfo: { name: string; email: string; phone: string } }"
        },
        {
          "type": "email",
          "line": 501,
          "rule": "{ guestInfo: { name: string; email: string; phone: string } }"
        },
        {
          "type": "email",
          "line": 501,
          "rule": "guestInfo: { name: string; email: string; phone: string }"
        },
        {
          "type": "email",
          "line": 501,
          "rule": "{ name: string; email: string; phone: string }"
        },
        {
          "type": "email",
          "line": 501,
          "rule": "email: string;"
        },
        {
          "type": "email",
          "line": 501,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 502,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 502,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 140,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 179,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 207,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 231,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 253,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 279,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 399,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 458,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 533,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "actions\\user-subscription-actions.ts",
      "lines": 790,
      "complexity": 104,
      "conditionals": [
        {
          "type": "if",
          "line": 32,
          "condition": "!sessionData || !sessionData.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 49,
          "condition": "subscriptionResult.status === \"rejected\" || treatmentResult.status === \"rejected\" || paymentMethodResult.status === \"rejected\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "!subscription || !subscription.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "!treatment || !treatment.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "!paymentMethod || paymentMethod.userId.toString() !== sessionData.user.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "treatment.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 93,
          "condition": "treatment.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "!selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 101,
          "condition": "!duration || !duration.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "singleSessionPrice === undefined || singleSessionPrice < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 146,
          "condition": "purchaser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 159,
          "condition": "methods.includes(\"email\") && purchaser.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 164,
          "condition": "methods.includes(\"sms\") && purchaser.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 197,
          "condition": "!sessionData || !sessionData.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 209,
          "condition": "sub.treatmentId &&\r\n        (sub.treatmentId as ITreatment).pricingType === \"duration_based\" &&\r\n        sub.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 214,
          "condition": "treatmentDoc.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 234,
          "condition": "!sessionData?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 239,
          "condition": "options.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 240,
          "condition": "options.subscriptionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 241,
          "condition": "options.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 243,
          "condition": "options.status",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 244,
          "condition": "options.search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 263,
          "condition": "sub.treatmentId &&\r\n        (sub.treatmentId as ITreatment).pricingType === \"duration_based\" &&\r\n        sub.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 268,
          "condition": "treatmentDoc.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 291,
          "condition": "!sessionData || !sessionData.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 295,
          "condition": "!userSubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 297,
          "condition": "userSubscription.userId && userSubscription.userId.toString() !== sessionData.user.id && !sessionData.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 301,
          "condition": "userSubscription.status !== \"active\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 304,
          "condition": "userSubscription.remainingQuantity < quantity",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 308,
          "condition": "userSubscription.remainingQuantity <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 323,
          "condition": "!sessionData || !sessionData.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 328,
          "condition": "!userSubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 330,
          "condition": "userSubscription.userId && userSubscription.userId.toString() !== sessionData.user.id && !sessionData.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 347,
          "condition": "!sessionData?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 352,
          "condition": "!result",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 388,
          "condition": "subscriptionResult.status === \"rejected\" || treatmentResult.status === \"rejected\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 407,
          "condition": "!subscription || !subscription.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 411,
          "condition": "!treatment || !treatment.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 418,
          "condition": "treatment.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 420,
          "condition": "treatment.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 421,
          "condition": "!selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 428,
          "condition": "!duration || !duration.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 435,
          "condition": "singleSessionPrice === undefined || singleSessionPrice < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 483,
          "condition": "guestInfo.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 489,
          "condition": "guestInfo.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 527,
          "condition": "existing",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 555,
          "condition": "!purchase",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 564,
          "condition": "!mongoose.Types.ObjectId.isValid(id)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 569,
          "condition": "!sub",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 575,
          "condition": "!isGuest && !isOwner && !isAdmin",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "purchaseSubscription",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseSubscriptionArgs"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getUserSubscriptions",
          "line": 195,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 216,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAllUserSubscriptions",
          "line": 228,
          "parameters": [
            {
              "name": "options",
              "type": "{\r\n    userId?: string\r\n    subscriptionId?: string\r\n    treatmentId?: string\r\n    status?: string\r\n    search?: string\r\n    page?: number\r\n    limit?: number\r\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 262,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 270,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useSubscription",
          "line": 288,
          "parameters": [
            {
              "name": "userSubscriptionId",
              "type": "string"
            },
            {
              "name": "quantity",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "cancelSubscription",
          "line": 320,
          "parameters": [
            {
              "name": "userSubscriptionId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteUserSubscription",
          "line": 344,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "purchaseGuestSubscription",
          "line": 364,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseSubscriptionArgs & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n}"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 427,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "saveAbandonedSubscriptionPurchase",
          "line": 518,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "formData",
              "type": "{\r\n    guestInfo?: any\r\n    purchaseOptions?: any\r\n    currentStep: number\r\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getAbandonedSubscriptionPurchase",
          "line": 545,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getUserSubscriptionById",
          "line": 560,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { revalidatePath } from \"next/cache\"\r\nimport { getServerSession } from \"next-"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 49,
          "rule": "if (subscriptionResult.status === \"rejected\" || treatmentResult.status === \"rejected\" || paymentMeth"
        },
        {
          "type": "required",
          "line": 52,
          "rule": "{\r\n      logger.error(`[${requestId}] Failed to load required data`, {\r\n        dataLoadTime: `${dat"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "logger.error(`[${requestId}] Failed to load required data`, {\r\n        dataLoadTime: `${dataLoadTime"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "logger.error(`[${requestId}] Failed to load required data`, {\r\n        dataLoadTime: `${dataLoadTime"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "`[${requestId}] Failed to load required data`"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "requestId}] Failed to load required data`"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "}] Failed to load required data`"
        },
        {
          "type": "required",
          "line": 61,
          "rule": "return { success: false, error: \"Failed to load required data\" }"
        },
        {
          "type": "required",
          "line": 61,
          "rule": "{ success: false, error: \"Failed to load required data\" }"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "error: \"Failed to load required data\""
        },
        {
          "type": "required",
          "line": 62,
          "rule": "\"Failed to load required data\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "try {\r\n      const purchaser = await User.findById(sessionData.user.id)\r\n        .select(\"name email"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "{\r\n      const purchaser = await User.findById(sessionData.user.id)\r\n        .select(\"name email pho"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "const purchaser = await User.findById(sessionData.user.id)\r\n        .select(\"name email phone notifi"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "const purchaser = await User.findById(sessionData.user.id)\r\n        .select(\"name email phone notifi"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "purchaser = await User.findById(sessionData.user.id)\r\n        .select(\"name email phone notification"
        },
        {
          "type": "email",
          "line": 144,
          "rule": "await User.findById(sessionData.user.id)\r\n        .select(\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 144,
          "rule": "User.findById(sessionData.user.id)\r\n        .select(\"name email phone notificationPreferences\")\r\n   "
        },
        {
          "type": "email",
          "line": 144,
          "rule": "User.findById(sessionData.user.id)\r\n        .select(\"name email phone notificationPreferences\")\r\n   "
        },
        {
          "type": "email",
          "line": 144,
          "rule": "User.findById(sessionData.user.id)\r\n        .select(\"name email phone notificationPreferences\")"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "\"name email phone notificationPreferences\""
        },
        {
          "type": "email",
          "line": 146,
          "rule": "if (purchaser) {\r\n        const lang = purchaser.notificationPreferences?.language || \"he\"\r\n        "
        },
        {
          "type": "email",
          "line": 147,
          "rule": "{\r\n        const lang = purchaser.notificationPreferences?.language || \"he\"\r\n        const methods ="
        },
        {
          "type": "email",
          "line": 148,
          "rule": "const methods = purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 148,
          "rule": "const methods = purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 148,
          "rule": "methods = purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "purchaser.notificationPreferences?.methods || [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 159,
          "rule": "if (methods.includes(\"email\") && purchaser.email) {\r\n          await notificationManager.sendNotific"
        },
        {
          "type": "email",
          "line": 159,
          "rule": "methods.includes(\"email\") && purchaser.email"
        },
        {
          "type": "email",
          "line": 159,
          "rule": "methods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 160,
          "rule": "purchaser.email"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "{\r\n          await notificationManager.sendNotification(\r\n            { type: \"email\", value: purcha"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"email\", value: purchaser.email, na"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"email\", value: purchaser.email, na"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "notificationManager.sendNotification(\r\n            { type: \"email\", value: purchaser.email, name: pu"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "{ type: \"email\", value: purchaser.email, name: purchaser.name, language: lang as any }"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 162,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 162,
          "rule": "value: purchaser.email"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "purchaser.email"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 164,
          "rule": "if (methods.includes(\"sms\") && purchaser.phone) {\r\n          await notificationManager.sendNotificat"
        },
        {
          "type": "phone",
          "line": 165,
          "rule": "methods.includes(\"sms\") && purchaser.phone"
        },
        {
          "type": "phone",
          "line": 165,
          "rule": "purchaser.phone"
        },
        {
          "type": "phone",
          "line": 165,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 165,
          "rule": "{\r\n          await notificationManager.sendNotification(\r\n            { type: \"phone\", value: purcha"
        },
        {
          "type": "phone",
          "line": 166,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"phone\", value: purchaser.phone, la"
        },
        {
          "type": "phone",
          "line": 166,
          "rule": "await notificationManager.sendNotification(\r\n            { type: \"phone\", value: purchaser.phone, la"
        },
        {
          "type": "phone",
          "line": 166,
          "rule": "notificationManager.sendNotification(\r\n            { type: \"phone\", value: purchaser.phone, language"
        },
        {
          "type": "phone",
          "line": 167,
          "rule": "{ type: \"phone\", value: purchaser.phone, language: lang as any }"
        },
        {
          "type": "phone",
          "line": 167,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 167,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 167,
          "rule": "value: purchaser.phone"
        },
        {
          "type": "phone",
          "line": 167,
          "rule": "purchaser.phone"
        },
        {
          "type": "phone",
          "line": 168,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 172,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 172,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 172,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 173,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 173,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 173,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 244,
          "rule": "if (options.search) {\r\n      const searchRegex = new RegExp(options.search, 'i')\r\n      query.$or = "
        },
        {
          "type": "email",
          "line": 246,
          "rule": "{\r\n      const searchRegex = new RegExp(options.search, 'i')\r\n      query.$or = [\r\n        { 'guestI"
        },
        {
          "type": "email",
          "line": 247,
          "rule": "query.$or = [\r\n        { 'guestInfo.name': searchRegex },\r\n        { 'guestInfo.email': searchRegex "
        },
        {
          "type": "email",
          "line": 247,
          "rule": "query.$or = [\r\n        { 'guestInfo.name': searchRegex },\r\n        { 'guestInfo.email': searchRegex "
        },
        {
          "type": "email",
          "line": 247,
          "rule": "[\r\n        { 'guestInfo.name': searchRegex },\r\n        { 'guestInfo.email': searchRegex },\r\n        "
        },
        {
          "type": "email",
          "line": 248,
          "rule": "{ 'guestInfo.email': searchRegex }"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "'guestInfo.email': searchRegex"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "'guestInfo.email'"
        },
        {
          "type": "phone",
          "line": 249,
          "rule": "{ 'guestInfo.phone': searchRegex }"
        },
        {
          "type": "phone",
          "line": 249,
          "rule": "'guestInfo.phone': searchRegex"
        },
        {
          "type": "phone",
          "line": 249,
          "rule": "'guestInfo.phone'"
        },
        {
          "type": "email",
          "line": 252,
          "rule": "const userSubscriptions = await UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email "
        },
        {
          "type": "email",
          "line": 252,
          "rule": "const userSubscriptions = await UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email "
        },
        {
          "type": "email",
          "line": 253,
          "rule": "userSubscriptions = await UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\""
        },
        {
          "type": "email",
          "line": 253,
          "rule": "await UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\""
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate(\"subscr"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")\r\n      .populate"
        },
        {
          "type": "email",
          "line": 253,
          "rule": "UserSubscription.find(query)\r\n      .populate(\"userId\", \"name email phone\")"
        },
        {
          "type": "email",
          "line": 254,
          "rule": "\"name email phone\""
        },
        {
          "type": "general",
          "line": 311,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 311,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 311,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 312,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 312,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 312,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 336,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 336,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 336,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 337,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 337,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 337,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 353,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 353,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 353,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 355,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 355,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions\")"
        },
        {
          "type": "general",
          "line": 355,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 365,
          "rule": "{\r\n  subscriptionId,\r\n  treatmentId,\r\n  paymentMethodId,\r\n  selectedDurationId,\r\n  guestInfo,\r\n}: Pu"
        },
        {
          "type": "email",
          "line": 367,
          "rule": "PurchaseSubscriptionArgs & {\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string"
        },
        {
          "type": "email",
          "line": 367,
          "rule": "{\r\n  guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }\r\n}"
        },
        {
          "type": "email",
          "line": 367,
          "rule": "guestInfo: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 368,
          "rule": "{\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 368,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 368,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 368,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 368,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 372,
          "rule": "logger.info(`[${requestId}] Starting guest subscription purchase`, {\r\n      subscriptionId,\r\n      t"
        },
        {
          "type": "email",
          "line": 372,
          "rule": "logger.info(`[${requestId}] Starting guest subscription purchase`, {\r\n      subscriptionId,\r\n      t"
        },
        {
          "type": "email",
          "line": 373,
          "rule": "{\r\n      subscriptionId,\r\n      treatmentId,\r\n      hasSelectedDuration: !!selectedDurationId,\r\n    "
        },
        {
          "type": "email",
          "line": 375,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 376,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 376,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 379,
          "rule": "logger.info(`[${requestId}] Database connected`, { \r\n      dbConnectTime: `${dbConnectTime}ms`,\r\n   "
        },
        {
          "type": "email",
          "line": 379,
          "rule": "logger.info(`[${requestId}] Database connected`, { \r\n      dbConnectTime: `${dbConnectTime}ms`,\r\n   "
        },
        {
          "type": "email",
          "line": 380,
          "rule": "{ \r\n      dbConnectTime: `${dbConnectTime}ms`,\r\n      guestEmail: guestInfo.email\r\n    }"
        },
        {
          "type": "email",
          "line": 381,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 381,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 381,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 388,
          "rule": "if (subscriptionResult.status === \"rejected\" || treatmentResult.status === \"rejected\") {\r\n      logg"
        },
        {
          "type": "required",
          "line": 390,
          "rule": "{\r\n      logger.error(`[${requestId}] Failed to load required data`, {\r\n        dataLoadTime: `${dat"
        },
        {
          "type": "required",
          "line": 391,
          "rule": "logger.error(`[${requestId}] Failed to load required data`, {\r\n        dataLoadTime: `${dataLoadTime"
        },
        {
          "type": "required",
          "line": 391,
          "rule": "logger.error(`[${requestId}] Failed to load required data`, {\r\n        dataLoadTime: `${dataLoadTime"
        },
        {
          "type": "required",
          "line": 391,
          "rule": "`[${requestId}] Failed to load required data`"
        },
        {
          "type": "required",
          "line": 391,
          "rule": "requestId}] Failed to load required data`"
        },
        {
          "type": "required",
          "line": 391,
          "rule": "}] Failed to load required data`"
        },
        {
          "type": "required",
          "line": 397,
          "rule": "return { success: false, error: \"Failed to load required data\" }"
        },
        {
          "type": "required",
          "line": 397,
          "rule": "{ success: false, error: \"Failed to load required data\" }"
        },
        {
          "type": "required",
          "line": 398,
          "rule": "error: \"Failed to load required data\""
        },
        {
          "type": "required",
          "line": 398,
          "rule": "\"Failed to load required data\""
        },
        {
          "type": "email",
          "line": 468,
          "rule": "guestInfo: {\r\n        name: guestInfo.name,\r\n        email: guestInfo.email,\r\n        phone: guestIn"
        },
        {
          "type": "email",
          "line": 470,
          "rule": "{\r\n        name: guestInfo.name,\r\n        email: guestInfo.email,\r\n        phone: guestInfo.phone,\r\n"
        },
        {
          "type": "email",
          "line": 470,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 470,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 470,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 471,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 471,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 471,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 471,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 471,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 474,
          "rule": "logger.info(`[${requestId}] Guest subscription created successfully`, {\r\n      saveTime: `${saveTime"
        },
        {
          "type": "email",
          "line": 474,
          "rule": "logger.info(`[${requestId}] Guest subscription created successfully`, {\r\n      saveTime: `${saveTime"
        },
        {
          "type": "email",
          "line": 475,
          "rule": "{\r\n      saveTime: `${saveTime}ms`,\r\n      userSubscriptionId: newUserSubscription._id,\r\n      guest"
        },
        {
          "type": "email",
          "line": 477,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 477,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 478,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 483,
          "rule": "if (guestInfo.email) {\r\n        await notificationManager.sendNotification(\r\n          { type: \"emai"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "{\r\n        await notificationManager.sendNotification(\r\n          { type: \"email\", value: guestInfo."
        },
        {
          "type": "email",
          "line": 484,
          "rule": "await notificationManager.sendNotification(\r\n          { type: \"email\", value: guestInfo.email, name"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "await notificationManager.sendNotification(\r\n          { type: \"email\", value: guestInfo.email, name"
        },
        {
          "type": "email",
          "line": 484,
          "rule": "notificationManager.sendNotification(\r\n          { type: \"email\", value: guestInfo.email, name: gues"
        },
        {
          "type": "email",
          "line": 485,
          "rule": "{ type: \"email\", value: guestInfo.email, name: guestInfo.name, language: lang as any }"
        },
        {
          "type": "email",
          "line": 485,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 485,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 486,
          "rule": "value: guestInfo.email"
        },
        {
          "type": "email",
          "line": 486,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 486,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 489,
          "rule": "if (guestInfo.phone) {\r\n        await notificationManager.sendNotification(\r\n          { type: \"phon"
        },
        {
          "type": "phone",
          "line": 489,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 489,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 489,
          "rule": "{\r\n        await notificationManager.sendNotification(\r\n          { type: \"phone\", value: guestInfo."
        },
        {
          "type": "phone",
          "line": 489,
          "rule": "await notificationManager.sendNotification(\r\n          { type: \"phone\", value: guestInfo.phone, lang"
        },
        {
          "type": "phone",
          "line": 489,
          "rule": "await notificationManager.sendNotification(\r\n          { type: \"phone\", value: guestInfo.phone, lang"
        },
        {
          "type": "phone",
          "line": 490,
          "rule": "notificationManager.sendNotification(\r\n          { type: \"phone\", value: guestInfo.phone, language: "
        },
        {
          "type": "phone",
          "line": 490,
          "rule": "{ type: \"phone\", value: guestInfo.phone, language: lang as any }"
        },
        {
          "type": "phone",
          "line": 491,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 491,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 491,
          "rule": "value: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 491,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 491,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 496,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 496,
          "rule": "revalidatePath(\"/dashboard/admin/user-subscriptions\")"
        },
        {
          "type": "general",
          "line": 496,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 500,
          "rule": "{\r\n      totalTime: `${totalTime}ms`,\r\n      userSubscriptionId: newUserSubscription._id,\r\n      gue"
        },
        {
          "type": "email",
          "line": 502,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 502,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 503,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 516,
          "rule": "guestEmail: guestInfo.email"
        },
        {
          "type": "email",
          "line": 516,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 516,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 28,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 143,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 196,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 233,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 290,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 322,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 346,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 372,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 478,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 523,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 548,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 562,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "lines": 1935,
      "complexity": 104,
      "conditionals": [
        {
          "type": "if",
          "line": 130,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 160,
          "condition": "workingHoursData?.fixedHours",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 229,
          "condition": "editingSpecialDateIndex !== null",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 246,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 274,
          "condition": "editingSpecialEventIndex !== null",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 294,
          "condition": "!event",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 306,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 319,
          "condition": "!workingHoursData",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 923,
          "condition": "!isOpen",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getDefaultFixedHours",
          "line": 108,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "WorkingHoursClient",
          "line": 117,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 129,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 160,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 165,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 168,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 177,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 183,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 188,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 193,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 196,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 202,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 207,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 213,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 215,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFixedHoursSubmit",
          "line": 219,
          "parameters": [
            {
              "name": "data",
              "type": "FixedHoursFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleAddOrUpdateSpecialDate",
          "line": 226,
          "parameters": [
            {
              "name": "data",
              "type": "SpecialDateFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleEditSpecialDate",
          "line": 245,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDeleteSpecialDate",
          "line": 251,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleDayActiveChange",
          "line": 257,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            },
            {
              "name": "isActive",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 264,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleAddOrUpdateSpecialEvent",
          "line": 271,
          "parameters": [
            {
              "name": "data",
              "type": "SpecialDateEventFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 279,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 284,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleEditSpecialEvent",
          "line": 292,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 296,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDeleteSpecialEvent",
          "line": 300,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 366,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 382,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 388,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 403,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 426,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 451,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 465,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 480,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 506,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 521,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 533,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 586,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 613,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 624,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 642,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 685,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 709,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 726,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 731,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 748,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 769,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 791,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 817,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 829,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 845,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 878,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 922,
          "parameters": [
            {
              "name": "isOpen",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 960,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 972,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1002,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1012,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1039,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1052,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1066,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1089,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1100,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1111,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1136,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1155,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1210,
          "parameters": [
            {
              "name": "specialDate",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1246,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1256,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1270,
          "parameters": [
            {
              "name": "specialDate",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1289,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1299,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1369,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1382,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1411,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1426,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1434,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1440,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1453,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1455,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1465,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1484,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1511,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1524,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1540,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1550,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1567,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1592,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1603,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1614,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1651,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1670,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1681,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1692,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1717,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1736,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1767,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1790,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            },
            {
              "name": "dateIndex",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1819,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 1828,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 62,
          "rule": "const specialDateFormSchema = z.object({\n  name: z.string().min(1, \"Please enter a name\").max(100, \""
        },
        {
          "type": "required",
          "line": 62,
          "rule": "const specialDateFormSchema = z.object({\n  name: z.string().min(1, \"Please enter a name\").max(100, \""
        },
        {
          "type": "required",
          "line": 62,
          "rule": "specialDateFormSchema = z.object({\n  name: z.string().min(1, \"Please enter a name\").max(100, \"Name i"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "z.object({\n  name: z.string().min(1, \"Please enter a name\").max(100, \"Name is too long (max 100 char"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "{\n  name: z.string().min(1, \"Please enter a name\").max(100, \"Name is too long (max 100 chars)\").defa"
        },
        {
          "type": "required",
          "line": 65,
          "rule": "date: z.date({\n    required_error: \"Please select a date\",\n  })"
        },
        {
          "type": "required",
          "line": 65,
          "rule": "z.date({\n    required_error: \"Please select a date\",\n  })"
        },
        {
          "type": "required",
          "line": 65,
          "rule": "{\n    required_error: \"Please select a date\",\n  }"
        },
        {
          "type": "required",
          "line": 65,
          "rule": "required_error: \"Please select a date\""
        },
        {
          "type": "required",
          "line": 65,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "dates: z.array(z.date()).min(1, \"At least one date is required\")"
        },
        {
          "type": "required",
          "line": 88,
          "rule": "z.array(z.date()).min(1, \"At least one date is required\")"
        },
        {
          "type": "required",
          "line": 88,
          "rule": "\"At least one date is required\""
        }
      ],
      "errorHandling": [
        {
          "line": 220,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 227,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 251,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 272,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 301,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "lines": 666,
      "complexity": 102,
      "conditionals": [
        {
          "type": "if",
          "line": 40,
          "condition": "populatedTreatment?.pricingType === \"duration_based\" && selectedDurationId && populatedTreatment.durations",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 48,
          "cases": 9,
          "expression": "statusKey"
        },
        {
          "type": "if",
          "line": 104,
          "condition": "!preferenceKey",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 109,
          "condition": "source === \"subscription_redemption\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 111,
          "condition": "source === \"gift_voucher_redemption\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 116,
          "condition": "priceDetails.redeemedUserSubscriptionId?.subscriptionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 122,
          "condition": "priceDetails.appliedGiftVoucherId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 133,
          "condition": "!durationNameForVoucher &&\n        voucher.voucherType === \"treatment\" &&\n        treatmentForVoucher?.pricingType === \"duration_based\" &&\n        voucher.selectedDurationId &&\n        treatmentForVou",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 141,
          "condition": "durationDetail",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 167,
          "cases": 6,
          "expression": "addressType"
        },
        {
          "type": "if",
          "line": 175,
          "condition": "priceDetails.isFullyCoveredByVoucherOrSubscription || priceDetails.finalAmount === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 178,
          "condition": "paymentDetails.paymentMethodId",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "BookingDetailsView",
          "line": 25,
          "parameters": [
            {
              "name": "unknown",
              "type": "BookingDetailsViewProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "d",
              "type": "ITreatmentDuration"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getBookingStatusInfo",
          "line": 47,
          "parameters": [
            {
              "name": "statusKey",
              "type": "PopulatedBooking[\"status\"]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPaymentStatusText",
          "line": 100,
          "parameters": [
            {
              "name": "statusKey",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getGenderPreferenceText",
          "line": 104,
          "parameters": [
            {
              "name": "preferenceKey",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 109,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 116,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 139,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderDetailItem",
          "line": 154,
          "parameters": [
            {
              "name": "labelKey",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string | number | null"
            },
            {
              "name": "icon",
              "type": "React.ReactNode"
            },
            {
              "name": "valueClassName",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAddressIcon",
          "line": 166,
          "parameters": [
            {
              "name": "addressType",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 494,
          "parameters": [
            {
              "name": "surcharge",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 590,
          "parameters": [
            {
              "name": "entry",
              "type": "IGiftVoucherUsageHistory"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "lines": 852,
      "complexity": 101,
      "conditionals": [
        {
          "type": "if",
          "line": 56,
          "condition": "!minutes",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "hours > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "mins > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "hours > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "isGift",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 123,
          "condition": "defaultPmId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 126,
          "condition": "session?.user?.id && currentStep !== \"complete\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 143,
          "condition": "selectedCategory === \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 152,
          "condition": "voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 153,
          "condition": "typeof monetaryValue === \"number\" && monetaryValue >= 150",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 155,
          "condition": "voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 156,
          "condition": "selectedTreatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 157,
          "condition": "selectedDuration && typeof selectedDuration.price === \"number\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 159,
          "condition": "(!selectedTreatment.durations || selectedTreatment.durations.length === 0) &&\r\n          typeof selectedTreatment.fixedPrice === \"number\" &&\r\n          selectedTreatment.fixedPrice > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 168,
          "condition": "treatmentId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 175,
          "condition": "selectedDurationId && selectedTreatment",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 179,
          "condition": "!selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 188,
          "condition": "voucherType === \"treatment\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 194,
          "condition": "result.success && result.voucherId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 196,
          "condition": "isGift",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 199,
          "condition": "pmResult.success && pmResult.paymentMethods",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 203,
          "condition": "defaultPm",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 217,
          "condition": "pmResult.success && pmResult.paymentMethods",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 222,
          "condition": "defaultPm",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 230,
          "condition": "paymentResult.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 231,
          "condition": "isGift && savedGiftDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 233,
          "condition": "savedGiftDetails.sendOption === \"scheduled\" && savedGiftDetails.sendDate && savedGiftDetails.sendTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 248,
          "condition": "!giftResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 265,
          "condition": "pmResult.success && pmResult.paymentMethods",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 269,
          "condition": "newDefaultPm",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 273,
          "condition": "currentIndex < steps.length - 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 278,
          "condition": "currentIndex > 0",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 281,
          "cases": 4,
          "expression": "currentStep"
        },
        {
          "type": "if",
          "line": 282,
          "condition": "voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 284,
          "condition": "voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 285,
          "condition": "!treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 286,
          "condition": "selectedTreatment?.durations?.length > 0 && !selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 296,
          "condition": "purchaseComplete",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatMinutesToDurationString",
          "line": 55,
          "parameters": [
            {
              "name": "minutes",
              "type": "number"
            },
            {
              "name": "t",
              "type": "Function"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PurchaseGiftVoucherClient",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseGiftVoucherClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 107,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "save",
          "line": 125,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 139,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 140,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 143,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 145,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 151,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 167,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 169,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 177,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 182,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleInitialSubmit",
          "line": 185,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 202,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleGiftDetailsSubmit",
          "line": 215,
          "parameters": [
            {
              "name": "data",
              "type": "GiftDetailsFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 221,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePaymentSubmit",
          "line": 225,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handlePaymentMethodAdded",
          "line": 263,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 268,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleNextStep",
          "line": 271,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 272,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePrevStep",
          "line": 276,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 277,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 281,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 306,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 309,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 334,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 341,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 365,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 388,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 395,
          "parameters": [
            {
              "name": "category",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 409,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 420,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 440,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 451,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 465,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 517,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 551,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 556,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 564,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 576,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 594,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 603,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 611,
          "parameters": [
            {
              "name": "time",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 678,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 44,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 45,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 518,
          "rule": "(\r\n                        <PhoneInput\r\n                          id=\"recipientPhone\"\r\n             "
        },
        {
          "type": "phone",
          "line": 518,
          "rule": "<PhoneInput\r\n                          id=\"recipientPhone\"\r\n                          name={field.na"
        },
        {
          "type": "phone",
          "line": 518,
          "rule": "id=\"recipientPhone\"\r\n                          name={field.name}\r\n                          placehol"
        },
        {
          "type": "phone",
          "line": 520,
          "rule": "placeholder={t(\"purchaseGiftVoucher.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 521,
          "rule": "{t(\"purchaseGiftVoucher.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 521,
          "rule": "t(\"purchaseGiftVoucher.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 521,
          "rule": "\"purchaseGiftVoucher.phonePlaceholder\""
        }
      ],
      "errorHandling": [
        {
          "line": 186,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 226,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "actions\\working-hours-actions.ts",
      "lines": 556,
      "complexity": 87,
      "conditionals": [
        {
          "type": "if",
          "line": 11,
          "condition": "!settings",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "settings.fixedHours",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 57,
          "condition": "!fixedHours || fixedHours.length !== 7",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "!dayExists",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "!settings",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 102,
          "condition": "typeof date.date === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 104,
          "condition": "date.date.includes(\"T\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 112,
          "condition": "isNaN(processedDate.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 129,
          "condition": "!settings",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 165,
          "condition": "typeof dateStr === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 166,
          "condition": "dateStr.includes(\"T\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 171,
          "condition": "isNaN(processedDate.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 196,
          "condition": "!settings",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 226,
          "condition": "!settings",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 229,
          "condition": "index < 0 || index >= settings.specialDates.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 250,
          "condition": "!settings",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 254,
          "condition": "!settings.specialDateEvents || index < 0 || index >= settings.specialDateEvents.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 278,
          "condition": "!data.fixedHours || data.fixedHours.length !== 7",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 287,
          "condition": "!dayExists",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 295,
          "condition": "typeof date.date === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 297,
          "condition": "date.date.includes(\"T\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 305,
          "condition": "isNaN(processedDate.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 327,
          "condition": "typeof dateStr === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 328,
          "condition": "dateStr.includes(\"T\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 333,
          "condition": "isNaN(processedDate.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 383,
          "condition": "!settings",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getWorkingHoursSettings",
          "line": 5,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateFixedHours",
          "line": 51,
          "parameters": [
            {
              "name": "fixedHours",
              "type": "any[]"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "day",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "fh",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateSpecialDates",
          "line": 93,
          "parameters": [
            {
              "name": "specialDates",
              "type": "any[]"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 131,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateSpecialDateEvents",
          "line": 153,
          "parameters": [
            {
              "name": "specialDateEvents",
              "type": "any[]"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 164,
          "parameters": [
            {
              "name": "dateStr",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 197,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "deleteSpecialDate",
          "line": 219,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteSpecialDateEvent",
          "line": 244,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateWorkingHoursSettings",
          "line": 270,
          "parameters": [
            {
              "name": "data",
              "type": "{\n  fixedHours: any[]\n  specialDates: any[]\n  specialDateEvents?: any[]\n}"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 286,
          "parameters": [
            {
              "name": "day",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 293,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 323,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 326,
          "parameters": [
            {
              "name": "dateStr",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 359,
          "parameters": [
            {
              "name": "fh",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport dbConnect from \"@/lib/db/mongoose\"\n"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 86,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 86,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 86,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 211,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 211,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 211,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 237,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 237,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 237,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 263,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 263,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 263,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 389,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 389,
          "rule": "revalidatePath(\"/dashboard/admin/working-hours\")"
        },
        {
          "type": "general",
          "line": 389,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 8,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 56,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 96,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 157,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 223,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 247,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 275,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "lines": 614,
      "complexity": 83,
      "conditionals": [
        {
          "type": "if",
          "line": 52,
          "condition": "result.success && result.data",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 73,
          "condition": "result.success && result.data",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 100,
          "condition": "amount === undefined || amount === null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "isNaN(numericAmount)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 109,
          "condition": "userType === 'guest'",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 358,
          "condition": "currentPage > 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 368,
          "condition": "!showPage",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 369,
          "condition": "page === currentPage - 3 || page === currentPage + 3",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 391,
          "condition": "currentPage < totalPages",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "CustomersClient",
          "line": 32,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "loadCustomers",
          "line": 49,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "search",
              "type": "any"
            },
            {
              "name": "userType",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "loadCustomerTransactions",
          "line": 69,
          "parameters": [
            {
              "name": "customerId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 90,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePageChange",
          "line": 92,
          "parameters": [
            {
              "name": "page",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 94,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleCustomerView",
          "line": 96,
          "parameters": [
            {
              "name": "customer",
              "type": "CustomerSummary"
            }
          ],
          "isAsync": true
        },
        {
          "name": "formatCurrency",
          "line": 99,
          "parameters": [
            {
              "name": "amount",
              "type": "number | undefined | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 106,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getUserTypeBadge",
          "line": 108,
          "parameters": [
            {
              "name": "userType",
              "type": "'guest' | 'member'"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 124,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 130,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 196,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 200,
          "parameters": [
            {
              "name": "value",
              "type": "'all' | 'guests' | 'members'"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 250,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 253,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "cellIndex",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 273,
          "parameters": [
            {
              "name": "customer",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 342,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 357,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 364,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 380,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 390,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 400,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 427,
          "rule": "<div>\r\n                      <p className=\"text-sm text-muted-foreground\">{t('customers.email') || '"
        },
        {
          "type": "email",
          "line": 428,
          "rule": "<p className=\"text-sm text-muted-foreground\">{t('customers.email') || 'אימייל'}:</p>"
        },
        {
          "type": "email",
          "line": 429,
          "rule": "{t('customers.email') || 'אימייל'}"
        },
        {
          "type": "email",
          "line": 429,
          "rule": "t('customers.email') || 'אימייל'"
        },
        {
          "type": "email",
          "line": 429,
          "rule": "t('customers.email')"
        },
        {
          "type": "email",
          "line": 429,
          "rule": "'customers.email'"
        },
        {
          "type": "phone",
          "line": 432,
          "rule": "{selectedCustomer.customerPhone && (\r\n                      <div>\r\n                        <p classN"
        },
        {
          "type": "phone",
          "line": 432,
          "rule": "selectedCustomer.customerPhone && (\r\n                      <div>\r\n                        <p classNa"
        },
        {
          "type": "phone",
          "line": 433,
          "rule": "(\r\n                      <div>\r\n                        <p className=\"text-sm text-muted-foreground\""
        },
        {
          "type": "phone",
          "line": 433,
          "rule": "<div>\r\n                        <p className=\"text-sm text-muted-foreground\">{t('customers.phone') ||"
        },
        {
          "type": "phone",
          "line": 434,
          "rule": "<p className=\"text-sm text-muted-foreground\">{t('customers.phone') || 'טלפון'}:</p>"
        },
        {
          "type": "phone",
          "line": 435,
          "rule": "{t('customers.phone') || 'טלפון'}"
        },
        {
          "type": "phone",
          "line": 435,
          "rule": "t('customers.phone') || 'טלפון'"
        },
        {
          "type": "phone",
          "line": 435,
          "rule": "t('customers.phone')"
        },
        {
          "type": "phone",
          "line": 435,
          "rule": "'customers.phone'"
        }
      ],
      "errorHandling": [
        {
          "line": 50,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 70,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\common\\purchase\\purchase-filters.tsx",
      "lines": 421,
      "complexity": 81,
      "conditionals": [],
      "functions": [
        {
          "name": "PurchaseFiltersComponent",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseFiltersProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleTypeChange",
          "line": 53,
          "parameters": [
            {
              "name": "type",
              "type": "TransactionType"
            },
            {
              "name": "checked",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleStatusChange",
          "line": 59,
          "parameters": [
            {
              "name": "status",
              "type": "TransactionStatus"
            },
            {
              "name": "checked",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 90,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 115,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [
            {
              "name": "type",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 133,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [
            {
              "name": "status",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 154,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 165,
          "parameters": [
            {
              "name": "status",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 172,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 206,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 208,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 235,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 236,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 259,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 271,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 284,
          "parameters": [
            {
              "name": "status",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 291,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 328,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 331,
          "parameters": [
            {
              "name": "type",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 335,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 337,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 340,
          "parameters": [
            {
              "name": "status",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 344,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 347,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "lines": 529,
      "complexity": 80,
      "conditionals": [
        {
          "type": "if",
          "line": 47,
          "condition": "!address",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "address.addressType === \"apartment\" && address.apartmentDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "address.apartmentDetails.floor !== undefined && address.apartmentDetails.floor !== null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 57,
          "condition": "address.apartmentDetails.apartmentNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "address.apartmentDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "address.addressType === \"house\" && address.houseDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 64,
          "condition": "address.houseDetails.doorName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "address.houseDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 70,
          "condition": "address.addressType === \"office\" && address.officeDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "address.officeDetails.buildingName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "address.officeDetails.floor !== undefined && address.officeDetails.floor !== null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "address.officeDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 81,
          "condition": "address.addressType === \"hotel\" && address.hotelDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "address.hotelDetails.hotelName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "address.hotelDetails.roomNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "address.addressType === \"other\" && address.otherDetails?.instructions",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "address.hasPrivateParking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "address.additionalNotes",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 149,
          "condition": "!selectedAddressId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 154,
          "condition": "localAddresses.length > 0 && !form.getValues(\"selectedAddressId\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 157,
          "condition": "defaultAddress",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 171,
          "condition": "watchedDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 174,
          "condition": "previousDate && previousDate.getTime() !== watchedDate.getTime()",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 179,
          "condition": "!previousDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 190,
          "condition": "existingIndex > -1",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 194,
          "condition": "upsertedAddress.isDefault",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "SelectedAddressDetailsDisplay",
          "line": 43,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ address: IAddress; t: (key: string, options?: any) => string }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 115,
          "parameters": [
            {
              "name": "detail",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SchedulingStep",
          "line": 119,
          "parameters": [
            {
              "name": "unknown",
              "type": "SchedulingStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 149,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 151,
          "parameters": [
            {
              "name": "addr",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 154,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 157,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 162,
          "parameters": [
            {
              "name": "values",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 163,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 167,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 171,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleAddressUpserted",
          "line": 186,
          "parameters": [
            {
              "name": "upsertedAddress",
              "type": "IAddress"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 187,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 188,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 197,
          "parameters": [
            {
              "name": "addr",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 200,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onSubmitValidated",
          "line": 205,
          "parameters": [
            {
              "name": "_data",
              "type": "SchedulingFormValues"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 218,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 227,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 233,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 256,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 282,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 305,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 317,
          "parameters": [
            {
              "name": "address",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 339,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 365,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 376,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 392,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 412,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 420,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 437,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 17,
          "rule": "import { SchedulingDetailsSchema, type SchedulingFormValues, getTodayInTimezone } from \"@/lib/valida"
        },
        {
          "type": "general",
          "line": 19,
          "rule": "\"@/lib/validation/booking-schemas\""
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "email",
          "line": 379,
          "rule": "<FormControl>\n                        <Input \n                          type=\"email\" \n              "
        },
        {
          "type": "email",
          "line": 380,
          "rule": "<Input \n                          type=\"email\" \n                          placeholder={t(\"users.fiel"
        },
        {
          "type": "email",
          "line": 380,
          "rule": "type=\"email\" \n                          placeholder={t(\"users.fields.emailPlaceholder\", \"Enter email"
        },
        {
          "type": "email",
          "line": 380,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 381,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 381,
          "rule": "placeholder={t(\"users.fields.emailPlaceholder\", \"Enter email address\")}"
        },
        {
          "type": "email",
          "line": 382,
          "rule": "{t(\"users.fields.emailPlaceholder\", \"Enter email address\")}"
        },
        {
          "type": "email",
          "line": 382,
          "rule": "t(\"users.fields.emailPlaceholder\", \"Enter email address\")"
        },
        {
          "type": "email",
          "line": 382,
          "rule": "\"users.fields.emailPlaceholder\""
        },
        {
          "type": "email",
          "line": 383,
          "rule": "\"Enter email address\""
        },
        {
          "type": "phone",
          "line": 397,
          "rule": "<PhoneInput\n                            id=\"recipientPhone\"\n                            name={field."
        },
        {
          "type": "phone",
          "line": 397,
          "rule": "id=\"recipientPhone\"\n                            name={field.name}\n                            placeh"
        },
        {
          "type": "phone",
          "line": 399,
          "rule": "placeholder={t(\"users.fields.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 400,
          "rule": "{t(\"users.fields.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 400,
          "rule": "t(\"users.fields.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 400,
          "rule": "\"users.fields.phonePlaceholder\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "lines": 474,
      "complexity": 79,
      "conditionals": [
        {
          "type": "if",
          "line": 61,
          "condition": "!selectedCategory",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "currentSource === \"new_purchase\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 92,
          "condition": "bookingOptions.source === \"subscription_redemption\" && form.getValues(\"selectedUserSubscriptionId\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "sub && sub.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 107,
          "condition": "sub.selectedDurationId || sub.selectedDurationDetails?._id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 117,
          "condition": "formVoucherId && bookingOptions.source === \"gift_voucher_redemption\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 122,
          "condition": "voucher?.voucherType === \"treatment\" && voucher.treatmentId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 127,
          "condition": "treatmentFromVoucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 134,
          "condition": "voucher.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 148,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && !data.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 186,
          "condition": "sub.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 189,
          "condition": "(sub.treatmentId as ITreatment).pricingType === \"duration_based\" &&\n                          sub.selectedDurationDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 233,
          "condition": "voucher.voucherType === \"treatment\" && voucher.treatmentId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 240,
          "condition": "treatmentDetails",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 243,
          "condition": "treatmentDetails.pricingType === \"duration_based\" && voucher.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 250,
          "condition": "durationDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 258,
          "condition": "voucher.voucherType === \"monetary\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "TreatmentSelectionStep",
          "line": 31,
          "parameters": [
            {
              "name": "unknown",
              "type": "TreatmentSelectionStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "values",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 75,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 116,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onSubmitValidated",
          "line": 144,
          "parameters": [
            {
              "name": "data",
              "type": "TreatmentSelectionFormValues"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 154,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 155,
          "parameters": [
            {
              "name": "voucher",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 170,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 181,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 208,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 214,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 227,
          "parameters": [
            {
              "name": "voucher",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 237,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 247,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 274,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 285,
          "parameters": [
            {
              "name": "cat",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 295,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 300,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 309,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 358,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 372,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 373,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 430,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 20,
          "rule": "import { TreatmentSelectionSchema, type TreatmentSelectionFormValues } from \"@/lib/validation/bookin"
        },
        {
          "type": "general",
          "line": 21,
          "rule": "\"@/lib/validation/booking-schemas\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\layout\\sidebar.tsx",
      "lines": 720,
      "complexity": 78,
      "conditionals": [
        {
          "type": "if",
          "line": 42,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "!roles || roles.length <= 1",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 46,
          "cases": 5,
          "expression": "role"
        },
        {
          "type": "switch",
          "line": 54,
          "cases": 5,
          "expression": "role"
        },
        {
          "type": "if",
          "line": 62,
          "condition": "role === activeRole",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "result.success || result.activeRole",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 81,
          "condition": "isCollapsed",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 161,
          "condition": "session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 162,
          "condition": "session.user.treatmentPreferences",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 164,
          "condition": "session.user.notificationPreferences",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 190,
          "condition": "name",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 193,
          "condition": "email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 258,
          "condition": "session?.user?.activeRole !== \"member\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 474,
          "condition": "!quickActions || quickActions.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 495,
          "condition": "isMobile",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 544,
          "condition": "isMobile",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 547,
          "condition": "isCollapsed && !isMobile",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "RoleSwitcher",
          "line": 37,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ isCollapsed?: boolean }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getRoleIcon",
          "line": 45,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getRoleLabel",
          "line": 54,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleRoleSwitch",
          "line": 62,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "role",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 99,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [
            {
              "name": "role",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "DashboardSidebar",
          "line": 138,
          "parameters": [
            {
              "name": "unknown",
              "type": "SidebarProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 183,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleResize",
          "line": 184,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 186,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getUserInitials",
          "line": 188,
          "parameters": [
            {
              "name": "name",
              "type": "string | null | undefined"
            },
            {
              "name": "email",
              "type": "string | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 191,
          "parameters": [
            {
              "name": "n",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSignOut",
          "line": 195,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "navigateTo",
          "line": 196,
          "parameters": [
            {
              "name": "path",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getMenuItems",
          "line": 198,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 251,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getMemberQuickActions",
          "line": 257,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderDesktopHeader",
          "line": 272,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 287,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderDesktopUserSectionWithDropdown",
          "line": 301,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 351,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 360,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 370,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 380,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderMobileUserSectionWithDropdown",
          "line": 402,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 431,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 434,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 439,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 443,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 445,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 448,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 460,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderMemberQuickActions",
          "line": 472,
          "parameters": [
            {
              "name": "isMobile",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 478,
          "parameters": [
            {
              "name": "action",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 494,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderMenuItems",
          "line": 507,
          "parameters": [
            {
              "name": "items",
              "type": "ReturnType<typeof getMenuItems>"
            },
            {
              "name": "isMobile",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 511,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 543,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 585,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 589,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 188,
          "rule": "const getUserInitials = (name: string | null | undefined, email: string | null | undefined) => {\r\n  "
        },
        {
          "type": "email",
          "line": 188,
          "rule": "const getUserInitials = (name: string | null | undefined, email: string | null | undefined) => {\r\n  "
        },
        {
          "type": "email",
          "line": 188,
          "rule": "getUserInitials = (name: string | null | undefined, email: string | null | undefined) => {\r\n    if ("
        },
        {
          "type": "email",
          "line": 188,
          "rule": "(name: string | null | undefined, email: string | null | undefined) => {\r\n    if (name)\r\n      retur"
        },
        {
          "type": "email",
          "line": 189,
          "rule": "email: string | null | undefined"
        },
        {
          "type": "email",
          "line": 189,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 190,
          "rule": "{\r\n    if (name)\r\n      return name\r\n        .split(\" \")\r\n        .map((n) => n[0])\r\n        .join(\""
        },
        {
          "type": "email",
          "line": 193,
          "rule": "if (email) return email.slice(0, 2).toUpperCase()"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "return email.slice(0, 2).toUpperCase()"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "email.slice(0, 2).toUpperCase()"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "email.slice(0, 2).toUpperCase"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "email.slice(0, 2)"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "email.slice"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 316,
          "rule": "<AvatarFallback className=\"bg-gradient-to-br from-turquoise-400 to-turquoise-600 text-white font-sem"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "{getUserInitials(session?.user?.name, session?.user?.email)}"
        },
        {
          "type": "email",
          "line": 319,
          "rule": "getUserInitials(session?.user?.name, session?.user?.email)"
        },
        {
          "type": "email",
          "line": 320,
          "rule": "session?.user?.email"
        },
        {
          "type": "email",
          "line": 320,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 327,
          "rule": "<p className=\"text-xs text-gray-500 truncate\">{session?.user?.email}</p>"
        },
        {
          "type": "email",
          "line": 328,
          "rule": "{session?.user?.email}"
        },
        {
          "type": "email",
          "line": 328,
          "rule": "session?.user?.email"
        },
        {
          "type": "email",
          "line": 328,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 334,
          "rule": "<AvatarFallback className=\"bg-gradient-to-br from-turquoise-400 to-turquoise-600 text-white font-sem"
        },
        {
          "type": "email",
          "line": 337,
          "rule": "{getUserInitials(session?.user?.name, session?.user?.email)}"
        },
        {
          "type": "email",
          "line": 337,
          "rule": "getUserInitials(session?.user?.name, session?.user?.email)"
        },
        {
          "type": "email",
          "line": 338,
          "rule": "session?.user?.email"
        },
        {
          "type": "email",
          "line": 338,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 412,
          "rule": "<AvatarFallback className=\"bg-turquoise-500 text-white font-semibold text-sm\">\r\n                {get"
        },
        {
          "type": "email",
          "line": 414,
          "rule": "{getUserInitials(session?.user?.name, session?.user?.email)}"
        },
        {
          "type": "email",
          "line": 414,
          "rule": "getUserInitials(session?.user?.name, session?.user?.email)"
        },
        {
          "type": "email",
          "line": 415,
          "rule": "session?.user?.email"
        },
        {
          "type": "email",
          "line": 415,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 421,
          "rule": "<p className=\"text-xs text-gray-500 truncate\">{session?.user?.email}</p>"
        },
        {
          "type": "email",
          "line": 422,
          "rule": "{session?.user?.email}"
        },
        {
          "type": "email",
          "line": 422,
          "rule": "session?.user?.email"
        },
        {
          "type": "email",
          "line": 422,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 64,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "lib\\auth\\auth.ts",
      "lines": 306,
      "complexity": 77,
      "conditionals": [
        {
          "type": "if",
          "line": 25,
          "condition": "password.length < 8",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "!/[A-Z]/.test(password)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 30,
          "condition": "!/[a-z]/.test(password)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 32,
          "condition": "!/[0-9]/.test(password)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 40,
          "condition": "!cleaned.startsWith(\"+\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 41,
          "condition": "cleaned.startsWith(\"0\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 43,
          "condition": "cleaned.length === 9 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 45,
          "condition": "cleaned.length === 10 && cleaned.startsWith(\"972\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 47,
          "condition": "cleaned.length === 10 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 50,
          "condition": "cleaned.startsWith(\"+9720\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 52,
          "condition": "cleaned.startsWith(\"+972\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "!nationalNumber.startsWith(\"5\") || nationalNumber.length !== 9",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "!roles || roles.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "roles.includes(\"partner\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "roles.includes(\"member\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "!credentials?.email || !credentials?.password",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 81,
          "condition": "validateEmail(identifier)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 83,
          "condition": "validatePhone(identifier)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 84,
          "condition": "!cleaned.startsWith(\"+\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "cleaned.startsWith(\"0\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 88,
          "condition": "cleaned.length === 9 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 90,
          "condition": "cleaned.length === 10 && cleaned.startsWith(\"972\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 94,
          "condition": "cleaned.startsWith(\"+9720\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 102,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "!user.password",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "!isValid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 124,
          "condition": "!credentials?.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 130,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 147,
          "condition": "user",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 159,
          "condition": "!activeRole || !dbUser?.roles.includes(activeRole)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 161,
          "condition": "dbUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 172,
          "condition": "trigger === \"update\" && session",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 176,
          "condition": "dbUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 178,
          "condition": "session.activeRole",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 180,
          "condition": "!dbUser.roles.includes(activeRole)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 195,
          "condition": "token.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 199,
          "condition": "dbUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 202,
          "condition": "!activeRole || !dbUser.roles.includes(activeRole)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 213,
          "condition": "account",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 216,
          "condition": "session.user && token",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "hashPassword",
          "line": 17,
          "parameters": [
            {
              "name": "password",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "verifyPassword",
          "line": 20,
          "parameters": [
            {
              "name": "password",
              "type": "string"
            },
            {
              "name": "hashedPassword",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "validatePassword",
          "line": 23,
          "parameters": [
            {
              "name": "password",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "validateEmail",
          "line": 35,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "validatePhone",
          "line": 38,
          "parameters": [
            {
              "name": "phone",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getDefaultActiveRole",
          "line": 56,
          "parameters": [
            {
              "name": "roles",
              "type": "string[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "authorize",
          "line": 75,
          "parameters": [
            {
              "name": "credentials",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "authorize",
          "line": 123,
          "parameters": [
            {
              "name": "credentials",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "jwt",
          "line": 145,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "session",
          "line": 215,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "signIn",
          "line": 225,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "error",
          "line": 232,
          "parameters": [
            {
              "name": "code",
              "type": "any"
            },
            {
              "name": "metadata",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "warn",
          "line": 234,
          "parameters": [
            {
              "name": "code",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "debug",
          "line": 236,
          "parameters": [
            {
              "name": "code",
              "type": "any"
            },
            {
              "name": "metadata",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "hasRole",
          "line": 238,
          "parameters": [
            {
              "name": "roles",
              "type": "string[] | undefined"
            },
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 10,
          "rule": "interface CustomUser {\r\n  _id: any\r\n  email: string\r\n  name?: string | null\r\n  image?: string | null"
        },
        {
          "type": "email",
          "line": 12,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 12,
          "rule": "email"
        },
        {
          "type": "general",
          "line": 23,
          "rule": "export function validatePassword(password: string): { isValid: boolean; errors: string[] } {\r\n  cons"
        },
        {
          "type": "general",
          "line": 23,
          "rule": "validatePassword"
        },
        {
          "type": "email",
          "line": 35,
          "rule": "export function validateEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\"
        },
        {
          "type": "general",
          "line": 36,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "{\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n  return emailRegex.test(email)\r\n}"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "emailRegex"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "return emailRegex.test(email)"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailRegex.test(email)"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailRegex.test"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailRegex"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "export function validatePhone(phone: string): boolean {\r\n  let cleaned = phone.replace(/[^\\d+]/g, \"\""
        },
        {
          "type": "general",
          "line": 38,
          "rule": "validatePhone"
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "{\r\n  let cleaned = phone.replace(/[^\\d+]/g, \"\")\r\n  if (!cleaned.startsWith(\"+\")) {\r\n    if (cleaned."
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "let cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "let cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "phone.replace"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "const defaultNotificationPreferences: INotificationPreferences = { methods: [\"email\", \"sms\"], langua"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "const defaultNotificationPreferences: INotificationPreferences = { methods: [\"email\", \"sms\"], langua"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "defaultNotificationPreferences: INotificationPreferences = { methods: [\"email\", \"sms\"], language: \"h"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "{ methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "methods: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 69,
          "rule": "export const authOptions: NextAuthOptions = {\r\n  adapter: MongoDBAdapter(clientPromise),\r\n  provider"
        },
        {
          "type": "email",
          "line": 69,
          "rule": "const authOptions: NextAuthOptions = {\r\n  adapter: MongoDBAdapter(clientPromise),\r\n  providers: [\r\n "
        },
        {
          "type": "email",
          "line": 69,
          "rule": "authOptions: NextAuthOptions = {\r\n  adapter: MongoDBAdapter(clientPromise),\r\n  providers: [\r\n    Cre"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "{\r\n  adapter: MongoDBAdapter(clientPromise),\r\n  providers: [\r\n    CredentialsProvider({\r\n      name:"
        },
        {
          "type": "email",
          "line": 71,
          "rule": "providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        e"
        },
        {
          "type": "email",
          "line": 71,
          "rule": "[\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { lab"
        },
        {
          "type": "email",
          "line": 71,
          "rule": "CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Em"
        },
        {
          "type": "email",
          "line": 71,
          "rule": "{\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" "
        },
        {
          "type": "email",
          "line": 72,
          "rule": "credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Passw"
        },
        {
          "type": "email",
          "line": 72,
          "rule": "{\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \""
        },
        {
          "type": "email",
          "line": 72,
          "rule": "email: { label: \"Email\", type: \"email\" }"
        },
        {
          "type": "email",
          "line": 72,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "{ label: \"Email\", type: \"email\" }"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 73,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 75,
          "rule": "async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n      "
        },
        {
          "type": "email",
          "line": 76,
          "rule": "{\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Missing "
        },
        {
          "type": "email",
          "line": 76,
          "rule": "if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Missing email or pa"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "!credentials?.email || !credentials?.password"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "!credentials?.email"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "credentials?.email"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "{\r\n          throw new Error(\"Missing email or password\")\r\n        }"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "throw new Error(\"Missing email or password\")"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "new Error(\"Missing email or password\")"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "\"Missing email or password\""
        },
        {
          "type": "email",
          "line": 79,
          "rule": "const identifier = credentials.email.toLowerCase().trim()"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "const identifier = credentials.email.toLowerCase().trim()"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "identifier = credentials.email.toLowerCase().trim()"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "credentials.email.toLowerCase().trim()"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "credentials.email.toLowerCase().trim"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "credentials.email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "credentials.email.toLowerCase"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "credentials.email"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "if (validateEmail(identifier)) {\r\n          query = { email: identifier }\r\n        } else if (valida"
        },
        {
          "type": "general",
          "line": 81,
          "rule": "validateEmail(identifier)"
        },
        {
          "type": "general",
          "line": 81,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "{\r\n          query = { email: identifier }\r\n        }"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "query = { email: identifier }"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "query = { email: identifier }"
        },
        {
          "type": "email",
          "line": 82,
          "rule": "{ email: identifier }"
        },
        {
          "type": "email",
          "line": 82,
          "rule": "email: identifier"
        },
        {
          "type": "email",
          "line": 82,
          "rule": "email"
        },
        {
          "type": "general",
          "line": 83,
          "rule": "if (validatePhone(identifier)) {\r\n          let cleaned = identifier.replace(/[^\\d+]/g, \"\")\r\n       "
        },
        {
          "type": "general",
          "line": 83,
          "rule": "validatePhone(identifier)"
        },
        {
          "type": "general",
          "line": 83,
          "rule": "validatePhone"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "query = { phone: cleaned }"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "query = { phone: cleaned }"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "{ phone: cleaned }"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "phone: cleaned"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 97,
          "rule": "{\r\n          throw new Error(\"Invalid email or phone format\")\r\n        }"
        },
        {
          "type": "email",
          "line": 97,
          "rule": "throw new Error(\"Invalid email or phone format\")"
        },
        {
          "type": "email",
          "line": 97,
          "rule": "new Error(\"Invalid email or phone format\")"
        },
        {
          "type": "email",
          "line": 98,
          "rule": "\"Invalid email or phone format\""
        },
        {
          "type": "email",
          "line": 99,
          "rule": "const user = (await User.findOne(query).select(\r\n          \"+password email name image roles treatme"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "const user = (await User.findOne(query).select(\r\n          \"+password email name image roles treatme"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "user = (await User.findOne(query).select(\r\n          \"+password email name image roles treatmentPref"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "(await User.findOne(query).select(\r\n          \"+password email name image roles treatmentPreferences"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "(await User.findOne(query).select(\r\n          \"+password email name image roles treatmentPreferences"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "await User.findOne(query).select(\r\n          \"+password email name image roles treatmentPreferences "
        },
        {
          "type": "email",
          "line": 99,
          "rule": "User.findOne(query).select(\r\n          \"+password email name image roles treatmentPreferences notifi"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "\"+password email name image roles treatmentPreferences notificationPreferences\""
        },
        {
          "type": "email",
          "line": 112,
          "rule": "return {\r\n          id: user._id.toString(),\r\n          email: user.email,\r\n          name: user.nam"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "{\r\n          id: user._id.toString(),\r\n          email: user.email,\r\n          name: user.name,\r\n   "
        },
        {
          "type": "email",
          "line": 113,
          "rule": "email: user.email"
        },
        {
          "type": "email",
          "line": 113,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 113,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 113,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "const user = (await User.findById(credentials.userId).select(\r\n          \"email name image roles tre"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "const user = (await User.findById(credentials.userId).select(\r\n          \"email name image roles tre"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "user = (await User.findById(credentials.userId).select(\r\n          \"email name image roles treatment"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "(await User.findById(credentials.userId).select(\r\n          \"email name image roles treatmentPrefere"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "(await User.findById(credentials.userId).select(\r\n          \"email name image roles treatmentPrefere"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "await User.findById(credentials.userId).select(\r\n          \"email name image roles treatmentPreferen"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "User.findById(credentials.userId).select(\r\n          \"email name image roles treatmentPreferences no"
        },
        {
          "type": "email",
          "line": 128,
          "rule": "\"email name image roles treatmentPreferences notificationPreferences\""
        },
        {
          "type": "email",
          "line": 134,
          "rule": "return {\r\n          id: user._id.toString(),\r\n          email: user.email,\r\n          name: user.nam"
        },
        {
          "type": "email",
          "line": 135,
          "rule": "{\r\n          id: user._id.toString(),\r\n          email: user.email,\r\n          name: user.name,\r\n   "
        },
        {
          "type": "email",
          "line": 135,
          "rule": "email: user.email"
        },
        {
          "type": "email",
          "line": 135,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "lines": 309,
      "complexity": 73,
      "conditionals": [
        {
          "type": "if",
          "line": 20,
          "condition": "!bookingResult?.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "!isValid(dateObj)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 33,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 35,
          "condition": "!isValid(dateObj)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 40,
          "condition": "!isValid(dateObj)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "!bookingTreatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "bookingTreatment.pricingType === \"fixed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "bookingResult?.selectedDurationId && bookingTreatment.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "duration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "hours > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "mins > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "hours > 0",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 66,
          "cases": 4,
          "expression": "bookingResult?.therapistGenderPreference"
        },
        {
          "type": "if",
          "line": 74,
          "condition": "!bookingResult",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestBookingConfirmation",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestBookingConfirmationProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateString",
          "line": 26,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string | undefined | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatTimeString",
          "line": 32,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string | undefined | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatBirthDate",
          "line": 37,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string | undefined | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getTreatmentDurationText",
          "line": 43,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getGenderPreferenceText",
          "line": 66,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "formatPrice",
          "line": 73,
          "parameters": [
            {
              "name": "amount",
              "type": "number"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 164,
          "rule": "<div className=\"flex justify-between\">\r\n                      <span>{t(\"common.email\")}:</span>\r\n   "
        },
        {
          "type": "email",
          "line": 166,
          "rule": "<span>{t(\"common.email\")}:</span>"
        },
        {
          "type": "email",
          "line": 166,
          "rule": "{t(\"common.email\")}"
        },
        {
          "type": "email",
          "line": 166,
          "rule": "t(\"common.email\")"
        },
        {
          "type": "email",
          "line": 166,
          "rule": "\"common.email\""
        },
        {
          "type": "phone",
          "line": 169,
          "rule": "<div className=\"flex justify-between\">\r\n                      <span>{t(\"common.phone\")}:</span>\r\n   "
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "<span>{t(\"common.phone\")}:</span>"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "{t(\"common.phone\")}"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "t(\"common.phone\")"
        },
        {
          "type": "phone",
          "line": 170,
          "rule": "\"common.phone\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "lines": 357,
      "complexity": 73,
      "conditionals": [
        {
          "type": "if",
          "line": 58,
          "condition": "bookingOptions.bookingDate && bookingOptions.selectedTreatmentId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 76,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 93,
          "condition": "!bookingOptions.selectedTreatmentId ||\n      !bookingOptions.bookingDate ||\n      !bookingOptions.bookingTime ||\n      !currentUser.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && !bookingOptions.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 126,
          "condition": "result.success && result.priceDetails",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 140,
          "condition": "currentStep >= 3",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 150,
          "condition": "timeSlots.length > 0 && !bookingOptions.bookingTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 153,
          "condition": "firstAvailableSlot",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 158,
          "condition": "currentStep === TOTAL_STEPS_WITH_PAYMENT - 1 && // Summary step\n      calculatedPrice?.finalAmount === 0 &&\n      calculatedPrice?.isFullyCoveredByVoucherOrSubscription",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 170,
          "condition": "!bookingOptions.selectedTreatmentId ||\n      !bookingOptions.bookingDate ||\n      !bookingOptions.bookingTime ||\n      !calculatedPrice ||\n      !bookingOptions.selectedAddressId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 179,
          "condition": "!skipPaymentUI && calculatedPrice.finalAmount > 0 && !bookingOptions.selectedPaymentMethodId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 226,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "switch",
          "line": 247,
          "cases": 7,
          "expression": "currentStep"
        }
      ],
      "functions": [
        {
          "name": "BookingWizard",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "BookingWizardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "fetchSlots",
          "line": 60,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [
            {
              "name": "gv",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 134,
          "parameters": [
            {
              "name": "issue",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 140,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 150,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 152,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 154,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "nextStep",
          "line": 157,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 165,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "prevStep",
          "line": 167,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 167,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFinalSubmit",
          "line": 169,
          "parameters": [
            {
              "name": "skipPaymentUI",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 238,
          "parameters": [
            {
              "name": "issue",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderStep",
          "line": 244,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 261,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 18,
          "rule": "import type { CreateBookingPayloadType, CalculatePricePayloadType } from \"@/lib/validation/booking-s"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "\"@/lib/validation/booking-schemas\""
        },
        {
          "type": "required",
          "line": 176,
          "rule": "description: t(\"bookings.errors.missingInfoSubmit\") || \"Please fill all required fields.\""
        },
        {
          "type": "required",
          "line": 177,
          "rule": "t(\"bookings.errors.missingInfoSubmit\") || \"Please fill all required fields.\""
        },
        {
          "type": "required",
          "line": 178,
          "rule": "\"Please fill all required fields.\""
        },
        {
          "type": "required",
          "line": 201,
          "rule": "paymentDetails: {\n        paymentMethodId: bookingOptions.selectedPaymentMethodId,\n        paymentSt"
        },
        {
          "type": "required",
          "line": 202,
          "rule": "{\n        paymentMethodId: bookingOptions.selectedPaymentMethodId,\n        paymentStatus: calculated"
        },
        {
          "type": "required",
          "line": 203,
          "rule": "paymentStatus: calculatedPrice.finalAmount === 0 ? \"not_required\" : \"pending\""
        },
        {
          "type": "required",
          "line": 204,
          "rule": "calculatedPrice.finalAmount === 0 ? \"not_required\" : \"pending\""
        },
        {
          "type": "required",
          "line": 204,
          "rule": "\"not_required\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "lines": 746,
      "complexity": 71,
      "conditionals": [
        {
          "type": "if",
          "line": 49,
          "condition": "!canReview",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 58,
          "condition": "error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "hasReview",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 101,
          "condition": "!canCancel",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 185,
          "condition": "actualStatus === \"in_process\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 211,
          "condition": "!notes || notes.trim().length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 212,
          "condition": "!isLong",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 239,
          "cases": 3,
          "expression": "locale"
        },
        {
          "type": "if",
          "line": 266,
          "condition": "treatment?.pricingType === \"duration_based\" && booking.selectedDurationId && treatment.durations",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 272,
          "condition": "selectedDuration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 275,
          "condition": "treatment?.pricingType === \"fixed\" && treatment.defaultDurationMinutes",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 293,
          "cases": 4,
          "expression": "pref"
        },
        {
          "type": "if",
          "line": 348,
          "condition": "isToday",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 350,
          "condition": "isTomorrow",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 352,
          "condition": "!isPast",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 381,
          "condition": "!address",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ReviewAction",
          "line": 27,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 36,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleCreateReview",
          "line": 41,
          "parameters": [
            {
              "name": "e",
              "type": "React.MouseEvent"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleViewReview",
          "line": 44,
          "parameters": [
            {
              "name": "e",
              "type": "React.MouseEvent"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleReviewSuccess",
          "line": 48,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 83,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "BookingActions",
          "line": 86,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ booking: PopulatedBooking; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleCancelBooking",
          "line": 100,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 127,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 133,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "BookingStatusBadge",
          "line": 180,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ status: PopulatedBooking[\"status\"]; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getCustomerDisplayStatus",
          "line": 184,
          "parameters": [
            {
              "name": "actualStatus",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "NotesDisplay",
          "line": 208,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ notes?: string; t: TFunction }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "formatDateIsraeli",
          "line": 233,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatTimeIsraeli",
          "line": 237,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getLocale",
          "line": 238,
          "parameters": [
            {
              "name": "locale",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getBookingColumns",
          "line": 242,
          "parameters": [
            {
              "name": "t",
              "type": "TFunction"
            },
            {
              "name": "locale",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 245,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 246,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 252,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 261,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 263,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 269,
          "parameters": [
            {
              "name": "d",
              "type": "ITreatmentDuration"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 289,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 291,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPreferenceLabel",
          "line": 293,
          "parameters": [
            {
              "name": "pref",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 307,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 310,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 330,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 331,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 337,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 377,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 379,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 435,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 437,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 442,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 444,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 450,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 498,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 500,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 504,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 506,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 102,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\booking\\steps\\guest-info-step.tsx",
      "lines": 650,
      "complexity": 68,
      "conditionals": [
        {
          "type": "if",
          "line": 56,
          "condition": "monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 81,
          "condition": "data.isBookingForSomeoneElse",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "!hideRecipientBirthGender && data.isBookingForSomeoneElse && data.recipientBirthDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "!data.isBookingForSomeoneElse && data.birthDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 141,
          "condition": "!checked",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestInfoStep",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestInfoStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "isAtLeast16YearsOld",
          "line": 51,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 127,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "onSubmit",
          "line": 131,
          "parameters": [
            {
              "name": "data",
              "type": "GuestInfoFormData"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleBookingForSomeoneElseChange",
          "line": 138,
          "parameters": [
            {
              "name": "checked",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "isDateDisabled",
          "line": 149,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 192,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 203,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 214,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 228,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 247,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 292,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 316,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 342,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 354,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 366,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 381,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 399,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 447,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 476,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 487,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 501,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 507,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 513,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 527,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 546,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 555,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 564,
          "parameters": [
            {
              "name": "time",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 16,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 17,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "interface GuestInfo {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  phone: string\r\n  "
        },
        {
          "type": "email",
          "line": 26,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 26,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "z.object({\r\n    firstName: z.string().min(2, { message: t(\"guestInfo.validation.firstNameMin\") }),\r\n"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "z.object({\r\n    firstName: z.string().min(2, { message: t(\"guestInfo.validation.firstNameMin\") }),\r\n"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "z.object({\r\n    firstName: z.string().min(2, { message: t(\"guestInfo.validation.firstNameMin\") }),\r\n"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "z.object({\r\n    firstName: z.string().min(2, { message: t(\"guestInfo.validation.firstNameMin\") }),\r\n"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "z.object({\r\n    firstName: z.string().min(2, { message: t(\"guestInfo.validation.firstNameMin\") }),\r\n"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "{\r\n    firstName: z.string().min(2, { message: t(\"guestInfo.validation.firstNameMin\") }),\r\n    lastN"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "email: z.string().email({ message: t(\"guestInfo.validation.emailInvalid\") })"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "z.string().email({ message: t(\"guestInfo.validation.emailInvalid\") })"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "z.string().email"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 64,
          "rule": "{ message: t(\"guestInfo.validation.emailInvalid\") }"
        },
        {
          "type": "email",
          "line": 64,
          "rule": "message: t(\"guestInfo.validation.emailInvalid\")"
        },
        {
          "type": "email",
          "line": 64,
          "rule": "t(\"guestInfo.validation.emailInvalid\")"
        },
        {
          "type": "email",
          "line": 64,
          "rule": "\"guestInfo.validation.emailInvalid\""
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "phone: z.string().min(10, { message: t(\"guestInfo.validation.phoneMin\") })"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "z.string().min(10, { message: t(\"guestInfo.validation.phoneMin\") })"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "{ message: t(\"guestInfo.validation.phoneMin\") }"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "message: t(\"guestInfo.validation.phoneMin\")"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "t(\"guestInfo.validation.phoneMin\")"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "\"guestInfo.validation.phoneMin\""
        },
        {
          "type": "email",
          "line": 103,
          "rule": "useForm<GuestInfoFormData>({\r\n    resolver: zodResolver(guestInfoSchema),\r\n    defaultValues: {\r\n   "
        },
        {
          "type": "email",
          "line": 103,
          "rule": "{\r\n    resolver: zodResolver(guestInfoSchema),\r\n    defaultValues: {\r\n      firstName: guestInfo.fir"
        },
        {
          "type": "email",
          "line": 104,
          "rule": "defaultValues: {\r\n      firstName: guestInfo.firstName || \"\",\r\n      lastName: guestInfo.lastName ||"
        },
        {
          "type": "email",
          "line": 104,
          "rule": "{\r\n      firstName: guestInfo.firstName || \"\",\r\n      lastName: guestInfo.lastName || \"\",\r\n      ema"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "email: guestInfo.email || \"\""
        },
        {
          "type": "email",
          "line": 106,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "guestInfo.email || \"\""
        },
        {
          "type": "email",
          "line": 107,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "phone: guestInfo.phone || \"\""
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "guestInfo.phone || \"\""
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 179,
          "rule": "{/* Booker Details (Always required) */}"
        },
        {
          "type": "email",
          "line": 212,
          "rule": "<FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                re"
        },
        {
          "type": "email",
          "line": 212,
          "rule": "control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n    "
        },
        {
          "type": "email",
          "line": 213,
          "rule": "name=\"email\""
        },
        {
          "type": "email",
          "line": 213,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 216,
          "rule": "<FormLabel className={`flex items-center gap-2 ${dir === \"rtl\" ? \"flex-row-reverse\" : \"\"}`}>\r\n      "
        },
        {
          "type": "email",
          "line": 219,
          "rule": "{t(\"guestInfo.email\")}"
        },
        {
          "type": "email",
          "line": 219,
          "rule": "t(\"guestInfo.email\")"
        },
        {
          "type": "email",
          "line": 219,
          "rule": "\"guestInfo.email\""
        },
        {
          "type": "email",
          "line": 220,
          "rule": "<FormControl>\r\n                      <Input type=\"email\" placeholder={t(\"guestInfo.emailPlaceholder\""
        },
        {
          "type": "email",
          "line": 221,
          "rule": "<Input type=\"email\" placeholder={t(\"guestInfo.emailPlaceholder\")} {...field} />"
        },
        {
          "type": "email",
          "line": 221,
          "rule": "type=\"email\" placeholder={t(\"guestInfo.emailPlaceholder\")} {...field}"
        },
        {
          "type": "email",
          "line": 221,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 221,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 222,
          "rule": "placeholder={t(\"guestInfo.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 222,
          "rule": "{t(\"guestInfo.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 222,
          "rule": "t(\"guestInfo.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 222,
          "rule": "\"guestInfo.emailPlaceholder\""
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "<FormField\r\n                control={form.control}\r\n                name=\"phone\"\r\n                re"
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "control={form.control}\r\n                name=\"phone\"\r\n                render={({ field }) => (\r\n    "
        },
        {
          "type": "phone",
          "line": 227,
          "rule": "name=\"phone\""
        },
        {
          "type": "phone",
          "line": 227,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "<FormLabel className={`flex items-center gap-2 ${dir === \"rtl\" ? \"flex-row-reverse\" : \"\"}`}>\r\n      "
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "{t(\"guestInfo.phone\")}"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "t(\"guestInfo.phone\")"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "\"guestInfo.phone\""
        },
        {
          "type": "phone",
          "line": 234,
          "rule": "<FormControl>\r\n                      <PhoneInput {...field} placeholder={t(\"guestInfo.phonePlacehold"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "<PhoneInput {...field} placeholder={t(\"guestInfo.phonePlaceholder\")} />"
        },
        {
          "type": "phone",
          "line": 235,
          "rule": "{...field} placeholder={t(\"guestInfo.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "placeholder={t(\"guestInfo.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "{t(\"guestInfo.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "t(\"guestInfo.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "\"guestInfo.phonePlaceholder\""
        },
        {
          "type": "email",
          "line": 373,
          "rule": "<FormControl>\r\n                        <Input type=\"email\" placeholder={t(\"guestInfo.emailPlaceholde"
        },
        {
          "type": "email",
          "line": 374,
          "rule": "<Input type=\"email\" placeholder={t(\"guestInfo.emailPlaceholder\")} {...field} />"
        },
        {
          "type": "email",
          "line": 374,
          "rule": "type=\"email\" placeholder={t(\"guestInfo.emailPlaceholder\")} {...field}"
        },
        {
          "type": "email",
          "line": 374,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 374,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 374,
          "rule": "placeholder={t(\"guestInfo.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 374,
          "rule": "{t(\"guestInfo.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 374,
          "rule": "t(\"guestInfo.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 374,
          "rule": "\"guestInfo.emailPlaceholder\""
        },
        {
          "type": "phone",
          "line": 388,
          "rule": "<FormControl>\r\n                        <PhoneInput {...field} placeholder={t(\"guestInfo.phonePlaceho"
        },
        {
          "type": "phone",
          "line": 389,
          "rule": "<PhoneInput {...field} placeholder={t(\"guestInfo.phonePlaceholder\")} />"
        },
        {
          "type": "phone",
          "line": 389,
          "rule": "{...field} placeholder={t(\"guestInfo.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 389,
          "rule": "placeholder={t(\"guestInfo.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 389,
          "rule": "{t(\"guestInfo.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 389,
          "rule": "t(\"guestInfo.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 389,
          "rule": "\"guestInfo.phonePlaceholder\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "lines": 892,
      "complexity": 65,
      "conditionals": [
        {
          "type": "if",
          "line": 59,
          "condition": "!dateOfBirth",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 68,
          "condition": "!dateString",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "!name",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 136,
          "condition": "currentPage > 1",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 138,
          "condition": "searchTerm",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 140,
          "condition": "roleFilter.length > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 142,
          "condition": "sortField !== \"name\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 145,
          "condition": "sortDirection !== \"asc\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 166,
          "condition": "roles.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 175,
          "condition": "!gender",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 192,
          "condition": "!userToDelete",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 195,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 211,
          "condition": "!userForPasswordChange",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 214,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 230,
          "condition": "current.includes(role)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 249,
          "condition": "timeout",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 253,
          "condition": "totalPages <= 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 259,
          "condition": "endPage - startPage + 1 < maxPagesToShow",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 268,
          "condition": "currentPage > 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 308,
          "condition": "currentPage < totalPages",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 421,
          "condition": "input",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 483,
          "condition": "input",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "calculateAge",
          "line": 58,
          "parameters": [
            {
              "name": "dateOfBirth",
              "type": "string | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 67,
          "parameters": [
            {
              "name": "dateString",
              "type": "string | null"
            },
            {
              "name": "locale",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAvatarGradient",
          "line": 74,
          "parameters": [
            {
              "name": "name",
              "type": "string | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getRoleBadgeStyle",
          "line": 86,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "UserManagement",
          "line": 100,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserManagementProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 134,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 154,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSort",
          "line": 159,
          "parameters": [
            {
              "name": "field",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getRolesDisplay",
          "line": 165,
          "parameters": [
            {
              "name": "roles",
              "type": "string[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 169,
          "parameters": [
            {
              "name": "role",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getGenderDisplay",
          "line": 175,
          "parameters": [
            {
              "name": "gender",
              "type": "string | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleOpenCreateUserForm",
          "line": 178,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleOpenEditUserForm",
          "line": 180,
          "parameters": [
            {
              "name": "user",
              "type": "UserData"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleUserFormSuccess",
          "line": 183,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleDeleteUser",
          "line": 192,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 198,
          "parameters": [
            {
              "name": "prevUsers",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 199,
          "parameters": [
            {
              "name": "u",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleChangePassword",
          "line": 211,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleRoleFilterChange",
          "line": 229,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 230,
          "parameters": [
            {
              "name": "current",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 232,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "clearFilters",
          "line": 236,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 239,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSearchChange",
          "line": 242,
          "parameters": [
            {
              "name": "event",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "debounce",
          "line": 244,
          "parameters": [
            {
              "name": "func",
              "type": "F"
            },
            {
              "name": "waitFor",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 248,
          "parameters": [
            {
              "name": "args",
              "type": "Parameters<F>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 249,
          "parameters": [
            {
              "name": "resolve",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 251,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderPagination",
          "line": 253,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 267,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 275,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 285,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 287,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 300,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 307,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 418,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 446,
          "parameters": [
            {
              "name": "role",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 449,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 480,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 488,
          "parameters": [
            {
              "name": "role",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 494,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 506,
          "parameters": [
            {
              "name": "user",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 544,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 549,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 559,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 603,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 611,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 622,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 633,
          "parameters": [
            {
              "name": "user",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 682,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 688,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 699,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 39,
          "rule": "export interface UserData {\r\n  id: string\r\n  name: string | null\r\n  email: string | null\r\n  image?: "
        },
        {
          "type": "email",
          "line": 42,
          "rule": "email: string | null"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 42,
          "rule": "phone?: string | null"
        },
        {
          "type": "phone",
          "line": 42,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 528,
          "rule": "<p className=\"text-xs text-muted-foreground truncate\">{user.email || t(\"common.notSet\")}</p>"
        },
        {
          "type": "email",
          "line": 529,
          "rule": "{user.email || t(\"common.notSet\")}"
        },
        {
          "type": "email",
          "line": 529,
          "rule": "user.email || t(\"common.notSet\")"
        },
        {
          "type": "email",
          "line": 529,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 529,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 571,
          "rule": "<div className=\"mt-3 grid grid-cols-2 gap-2 text-xs text-muted-foreground\">\r\n                    <di"
        },
        {
          "type": "phone",
          "line": 572,
          "rule": "<div>\r\n                      <span className=\"font-medium\">{t(\"admin.users.phone\")}:</span> {user.ph"
        },
        {
          "type": "phone",
          "line": 573,
          "rule": "<span className=\"font-medium\">{t(\"admin.users.phone\")}:</span>"
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "{t(\"admin.users.phone\")}"
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "t(\"admin.users.phone\")"
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "\"admin.users.phone\""
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "{user.phone || t(\"common.notSet\")}"
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "user.phone || t(\"common.notSet\")"
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 574,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 608,
          "rule": "<TableHead>{t(\"admin.users.phone\")}</TableHead>"
        },
        {
          "type": "phone",
          "line": 608,
          "rule": "{t(\"admin.users.phone\")}"
        },
        {
          "type": "phone",
          "line": 608,
          "rule": "t(\"admin.users.phone\")"
        },
        {
          "type": "phone",
          "line": 608,
          "rule": "\"admin.users.phone\""
        },
        {
          "type": "email",
          "line": 609,
          "rule": "<TableHead>\r\n                    <Button variant=\"ghost\" onClick={() => handleSort(\"email\")} classNa"
        },
        {
          "type": "email",
          "line": 610,
          "rule": "<Button variant=\"ghost\" onClick={() => handleSort(\"email\")} className=\"px-0 hover:bg-transparent\">\r\n"
        },
        {
          "type": "email",
          "line": 610,
          "rule": "<Button variant=\"ghost\" onClick={() => handleSort(\"email\")} className=\"px-0 hover:bg-transparent\">"
        },
        {
          "type": "email",
          "line": 610,
          "rule": "variant=\"ghost\" onClick={() => handleSort(\"email\")} className=\"px-0 hover:bg-transparent\""
        },
        {
          "type": "email",
          "line": 610,
          "rule": "onClick={() => handleSort(\"email\")}"
        },
        {
          "type": "email",
          "line": 611,
          "rule": "{() => handleSort(\"email\")}"
        },
        {
          "type": "email",
          "line": 611,
          "rule": "() => handleSort(\"email\")"
        },
        {
          "type": "email",
          "line": 611,
          "rule": "handleSort(\"email\")"
        },
        {
          "type": "email",
          "line": 611,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 612,
          "rule": "{t(\"admin.users.email\")}"
        },
        {
          "type": "email",
          "line": 612,
          "rule": "t(\"admin.users.email\")"
        },
        {
          "type": "email",
          "line": 612,
          "rule": "\"admin.users.email\""
        },
        {
          "type": "phone",
          "line": 652,
          "rule": "<TableCell>{user.phone || t(\"common.notSet\")}</TableCell>"
        },
        {
          "type": "phone",
          "line": 652,
          "rule": "{user.phone || t(\"common.notSet\")}"
        },
        {
          "type": "phone",
          "line": 652,
          "rule": "user.phone || t(\"common.notSet\")"
        },
        {
          "type": "phone",
          "line": 652,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 652,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 654,
          "rule": "<TableCell>{user.email || t(\"common.notSet\")}</TableCell>"
        },
        {
          "type": "email",
          "line": 654,
          "rule": "{user.email || t(\"common.notSet\")}"
        },
        {
          "type": "email",
          "line": 654,
          "rule": "user.email || t(\"common.notSet\")"
        },
        {
          "type": "email",
          "line": 654,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 654,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 748,
          "rule": "<AlertDialogHeader>\r\n            <AlertDialogTitle>{t(\"admin.users.confirmChangePasswordTitle\")}</Al"
        },
        {
          "type": "email",
          "line": 750,
          "rule": "<AlertDialogDescription>\r\n              {userForPasswordChange?.email\r\n                ? t(\"admin.us"
        },
        {
          "type": "email",
          "line": 751,
          "rule": "{userForPasswordChange?.email\r\n                ? t(\"admin.users.confirmChangePasswordMessage\", { use"
        },
        {
          "type": "email",
          "line": 751,
          "rule": "userForPasswordChange?.email\r\n                ? t(\"admin.users.confirmChangePasswordMessage\", { user"
        },
        {
          "type": "email",
          "line": 751,
          "rule": "userForPasswordChange?.email"
        },
        {
          "type": "email",
          "line": 752,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 752,
          "rule": "t(\"admin.users.confirmChangePasswordMessage\", { userEmail: userForPasswordChange.email })"
        },
        {
          "type": "email",
          "line": 753,
          "rule": "{ userEmail: userForPasswordChange.email }"
        },
        {
          "type": "email",
          "line": 753,
          "rule": "userEmail: userForPasswordChange.email"
        },
        {
          "type": "email",
          "line": 753,
          "rule": "userForPasswordChange.email"
        },
        {
          "type": "email",
          "line": 754,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 69,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 193,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 212,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "lines": 578,
      "complexity": 60,
      "conditionals": [
        {
          "type": "if",
          "line": 28,
          "condition": "!bookingResult",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "!preferenceKey",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "source === \"subscription_redemption\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 90,
          "condition": "source === \"gift_voucher_redemption\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 99,
          "condition": "priceDetails.redeemedUserSubscriptionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "priceDetails.appliedGiftVoucherId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 112,
          "condition": "voucher",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 136,
          "cases": 6,
          "expression": "addressType"
        }
      ],
      "functions": [
        {
          "name": "BookingConfirmation",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "BookingConfirmationProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "treat",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getBookingStatusText",
          "line": 59,
          "parameters": [
            {
              "name": "statusKey",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPaymentStatusText",
          "line": 73,
          "parameters": [
            {
              "name": "statusKey",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getGenderPreferenceText",
          "line": 82,
          "parameters": [
            {
              "name": "preferenceKey",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 99,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 101,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 110,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderAddressLine",
          "line": 128,
          "parameters": [
            {
              "name": "labelKey",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string | number | null"
            },
            {
              "name": "icon",
              "type": "React.ReactNode"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAddressIcon",
          "line": 135,
          "parameters": [
            {
              "name": "addressType",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 414,
          "parameters": [
            {
              "name": "surcharge",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 483,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 518,
          "parameters": [
            {
              "name": "entry",
              "type": "IGiftVoucherUsageHistory"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "actions\\admin-actions.ts",
      "lines": 330,
      "complexity": 59,
      "conditionals": [
        {
          "type": "if",
          "line": 24,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "searchTerm",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 34,
          "condition": "roleFilter && roleFilter.length > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 93,
          "condition": "!name || !email || !phone || !password || !roles.length || !gender",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 96,
          "condition": "password.length < 6",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "existingEmail",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "existingPhone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "dateOfBirthStr && isNaN(dateOfBirth?.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 122,
          "condition": "error.code === 11000",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 122,
          "condition": "error.message.includes(\"email\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 125,
          "condition": "error.message.includes(\"phone\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 133,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 143,
          "condition": "!name || !email || !phone || !roles.length || !gender",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 147,
          "condition": "!userToUpdate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 149,
          "condition": "email.toLowerCase() !== userToUpdate.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 152,
          "condition": "existingEmail",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 155,
          "condition": "phone !== userToUpdate.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 157,
          "condition": "existingPhone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 161,
          "condition": "!roles.includes(userToUpdate.activeRole)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 167,
          "condition": "dateOfBirthStr && dateOfBirth && isNaN(dateOfBirth.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 176,
          "condition": "error.code === 11000",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 177,
          "condition": "error.message.includes(\"email\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 179,
          "condition": "error.message.includes(\"phone\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 185,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 188,
          "condition": "userId === session.user.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 192,
          "condition": "!deletedUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 200,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 205,
          "condition": "!user || !user.email",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 242,
          "condition": "!emailResult.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "sanitizeUser",
          "line": 13,
          "parameters": [
            {
              "name": "userDoc",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAllUsers",
          "line": 19,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "searchTerm",
              "type": "string"
            },
            {
              "name": "roleFilter",
              "type": "string[]"
            },
            {
              "name": "sortField",
              "type": "any"
            },
            {
              "name": "sortDirection",
              "type": "\"asc\" | \"desc\""
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "user",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getUserStatistics",
          "line": 60,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "createUserByAdmin",
          "line": 78,
          "parameters": [
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateUserByAdmin",
          "line": 129,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteUserByAdmin",
          "line": 182,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "initiatePasswordResetByAdmin",
          "line": 198,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 6,
          "rule": "import { emailService } from \"@/lib/notifications/email-service\""
        },
        {
          "type": "email",
          "line": 6,
          "rule": "{ emailService }"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "{ emailService }"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 7,
          "rule": "\"@/lib/notifications/email-service\""
        },
        {
          "type": "email",
          "line": 29,
          "rule": "if (searchTerm) {\r\n      query.$or = [\r\n        { name: { $regex: searchTerm, $options: \"i\" } },\r\n  "
        },
        {
          "type": "email",
          "line": 29,
          "rule": "{\r\n      query.$or = [\r\n        { name: { $regex: searchTerm, $options: \"i\" } },\r\n        { email: {"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "query.$or = [\r\n        { name: { $regex: searchTerm, $options: \"i\" } },\r\n        { email: { $regex: "
        },
        {
          "type": "email",
          "line": 29,
          "rule": "query.$or = [\r\n        { name: { $regex: searchTerm, $options: \"i\" } },\r\n        { email: { $regex: "
        },
        {
          "type": "email",
          "line": 30,
          "rule": "[\r\n        { name: { $regex: searchTerm, $options: \"i\" } },\r\n        { email: { $regex: searchTerm, "
        },
        {
          "type": "email",
          "line": 31,
          "rule": "{ email: { $regex: searchTerm, $options: \"i\" } }"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "email: { $regex: searchTerm, $options: \"i\" }"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "{ phone: { $regex: searchTerm, $options: \"i\" } }"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "phone: { $regex: searchTerm, $options: \"i\" }"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "const [usersFromDb, total] = await Promise.all([\r\n      User.find(query)\r\n        .sort(sortOptions)"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "const [usersFromDb, total] = await Promise.all([\r\n      User.find(query)\r\n        .sort(sortOptions)"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "[usersFromDb, total] = await Promise.all([\r\n      User.find(query)\r\n        .sort(sortOptions)\r\n    "
        },
        {
          "type": "email",
          "line": 39,
          "rule": "await Promise.all([\r\n      User.find(query)\r\n        .sort(sortOptions)\r\n        .skip(skip)\r\n      "
        },
        {
          "type": "email",
          "line": 39,
          "rule": "Promise.all([\r\n      User.find(query)\r\n        .sort(sortOptions)\r\n        .skip(skip)\r\n        .lim"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "[\r\n      User.find(query)\r\n        .sort(sortOptions)\r\n        .skip(skip)\r\n        .limit(limit)\r\n "
        },
        {
          "type": "email",
          "line": 39,
          "rule": "User.find(query)\r\n        .sort(sortOptions)\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .s"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "User.find(query)\r\n        .sort(sortOptions)\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .s"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "User.find(query)\r\n        .sort(sortOptions)\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .s"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"name email phone image roles dateOfBirth gender createdAt\""
        },
        {
          "type": "email",
          "line": 45,
          "rule": "const users = usersFromDb.map((user) => ({\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "const users = usersFromDb.map((user) => ({\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "users = usersFromDb.map((user) => ({\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n      "
        },
        {
          "type": "email",
          "line": 46,
          "rule": "usersFromDb.map((user) => ({\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n      email: u"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "(user) => ({\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n      email: user.email,\r\n    "
        },
        {
          "type": "email",
          "line": 46,
          "rule": "({\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n      email: user.email,\r\n      phone: u"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "{\r\n      id: user._id.toString(),\r\n      name: user.name,\r\n      email: user.email,\r\n      phone: us"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "email: user.email"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "phone: user.phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "const email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "const email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "formData.get(\"email\")"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "const phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "const phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "formData.get(\"phone\")"
        },
        {
          "type": "phone",
          "line": 87,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 93,
          "rule": "if (!name || !email || !phone || !password || !roles.length || !gender) {\r\n      return { success: f"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "!name || !email || !phone || !password || !roles.length || !gender"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "!name || !email || !phone || !password || !roles.length"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "!name || !email || !phone || !password"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "!name || !email || !phone"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "!name || !email"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "!email"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 93,
          "rule": "!phone"
        },
        {
          "type": "phone",
          "line": 93,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 98,
          "rule": "const existingEmail = await User.findOne({ email: email.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 98,
          "rule": "const existingEmail = await User.findOne({ email: email.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "existingEmail = await User.findOne({ email: email.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "await User.findOne({ email: email.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "User.findOne({ email: email.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "User.findOne({ email: email.toLowerCase() }).lean"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "{ email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "if (existingEmail) {\r\n      return { success: false, message: \"errors.emailExists\" }\r\n    }"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "{\r\n      return { success: false, message: \"errors.emailExists\" }\r\n    }"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "{ success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "message: \"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 101,
          "rule": "\"errors.emailExists\""
        },
        {
          "type": "phone",
          "line": 102,
          "rule": "const existingPhone = await User.findOne({ phone }).lean()"
        },
        {
          "type": "phone",
          "line": 102,
          "rule": "const existingPhone = await User.findOne({ phone }).lean()"
        },
        {
          "type": "phone",
          "line": 102,
          "rule": "existingPhone = await User.findOne({ phone }).lean()"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "await User.findOne({ phone }).lean()"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "User.findOne({ phone }).lean()"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "User.findOne({ phone }).lean"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "User.findOne({ phone })"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "{ phone }"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "if (existingPhone) {\r\n      return { success: false, message: \"errors.phoneExists\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "{\r\n      return { success: false, message: \"errors.phoneExists\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "{ success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "message: \"errors.phoneExists\""
        },
        {
          "type": "phone",
          "line": 105,
          "rule": "\"errors.phoneExists\""
        },
        {
          "type": "email",
          "line": 111,
          "rule": "const newUserDoc = new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone,\r\n      p"
        },
        {
          "type": "email",
          "line": 111,
          "rule": "const newUserDoc = new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone,\r\n      p"
        },
        {
          "type": "email",
          "line": 111,
          "rule": "newUserDoc = new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone,\r\n      passwor"
        },
        {
          "type": "email",
          "line": 111,
          "rule": "new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone,\r\n      password: hashedPass"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "{\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone,\r\n      password: hashedPassword,\r\n  "
        },
        {
          "type": "email",
          "line": 112,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 113,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 113,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 116,
          "rule": "emailVerified: new Date()"
        },
        {
          "type": "email",
          "line": 116,
          "rule": "emailVerified"
        },
        {
          "type": "phone",
          "line": 117,
          "rule": "phoneVerified: new Date()"
        },
        {
          "type": "phone",
          "line": 117,
          "rule": "phoneVerified"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "catch (error: any) {\r\n    console.error(\"Error creating user by admin:\", error)\r\n    if (error.code "
        },
        {
          "type": "email",
          "line": 121,
          "rule": "{\r\n    console.error(\"Error creating user by admin:\", error)\r\n    if (error.code === 11000) {\r\n     "
        },
        {
          "type": "email",
          "line": 122,
          "rule": "if (error.code === 11000) {\r\n      // MongoDB duplicate key error\r\n      if (error.message.includes("
        },
        {
          "type": "email",
          "line": 122,
          "rule": "{\r\n      // MongoDB duplicate key error\r\n      if (error.message.includes(\"email\")) return { success"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "if (error.message.includes(\"email\")) return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "error.message.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 124,
          "rule": "return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "{ success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "message: \"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 125,
          "rule": "\"errors.emailExists\""
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "if (error.message.includes(\"phone\")) return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "error.message.includes(\"phone\")"
        },
        {
          "type": "phone",
          "line": 126,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 126,
          "rule": "return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 126,
          "rule": "{ success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "message: \"errors.phoneExists\""
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "\"errors.phoneExists\""
        },
        {
          "type": "email",
          "line": 137,
          "rule": "const email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "const email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "formData.get(\"email\")"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 138,
          "rule": "const phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 138,
          "rule": "const phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 138,
          "rule": "phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 138,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "formData.get(\"phone\")"
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "if (!name || !email || !phone || !roles.length || !gender) {\r\n      return { success: false, message"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "!name || !email || !phone || !roles.length || !gender"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "!name || !email || !phone || !roles.length"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "!name || !email || !phone"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "!name || !email"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "!email"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "!phone"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "if (email.toLowerCase() !== userToUpdate.email) {\r\n      const existingEmail = await User.findOne({ "
        },
        {
          "type": "email",
          "line": 149,
          "rule": "email.toLowerCase() !== userToUpdate.email"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "userToUpdate.email"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "{\r\n      const existingEmail = await User.findOne({ email: email.toLowerCase(), _id: { $ne: userId }"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "const existingEmail = await User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } }).lean("
        },
        {
          "type": "email",
          "line": 150,
          "rule": "const existingEmail = await User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } }).lean("
        },
        {
          "type": "email",
          "line": 150,
          "rule": "existingEmail = await User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } }).lean()"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "await User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } }).lean()"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } }).lean()"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } }).lean"
        },
        {
          "type": "email",
          "line": 150,
          "rule": "User.findOne({ email: email.toLowerCase(), _id: { $ne: userId } })"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "{ email: email.toLowerCase(), _id: { $ne: userId } }"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 152,
          "rule": "if (existingEmail) return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 152,
          "rule": "return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 153,
          "rule": "{ success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 153,
          "rule": "message: \"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 153,
          "rule": "\"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 154,
          "rule": "userToUpdate.email = email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "userToUpdate.email = email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "userToUpdate.email"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "if (phone !== userToUpdate.phone) {\r\n      const existingPhone = await User.findOne({ phone, _id: { "
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "phone !== userToUpdate.phone"
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "userToUpdate.phone"
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "{\r\n      const existingPhone = await User.findOne({ phone, _id: { $ne: userId } }).lean()\r\n      if "
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "const existingPhone = await User.findOne({ phone, _id: { $ne: userId } }).lean()"
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "const existingPhone = await User.findOne({ phone, _id: { $ne: userId } }).lean()"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "existingPhone = await User.findOne({ phone, _id: { $ne: userId } }).lean()"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "await User.findOne({ phone, _id: { $ne: userId } }).lean()"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "User.findOne({ phone, _id: { $ne: userId } }).lean()"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "User.findOne({ phone, _id: { $ne: userId } }).lean"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "User.findOne({ phone, _id: { $ne: userId } })"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "{ phone, _id: { $ne: userId } }"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 157,
          "rule": "if (existingPhone) return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 158,
          "rule": "return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 158,
          "rule": "{ success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 158,
          "rule": "message: \"errors.phoneExists\""
        },
        {
          "type": "phone",
          "line": 158,
          "rule": "\"errors.phoneExists\""
        },
        {
          "type": "phone",
          "line": 159,
          "rule": "userToUpdate.phone = phone"
        },
        {
          "type": "phone",
          "line": 159,
          "rule": "userToUpdate.phone = phone"
        },
        {
          "type": "phone",
          "line": 159,
          "rule": "userToUpdate.phone"
        },
        {
          "type": "phone",
          "line": 159,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 159,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 175,
          "rule": "catch (error: any) {\r\n    console.error(\"Error updating user by admin:\", error)\r\n    if (error.code "
        },
        {
          "type": "email",
          "line": 175,
          "rule": "{\r\n    console.error(\"Error updating user by admin:\", error)\r\n    if (error.code === 11000) {\r\n     "
        },
        {
          "type": "email",
          "line": 176,
          "rule": "if (error.code === 11000) {\r\n      if (error.message.includes(\"email\")) return { success: false, mes"
        },
        {
          "type": "email",
          "line": 177,
          "rule": "{\r\n      if (error.message.includes(\"email\")) return { success: false, message: \"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 177,
          "rule": "if (error.message.includes(\"email\")) return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 177,
          "rule": "error.message.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 178,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 178,
          "rule": "return { success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 178,
          "rule": "{ success: false, message: \"errors.emailExists\" }"
        },
        {
          "type": "email",
          "line": 178,
          "rule": "message: \"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 179,
          "rule": "\"errors.emailExists\""
        },
        {
          "type": "phone",
          "line": 179,
          "rule": "if (error.message.includes(\"phone\")) return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 179,
          "rule": "error.message.includes(\"phone\")"
        },
        {
          "type": "phone",
          "line": 180,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 180,
          "rule": "return { success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 180,
          "rule": "{ success: false, message: \"errors.phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 180,
          "rule": "message: \"errors.phoneExists\""
        },
        {
          "type": "phone",
          "line": 181,
          "rule": "\"errors.phoneExists\""
        },
        {
          "type": "email",
          "line": 204,
          "rule": "const user = await User.findById(userId).select(\"email name\")"
        },
        {
          "type": "email",
          "line": 204,
          "rule": "const user = await User.findById(userId).select(\"email name\")"
        },
        {
          "type": "email",
          "line": 204,
          "rule": "user = await User.findById(userId).select(\"email name\")"
        },
        {
          "type": "email",
          "line": 204,
          "rule": "await User.findById(userId).select(\"email name\")"
        },
        {
          "type": "email",
          "line": 204,
          "rule": "User.findById(userId).select(\"email name\")"
        },
        {
          "type": "email",
          "line": 205,
          "rule": "\"email name\""
        },
        {
          "type": "email",
          "line": 205,
          "rule": "if (!user || !user.email) {\r\n      // Ensure email exists\r\n      return { success: false, message: \""
        },
        {
          "type": "email",
          "line": 205,
          "rule": "!user || !user.email"
        },
        {
          "type": "email",
          "line": 205,
          "rule": "!user.email"
        },
        {
          "type": "email",
          "line": 205,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 206,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 206,
          "rule": "{\r\n      // Ensure email exists\r\n      return { success: false, message: \"userNotFoundOrMissingEmail"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "const notificationData: NotificationData = {\r\n      type: \"passwordReset\", // Ensure this type is ha"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "const notificationData: NotificationData = {\r\n      type: \"passwordReset\", // Ensure this type is ha"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "notificationData: NotificationData = {\r\n      type: \"passwordReset\", // Ensure this type is handled "
        },
        {
          "type": "email",
          "line": 232,
          "rule": "{\r\n      type: \"passwordReset\", // Ensure this type is handled in getEmailTemplate\r\n      userName: "
        },
        {
          "type": "email",
          "line": 233,
          "rule": "userName: user.name || user.email"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "user.name || user.email"
        },
        {
          "type": "email",
          "line": 234,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 235,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 237,
          "rule": "const emailResult = await emailService.sendNotification(\r\n      { value: user.email, name: user.name"
        },
        {
          "type": "email",
          "line": 237,
          "rule": "const emailResult = await emailService.sendNotification(\r\n      { value: user.email, name: user.name"
        },
        {
          "type": "email",
          "line": 238,
          "rule": "emailResult = await emailService.sendNotification(\r\n      { value: user.email, name: user.name || us"
        },
        {
          "type": "email",
          "line": 238,
          "rule": "emailResult"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "await emailService.sendNotification(\r\n      { value: user.email, name: user.name || user.email, lang"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "emailService.sendNotification(\r\n      { value: user.email, name: user.name || user.email, language: "
        },
        {
          "type": "email",
          "line": 239,
          "rule": "emailService.sendNotification"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "{ value: user.email, name: user.name || user.email, language: \"en\" /* TODO: Get user lang */ }"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "value: user.email"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "name: user.name || user.email"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "user.name || user.email"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 240,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 242,
          "rule": "if (!emailResult.success) {\r\n      console.error(\"Failed to send password reset email:\", emailResult"
        },
        {
          "type": "email",
          "line": 242,
          "rule": "!emailResult.success"
        },
        {
          "type": "email",
          "line": 242,
          "rule": "emailResult.success"
        },
        {
          "type": "email",
          "line": 242,
          "rule": "emailResult"
        },
        {
          "type": "email",
          "line": 243,
          "rule": "{\r\n      console.error(\"Failed to send password reset email:\", emailResult.error)\r\n      return { su"
        },
        {
          "type": "email",
          "line": 243,
          "rule": "console.error(\"Failed to send password reset email:\", emailResult.error)"
        },
        {
          "type": "email",
          "line": 243,
          "rule": "console.error(\"Failed to send password reset email:\", emailResult.error)"
        },
        {
          "type": "email",
          "line": 243,
          "rule": "\"Failed to send password reset email:\""
        },
        {
          "type": "email",
          "line": 244,
          "rule": "emailResult.error"
        },
        {
          "type": "email",
          "line": 244,
          "rule": "emailResult"
        },
        {
          "type": "email",
          "line": 244,
          "rule": "return { success: false, message: \"passwordResetEmailErrorToast\", errorDetail: emailResult.error }"
        },
        {
          "type": "email",
          "line": 245,
          "rule": "{ success: false, message: \"passwordResetEmailErrorToast\", errorDetail: emailResult.error }"
        },
        {
          "type": "email",
          "line": 246,
          "rule": "errorDetail: emailResult.error"
        },
        {
          "type": "email",
          "line": 246,
          "rule": "emailResult.error"
        },
        {
          "type": "email",
          "line": 246,
          "rule": "emailResult"
        },
        {
          "type": "email",
          "line": 247,
          "rule": "return { success: true, message: \"admin.users.passwordResetEmailSentToast\", email: user.email }"
        },
        {
          "type": "email",
          "line": 247,
          "rule": "{ success: true, message: \"admin.users.passwordResetEmailSentToast\", email: user.email }"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "email: user.email"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 23,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 61,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 80,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 132,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 184,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 199,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\auth\\login\\otp-form.tsx",
      "lines": 452,
      "complexity": 56,
      "conditionals": [
        {
          "type": "if",
          "line": 34,
          "condition": "identifier",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "cooldown > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "otpSent && otpInputRefs.current[0]",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "digits.length === 6",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "handleAutoFill(value, index)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 66,
          "condition": "value && !/^\\d+$/.test(value)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "value && index < 5",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "handleAutoFill(value, index)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "e.key === \"Backspace\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 84,
          "condition": "!otpCode[index] && index > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "e.key === \"ArrowLeft\" && index > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 91,
          "condition": "e.key === \"ArrowRight\" && index < 5",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 96,
          "condition": "index !== 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "digits.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 106,
          "condition": "digitIndex < 6",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 111,
          "condition": "nextEmptyIndex !== -1",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 122,
          "condition": "typeof window !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 123,
          "condition": "loginType === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 131,
          "condition": "hiddenInput && hiddenInput.value",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 138,
          "condition": "!identifierValue",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 147,
          "condition": "onIdentifierChange",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 157,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 176,
          "condition": "code.length !== 6",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 180,
          "condition": "!identifierValue",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 191,
          "condition": "result.success && result.userId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 197,
          "condition": "signInResult?.error",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 202,
          "condition": "signInResult?.ok",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "OTPForm",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "OTPFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleAutoFill",
          "line": 49,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            },
            {
              "name": "currentIndex",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleOtpChange",
          "line": 61,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleInput",
          "line": 75,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLInputElement>"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleKeyDown",
          "line": 82,
          "parameters": [
            {
              "name": "e",
              "type": "React.KeyboardEvent<HTMLInputElement>"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePaste",
          "line": 94,
          "parameters": [
            {
              "name": "e",
              "type": "React.ClipboardEvent<HTMLInputElement>"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 106,
          "parameters": [
            {
              "name": "digit",
              "type": "any"
            },
            {
              "name": "digitIndex",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 110,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 112,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 116,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePastePrevent",
          "line": 119,
          "parameters": [
            {
              "name": "e",
              "type": "React.ClipboardEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getCurrentIdentifier",
          "line": 122,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSendOTP",
          "line": 136,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleVerifyOTP",
          "line": 175,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 208,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 249,
          "parameters": [
            {
              "name": "digit",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 251,
          "parameters": [
            {
              "name": "el",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 257,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 260,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 262,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 13,
          "rule": "interface OTPFormProps {\r\n  className?: string\r\n  loginType: \"email\" | \"phone\"\r\n  identifier: string"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "loginType: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 15,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 15,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 15,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 120,
          "rule": "const getCurrentIdentifier = () => {\r\n    if (typeof window !== \"undefined\") {\r\n      if (loginType "
        },
        {
          "type": "email",
          "line": 120,
          "rule": "const getCurrentIdentifier = () => {\r\n    if (typeof window !== \"undefined\") {\r\n      if (loginType "
        },
        {
          "type": "email",
          "line": 122,
          "rule": "getCurrentIdentifier = () => {\r\n    if (typeof window !== \"undefined\") {\r\n      if (loginType === \"e"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "() => {\r\n    if (typeof window !== \"undefined\") {\r\n      if (loginType === \"email\") {\r\n        const"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "{\r\n    if (typeof window !== \"undefined\") {\r\n      if (loginType === \"email\") {\r\n        const input"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "if (typeof window !== \"undefined\") {\r\n      if (loginType === \"email\") {\r\n        const inputEl = do"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "{\r\n      if (loginType === \"email\") {\r\n        const inputEl = document.getElementById(\"otp-identifi"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "if (loginType === \"email\") {\r\n        const inputEl = document.getElementById(\"otp-identifier\") as H"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 124,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "{\r\n        // For phone, get the value from the hidden input that PhoneInput creates\r\n        const "
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "const hiddenInput = document.querySelector('input[name=\"phone\"][type=\"hidden\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "const hiddenInput = document.querySelector('input[name=\"phone\"][type=\"hidden\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "hiddenInput = document.querySelector('input[name=\"phone\"][type=\"hidden\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "document.querySelector('input[name=\"phone\"][type=\"hidden\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "document.querySelector('input[name=\"phone\"][type=\"hidden\"]')"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "'input[name=\"phone\"][type=\"hidden\"]'"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "if (!identifierValue) {\r\n      setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "{\r\n      setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\"))\r\n    "
        },
        {
          "type": "email",
          "line": 140,
          "rule": "setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\"))"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\"))"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\")"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 140,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 141,
          "rule": "toast({\r\n        title: t(\"errors.invalidInput\"),\r\n        description: loginType === \"email\" ? t(\"e"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "toast({\r\n        title: t(\"errors.invalidInput\"),\r\n        description: loginType === \"email\" ? t(\"e"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "{\r\n        title: t(\"errors.invalidInput\"),\r\n        description: loginType === \"email\" ? t(\"errors."
        },
        {
          "type": "email",
          "line": 143,
          "rule": "description: loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\")"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\")"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 149,
          "rule": "try {\r\n      console.log(`Sending OTP to ${loginType}: ${identifierValue}`)\r\n\r\n      toast({\r\n      "
        },
        {
          "type": "email",
          "line": 149,
          "rule": "{\r\n      console.log(`Sending OTP to ${loginType}: ${identifierValue}`)\r\n\r\n      toast({\r\n        ti"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "toast({\r\n        title: t(\"login.sendingOTP\"),\r\n        description: loginType === \"email\" ? t(\"logi"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "toast({\r\n        title: t(\"login.sendingOTP\"),\r\n        description: loginType === \"email\" ? t(\"logi"
        },
        {
          "type": "email",
          "line": 151,
          "rule": "{\r\n        title: t(\"login.sendingOTP\"),\r\n        description: loginType === \"email\" ? t(\"login.send"
        },
        {
          "type": "email",
          "line": 152,
          "rule": "description: loginType === \"email\" ? t(\"login.sendingOTPToEmail\") : t(\"login.sendingOTPToPhone\")"
        },
        {
          "type": "email",
          "line": 152,
          "rule": "loginType === \"email\" ? t(\"login.sendingOTPToEmail\") : t(\"login.sendingOTPToPhone\")"
        },
        {
          "type": "email",
          "line": 152,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 153,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 160,
          "rule": "toast({\r\n          title: t(\"login.otpSent\"),\r\n          description: loginType === \"email\" ? t(\"log"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "toast({\r\n          title: t(\"login.otpSent\"),\r\n          description: loginType === \"email\" ? t(\"log"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "{\r\n          title: t(\"login.otpSent\"),\r\n          description: loginType === \"email\" ? t(\"login.otp"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "description: loginType === \"email\" ? t(\"login.otpSentToEmail\") : t(\"login.otpSentToPhone\")"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "loginType === \"email\" ? t(\"login.otpSentToEmail\") : t(\"login.otpSentToPhone\")"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 162,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 180,
          "rule": "if (!identifierValue) {\r\n      setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors"
        },
        {
          "type": "email",
          "line": 181,
          "rule": "{\r\n      setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\"))\r\n    "
        },
        {
          "type": "email",
          "line": 181,
          "rule": "setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\"))"
        },
        {
          "type": "email",
          "line": 181,
          "rule": "setError(loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\"))"
        },
        {
          "type": "email",
          "line": 181,
          "rule": "loginType === \"email\" ? t(\"errors.invalidEmail\") : t(\"errors.invalidPhone\")"
        },
        {
          "type": "email",
          "line": 181,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 181,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 221,
          "rule": "return (\r\n    <div className={cn(\"grid gap-6\", className)}>\r\n      {!otpSent ? (\r\n        <>\r\n      "
        },
        {
          "type": "email",
          "line": 222,
          "rule": "(\r\n    <div className={cn(\"grid gap-6\", className)}>\r\n      {!otpSent ? (\r\n        <>\r\n          <p "
        },
        {
          "type": "email",
          "line": 222,
          "rule": "<div className={cn(\"grid gap-6\", className)}>\r\n      {!otpSent ? (\r\n        <>\r\n          <p classNa"
        },
        {
          "type": "email",
          "line": 223,
          "rule": "{!otpSent ? (\r\n        <>\r\n          <p className=\"text-sm text-muted-foreground text-center\">\r\n    "
        },
        {
          "type": "email",
          "line": 223,
          "rule": "!otpSent ? (\r\n        <>\r\n          <p className=\"text-sm text-muted-foreground text-center\">\r\n     "
        },
        {
          "type": "email",
          "line": 223,
          "rule": "(\r\n        <>\r\n          <p className=\"text-sm text-muted-foreground text-center\">\r\n            {log"
        },
        {
          "type": "email",
          "line": 223,
          "rule": "<>\r\n          <p className=\"text-sm text-muted-foreground text-center\">\r\n            {loginType === "
        },
        {
          "type": "email",
          "line": 224,
          "rule": "<p className=\"text-sm text-muted-foreground text-center\">\r\n            {loginType === \"email\" ? t(\"l"
        },
        {
          "type": "email",
          "line": 225,
          "rule": "{loginType === \"email\" ? t(\"login.otpEmailInstructions\") : t(\"login.otpPhoneInstructions\")}"
        },
        {
          "type": "email",
          "line": 225,
          "rule": "loginType === \"email\" ? t(\"login.otpEmailInstructions\") : t(\"login.otpPhoneInstructions\")"
        },
        {
          "type": "email",
          "line": 225,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 225,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 239,
          "rule": "(\r\n        <>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-sm text-muted"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "<>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-sm text-muted-foreground"
        },
        {
          "type": "email",
          "line": 239,
          "rule": "<div className=\"text-center\">\r\n            <p className=\"text-sm text-muted-foreground\">\r\n          "
        },
        {
          "type": "email",
          "line": 240,
          "rule": "<p className=\"text-sm text-muted-foreground\">\r\n              {loginType === \"email\" ? t(\"login.otpEm"
        },
        {
          "type": "email",
          "line": 241,
          "rule": "{loginType === \"email\" ? t(\"login.otpEmailSent\") : t(\"login.otpPhoneSent\")}"
        },
        {
          "type": "email",
          "line": 241,
          "rule": "loginType === \"email\" ? t(\"login.otpEmailSent\") : t(\"login.otpPhoneSent\")"
        },
        {
          "type": "email",
          "line": 241,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 242,
          "rule": "\"email\""
        }
      ],
      "errorHandling": [
        {
          "line": 149,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 184,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "lines": 407,
      "complexity": 55,
      "conditionals": [
        {
          "type": "if",
          "line": 36,
          "condition": "bookingOptions.customAddressDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "bookingOptions.selectedAddressId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 47,
          "condition": "!preferenceKey",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 52,
          "condition": "bookingOptions.source === \"subscription_redemption\" && bookingOptions.selectedUserSubscriptionId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "bookingOptions.source === \"gift_voucher_redemption\" && bookingOptions.selectedGiftVoucherId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "voucher",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "voucher.voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "!calculatedPrice",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "isFullyCoveredByVoucherOrSubscription",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "SummaryStep",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "SummaryStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 30,
          "parameters": [
            {
              "name": "treat",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 36,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "addr",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getGenderPreferenceText",
          "line": 46,
          "parameters": [
            {
              "name": "preferenceKey",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getSubscriptionName",
          "line": 52,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "priceSummaryContent",
          "line": 78,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "surcharge",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderAddressLine",
          "line": 161,
          "parameters": [
            {
              "name": "labelKey",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 213,
          "rule": "{currentUserDetails?.email && (\r\n                <div className=\"flex items-center\">\r\n              "
        },
        {
          "type": "email",
          "line": 213,
          "rule": "currentUserDetails?.email && (\r\n                <div className=\"flex items-center\">\r\n               "
        },
        {
          "type": "email",
          "line": 213,
          "rule": "currentUserDetails?.email"
        },
        {
          "type": "email",
          "line": 213,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 214,
          "rule": "(\r\n                <div className=\"flex items-center\">\r\n                  <Mail className=\"mr-2 h-4 "
        },
        {
          "type": "email",
          "line": 214,
          "rule": "<div className=\"flex items-center\">\r\n                  <Mail className=\"mr-2 h-4 w-4 text-primary\" /"
        },
        {
          "type": "email",
          "line": 216,
          "rule": "<span>{currentUserDetails.email}</span>"
        },
        {
          "type": "email",
          "line": 217,
          "rule": "{currentUserDetails.email}"
        },
        {
          "type": "email",
          "line": 217,
          "rule": "currentUserDetails.email"
        },
        {
          "type": "email",
          "line": 217,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 218,
          "rule": "{currentUserDetails?.phone && (\r\n                <div className=\"flex items-center\">\r\n              "
        },
        {
          "type": "phone",
          "line": 218,
          "rule": "currentUserDetails?.phone && (\r\n                <div className=\"flex items-center\">\r\n               "
        },
        {
          "type": "phone",
          "line": 218,
          "rule": "currentUserDetails?.phone"
        },
        {
          "type": "phone",
          "line": 219,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 219,
          "rule": "(\r\n                <div className=\"flex items-center\">\r\n                  <Phone className=\"mr-2 h-4"
        },
        {
          "type": "phone",
          "line": 219,
          "rule": "<div className=\"flex items-center\">\r\n                  <Phone className=\"mr-2 h-4 w-4 text-primary\" "
        },
        {
          "type": "phone",
          "line": 222,
          "rule": "<span>{currentUserDetails.phone}</span>"
        },
        {
          "type": "phone",
          "line": 222,
          "rule": "{currentUserDetails.phone}"
        },
        {
          "type": "phone",
          "line": 222,
          "rule": "currentUserDetails.phone"
        },
        {
          "type": "phone",
          "line": 222,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "actions\\notification-actions.ts",
      "lines": 574,
      "complexity": 54,
      "conditionals": [
        {
          "type": "if",
          "line": 35,
          "condition": "identifierType === \"email\" && !validateEmail(identifier)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 42,
          "condition": "identifierType === \"phone\" && !validatePhone(identifier)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "process.env.NODE_ENV === \"development\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "identifierType === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 79,
          "condition": "identifier.startsWith(\"+\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 101,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 115,
          "condition": "existingOTP",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 117,
          "condition": "timeDiff > -540 && timeDiff < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 144,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 179,
          "condition": "process.env.NODE_ENV === \"development\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 182,
          "condition": "!storedCode",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 187,
          "condition": "storedCode !== code",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 199,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 225,
          "condition": "!token",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 233,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 290,
          "condition": "type === \"email\" && !validateEmail(recipient)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 295,
          "condition": "type === \"phone\" && !validatePhone(recipient)",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 304,
          "cases": 4,
          "expression": "notificationType"
        },
        {
          "type": "if",
          "line": 313,
          "condition": "type === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 320,
          "condition": "type === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 351,
          "condition": "identifierType === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 358,
          "condition": "!result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "generateAndSendOTP",
          "line": 20,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "identifierType",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        },
        {
          "name": "verifyOTP",
          "line": 171,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "identifierType",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendWelcomeEmail",
          "line": 254,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendTestNotification",
          "line": 275,
          "parameters": [
            {
              "name": "recipient",
              "type": "string"
            },
            {
              "name": "type",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "notificationType",
              "type": "\"otp\" | \"welcome\" | \"password-reset\""
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            },
            {
              "name": "customMessage",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendOTP",
          "line": 341,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "identifierType",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\n\nimport { validateEmail, validatePhone } from \"@/lib/auth/auth\"\nimport { notificationMa"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { validateEmail, validatePhone } from \"@/lib/auth/auth\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ validateEmail, validatePhone }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ validateEmail, validatePhone }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validatePhone"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validatePhone"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "export async function generateAndSendOTP(\n  identifier: string,\n  identifierType: \"email\" | \"phone\","
        },
        {
          "type": "email",
          "line": 23,
          "rule": "identifierType: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 23,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 23,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 23,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 29,
          "rule": "try {\n    logger.info(\n      `[${otpId}] Generating OTP for ${identifierType}: ${\n        identifier"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "{\n    logger.info(\n      `[${otpId}] Generating OTP for ${identifierType}: ${\n        identifierType"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "logger.info(\n      `[${otpId}] Generating OTP for ${identifierType}: ${\n        identifierType === \""
        },
        {
          "type": "email",
          "line": 29,
          "rule": "logger.info(\n      `[${otpId}] Generating OTP for ${identifierType}: ${\n        identifierType === \""
        },
        {
          "type": "email",
          "line": 29,
          "rule": "`[${otpId}] Generating OTP for ${identifierType}: ${\n        identifierType === \"email\"\n          ? "
        },
        {
          "type": "email",
          "line": 30,
          "rule": "identifierType === \"email\"\n          ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")[1]}`"
        },
        {
          "type": "email",
          "line": 30,
          "rule": "identifierType === \"email\"\n          ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")[1]}`"
        },
        {
          "type": "email",
          "line": 30,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 31,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 35,
          "rule": "if (identifierType === \"email\" && !validateEmail(identifier)) {\n      logger.warn(`[${otpId}] Invali"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "identifierType === \"email\" && !validateEmail(identifier)"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 36,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 37,
          "rule": "!validateEmail(identifier)"
        },
        {
          "type": "general",
          "line": 37,
          "rule": "validateEmail(identifier)"
        },
        {
          "type": "general",
          "line": 37,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "{\n      logger.warn(`[${otpId}] Invalid email address: ${identifier.substring(0, 3)}***${identifier."
        },
        {
          "type": "email",
          "line": 37,
          "rule": "logger.warn(`[${otpId}] Invalid email address: ${identifier.substring(0, 3)}***${identifier.split(\"@"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "logger.warn(`[${otpId}] Invalid email address: ${identifier.substring(0, 3)}***${identifier.split(\"@"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "`[${otpId}] Invalid email address: ${identifier.substring(0, 3)}***${identifier.split(\"@\")[1]}`"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "otpId}] Invalid email address: ${"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "}] Invalid email address: ${"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "return {\n        success: false,\n        message: \"Invalid email address\",\n        error: \"INVALID_E"
        },
        {
          "type": "email",
          "line": 40,
          "rule": "{\n        success: false,\n        message: \"Invalid email address\",\n        error: \"INVALID_EMAIL\",\n"
        },
        {
          "type": "email",
          "line": 40,
          "rule": "message: \"Invalid email address\""
        },
        {
          "type": "email",
          "line": 41,
          "rule": "\"Invalid email address\""
        },
        {
          "type": "phone",
          "line": 42,
          "rule": "if (identifierType === \"phone\" && !validatePhone(identifier)) {\n      logger.warn(`[${otpId}] Invali"
        },
        {
          "type": "phone",
          "line": 42,
          "rule": "identifierType === \"phone\" && !validatePhone(identifier)"
        },
        {
          "type": "phone",
          "line": 42,
          "rule": "identifierType === \"phone\""
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "\"phone\""
        },
        {
          "type": "general",
          "line": 43,
          "rule": "!validatePhone(identifier)"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "validatePhone(identifier)"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "validatePhone"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "{\n      logger.warn(`[${otpId}] Invalid phone number: ${identifier.substring(0, 5)}***`)\n      retur"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "logger.warn(`[${otpId}] Invalid phone number: ${identifier.substring(0, 5)}***`)"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "logger.warn(`[${otpId}] Invalid phone number: ${identifier.substring(0, 5)}***`)"
        },
        {
          "type": "phone",
          "line": 44,
          "rule": "`[${otpId}] Invalid phone number: ${identifier.substring(0, 5)}***`"
        },
        {
          "type": "phone",
          "line": 44,
          "rule": "otpId}] Invalid phone number: ${"
        },
        {
          "type": "phone",
          "line": 44,
          "rule": "}] Invalid phone number: ${"
        },
        {
          "type": "phone",
          "line": 45,
          "rule": "return {\n        success: false,\n        message: \"Invalid phone number\",\n        error: \"INVALID_PH"
        },
        {
          "type": "phone",
          "line": 45,
          "rule": "{\n        success: false,\n        message: \"Invalid phone number\",\n        error: \"INVALID_PHONE\",\n "
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "message: \"Invalid phone number\""
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "\"Invalid phone number\""
        },
        {
          "type": "email",
          "line": 48,
          "rule": "if (process.env.NODE_ENV === \"development\") {\n      // Create recipient object\n      const recipient"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "{\n      // Create recipient object\n      const recipient: EmailRecipient | PhoneRecipient =\n        "
        },
        {
          "type": "email",
          "line": 50,
          "rule": "const recipient: EmailRecipient | PhoneRecipient =\n        identifierType === \"email\"\n          ? {\n"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "const recipient: EmailRecipient | PhoneRecipient =\n        identifierType === \"email\"\n          ? {\n"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "recipient: EmailRecipient | PhoneRecipient =\n        identifierType === \"email\"\n          ? {\n      "
        },
        {
          "type": "email",
          "line": 52,
          "rule": "identifierType === \"email\"\n          ? {\n              type: \"email\",\n              value: identifie"
        },
        {
          "type": "email",
          "line": 52,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 52,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 53,
          "rule": "{\n              type: \"email\",\n              value: identifier,\n              language,\n            "
        },
        {
          "type": "email",
          "line": 53,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 53,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 55,
          "rule": "{\n              type: \"phone\",\n              value: identifier,\n              language,\n            "
        },
        {
          "type": "phone",
          "line": 55,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 68,
          "rule": "return {\n        success: true,\n        message: \"OTP sent successfully\",\n        obscuredIdentifier"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "{\n        success: true,\n        message: \"OTP sent successfully\",\n        obscuredIdentifier: ident"
        },
        {
          "type": "email",
          "line": 69,
          "rule": "obscuredIdentifier: identifierType === \"email\" ? obscureEmail(identifier) : obscurePhone(identifier)"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "identifierType === \"email\" ? obscureEmail(identifier) : obscurePhone(identifier)"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 70,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "if (identifierType === \"email\") {\n      user = await User.findOne({ email: identifier.toLowerCase() "
        },
        {
          "type": "email",
          "line": 77,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "{\n      user = await User.findOne({ email: identifier.toLowerCase() }).lean()\n    }"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "user = await User.findOne({ email: identifier.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "user = await User.findOne({ email: identifier.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "await User.findOne({ email: identifier.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "User.findOne({ email: identifier.toLowerCase() }).lean()"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "User.findOne({ email: identifier.toLowerCase() }).lean"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "User.findOne({ email: identifier.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "{ email: identifier.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "email: identifier.toLowerCase()"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 95,
          "rule": "user = await User.findOne({\n          $or: [\n            { phone: withZero },\n            { phone: w"
        },
        {
          "type": "phone",
          "line": 95,
          "rule": "user = await User.findOne({\n          $or: [\n            { phone: withZero },\n            { phone: w"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "await User.findOne({\n          $or: [\n            { phone: withZero },\n            { phone: withoutZ"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "User.findOne({\n          $or: [\n            { phone: withZero },\n            { phone: withoutZero },"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "User.findOne({\n          $or: [\n            { phone: withZero },\n            { phone: withoutZero },"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "User.findOne({\n          $or: [\n            { phone: withZero },\n            { phone: withoutZero },"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "{\n          $or: [\n            { phone: withZero },\n            { phone: withoutZero },\n            "
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "$or: [\n            { phone: withZero },\n            { phone: withoutZero },\n            { phone: ide"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "[\n            { phone: withZero },\n            { phone: withoutZero },\n            { phone: identifi"
        },
        {
          "type": "phone",
          "line": 96,
          "rule": "{ phone: withZero }"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "phone: withZero"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "{ phone: withoutZero }"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "phone: withoutZero"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 98,
          "rule": "{ phone: identifier }"
        },
        {
          "type": "phone",
          "line": 98,
          "rule": "phone: identifier"
        },
        {
          "type": "phone",
          "line": 98,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "{\n        user = await User.findOne({ phone: identifier }).lean()\n      }"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "user = await User.findOne({ phone: identifier }).lean()"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "user = await User.findOne({ phone: identifier }).lean()"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "await User.findOne({ phone: identifier }).lean()"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "User.findOne({ phone: identifier }).lean()"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "User.findOne({ phone: identifier }).lean"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "User.findOne({ phone: identifier })"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "{ phone: identifier }"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "phone: identifier"
        },
        {
          "type": "phone",
          "line": 100,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "if (!user) {\n      logger.warn(\n        `[${otpId}] User not found for: ${\n          identifierType "
        },
        {
          "type": "email",
          "line": 102,
          "rule": "{\n      logger.warn(\n        `[${otpId}] User not found for: ${\n          identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 102,
          "rule": "logger.warn(\n        `[${otpId}] User not found for: ${\n          identifierType === \"email\"\n       "
        },
        {
          "type": "email",
          "line": 102,
          "rule": "logger.warn(\n        `[${otpId}] User not found for: ${\n          identifierType === \"email\"\n       "
        },
        {
          "type": "email",
          "line": 102,
          "rule": "`[${otpId}] User not found for: ${\n          identifierType === \"email\"\n            ? `${identifier."
        },
        {
          "type": "email",
          "line": 103,
          "rule": "identifierType === \"email\"\n            ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")[1]"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "identifierType === \"email\"\n            ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")[1]"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 103,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 117,
          "rule": "if (timeDiff > -540 && timeDiff < 0) {\n        // 9 minutes elapsed from 10 minute expiry\n        lo"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "{\n        // 9 minutes elapsed from 10 minute expiry\n        logger.warn(\n          `[${otpId}] OTP "
        },
        {
          "type": "email",
          "line": 119,
          "rule": "logger.warn(\n          `[${otpId}] OTP request throttled for: ${\n            identifierType === \"ema"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "logger.warn(\n          `[${otpId}] OTP request throttled for: ${\n            identifierType === \"ema"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "`[${otpId}] OTP request throttled for: ${\n            identifierType === \"email\"\n              ? `${"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "identifierType === \"email\"\n              ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")["
        },
        {
          "type": "email",
          "line": 122,
          "rule": "identifierType === \"email\"\n              ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")["
        },
        {
          "type": "email",
          "line": 122,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 122,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 127,
          "rule": "return {\n          success: false,\n          message: \"Please wait before requesting a new code\",\n  "
        },
        {
          "type": "email",
          "line": 127,
          "rule": "{\n          success: false,\n          message: \"Please wait before requesting a new code\",\n         "
        },
        {
          "type": "email",
          "line": 129,
          "rule": "obscuredIdentifier: identifierType === \"email\" ? obscureEmail(identifier) : obscurePhone(identifier)"
        },
        {
          "type": "email",
          "line": 130,
          "rule": "identifierType === \"email\" ? obscureEmail(identifier) : obscurePhone(identifier)"
        },
        {
          "type": "email",
          "line": 130,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 130,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 132,
          "rule": "const recipient: EmailRecipient | PhoneRecipient =\n      identifierType === \"email\"\n        ? {\n    "
        },
        {
          "type": "email",
          "line": 132,
          "rule": "const recipient: EmailRecipient | PhoneRecipient =\n      identifierType === \"email\"\n        ? {\n    "
        },
        {
          "type": "email",
          "line": 133,
          "rule": "recipient: EmailRecipient | PhoneRecipient =\n      identifierType === \"email\"\n        ? {\n          "
        },
        {
          "type": "email",
          "line": 134,
          "rule": "identifierType === \"email\"\n        ? {\n            type: \"email\",\n            value: identifier,\n   "
        },
        {
          "type": "email",
          "line": 134,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 134,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 135,
          "rule": "{\n            type: \"email\",\n            value: identifier,\n            language,\n            name: "
        },
        {
          "type": "email",
          "line": 135,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 135,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "{\n            type: \"phone\",\n            value: identifier,\n            language,\n          }"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 138,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 153,
          "rule": "return {\n      success: true,\n      message: \"OTP sent successfully\",\n      obscuredIdentifier: iden"
        },
        {
          "type": "email",
          "line": 154,
          "rule": "{\n      success: true,\n      message: \"OTP sent successfully\",\n      obscuredIdentifier: identifierT"
        },
        {
          "type": "email",
          "line": 155,
          "rule": "obscuredIdentifier: identifierType === \"email\" ? obscureEmail(identifier) : obscurePhone(identifier)"
        },
        {
          "type": "email",
          "line": 155,
          "rule": "identifierType === \"email\" ? obscureEmail(identifier) : obscurePhone(identifier)"
        },
        {
          "type": "email",
          "line": 155,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 156,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 161,
          "rule": "logger.error(`[${otpId}] Error generating OTP:`, {\n      error: errorMessage,\n      stack: errorStac"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "logger.error(`[${otpId}] Error generating OTP:`, {\n      error: errorMessage,\n      stack: errorStac"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "{\n      error: errorMessage,\n      stack: errorStack,\n      identifierType,\n      identifier: identi"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "identifier: identifierType === \"email\" \n        ? `${identifier.substring(0, 3)}***${identifier.spli"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "identifierType === \"email\" \n        ? `${identifier.substring(0, 3)}***${identifier.split(\"@\")[1]}`\n"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 164,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 171,
          "rule": "export async function verifyOTP(\n  identifier: string,\n  identifierType: \"email\" | \"phone\",\n  code: "
        },
        {
          "type": "email",
          "line": 172,
          "rule": "identifierType: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 173,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 173,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 173,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 173,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 173,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 254,
          "rule": "export async function sendWelcomeEmail(\n  email: string,\n  name: string,\n  language: NotificationLan"
        },
        {
          "type": "email",
          "line": 255,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 255,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 258,
          "rule": "{\n  const welcomeId = `welcome_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`\n\n  try "
        },
        {
          "type": "email",
          "line": 260,
          "rule": "try {\n    logger.info(\n      `[${welcomeId}] Sending welcome email to: ${email.substring(0, 3)}***${"
        },
        {
          "type": "email",
          "line": 260,
          "rule": "{\n    logger.info(\n      `[${welcomeId}] Sending welcome email to: ${email.substring(0, 3)}***${emai"
        },
        {
          "type": "email",
          "line": 260,
          "rule": "logger.info(\n      `[${welcomeId}] Sending welcome email to: ${email.substring(0, 3)}***${email.spli"
        },
        {
          "type": "email",
          "line": 260,
          "rule": "logger.info(\n      `[${welcomeId}] Sending welcome email to: ${email.substring(0, 3)}***${email.spli"
        },
        {
          "type": "email",
          "line": 260,
          "rule": "`[${welcomeId}] Sending welcome email to: ${email.substring(0, 3)}***${email.split(\"@\")[1]}, name: $"
        },
        {
          "type": "email",
          "line": 260,
          "rule": "welcomeId}] Sending welcome email to: ${"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "}] Sending welcome email to: ${"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "email.substring(0, 3)}***${"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "email.substring(0, 3)"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "email.substring"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 262,
          "rule": "email.split(\"@\")[1]}, name: ${"
        },
        {
          "type": "email",
          "line": 262,
          "rule": "email.split(\"@\")[1]"
        },
        {
          "type": "email",
          "line": 262,
          "rule": "email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 262,
          "rule": "email.split"
        },
        {
          "type": "email",
          "line": 262,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 263,
          "rule": "const recipient: EmailRecipient = {\n      type: \"email\",\n      value: email,\n      language,\n      n"
        },
        {
          "type": "email",
          "line": 263,
          "rule": "const recipient: EmailRecipient = {\n      type: \"email\",\n      value: email,\n      language,\n      n"
        },
        {
          "type": "email",
          "line": 263,
          "rule": "recipient: EmailRecipient = {\n      type: \"email\",\n      value: email,\n      language,\n      name,\n "
        },
        {
          "type": "email",
          "line": 263,
          "rule": "{\n      type: \"email\",\n      value: email,\n      language,\n      name,\n    }"
        },
        {
          "type": "email",
          "line": 263,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 264,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 264,
          "rule": "value: email"
        },
        {
          "type": "email",
          "line": 264,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 266,
          "rule": "logger.info(`[${welcomeId}] Welcome email result: ${result.success ? \"Success\" : \"Failed\"}`)"
        },
        {
          "type": "email",
          "line": 266,
          "rule": "logger.info(`[${welcomeId}] Welcome email result: ${result.success ? \"Success\" : \"Failed\"}`)"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "`[${welcomeId}] Welcome email result: ${result.success ? \"Success\" : \"Failed\"}`"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "welcomeId}] Welcome email result: ${"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "}] Welcome email result: ${"
        },
        {
          "type": "email",
          "line": 268,
          "rule": "return {\n      success: result.success,\n      message: result.success ? \"Welcome email sent\" : resul"
        },
        {
          "type": "email",
          "line": 269,
          "rule": "{\n      success: result.success,\n      message: result.success ? \"Welcome email sent\" : result.error"
        },
        {
          "type": "email",
          "line": 269,
          "rule": "message: result.success ? \"Welcome email sent\" : result.error || \"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 270,
          "rule": "result.success ? \"Welcome email sent\" : result.error || \"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 270,
          "rule": "\"Welcome email sent\""
        },
        {
          "type": "email",
          "line": 270,
          "rule": "result.error || \"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 271,
          "rule": "\"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 272,
          "rule": "catch (error) {\n    logger.error(`[${welcomeId}] Error sending welcome email:`, error)\n    return {\n"
        },
        {
          "type": "email",
          "line": 272,
          "rule": "{\n    logger.error(`[${welcomeId}] Error sending welcome email:`, error)\n    return {\n      success:"
        },
        {
          "type": "email",
          "line": 272,
          "rule": "logger.error(`[${welcomeId}] Error sending welcome email:`, error)"
        },
        {
          "type": "email",
          "line": 272,
          "rule": "logger.error(`[${welcomeId}] Error sending welcome email:`, error)"
        },
        {
          "type": "email",
          "line": 272,
          "rule": "`[${welcomeId}] Error sending welcome email:`"
        },
        {
          "type": "email",
          "line": 272,
          "rule": "welcomeId}] Error sending welcome email:`"
        },
        {
          "type": "email",
          "line": 272,
          "rule": "}] Error sending welcome email:`"
        },
        {
          "type": "email",
          "line": 275,
          "rule": "export async function sendTestNotification(\n  recipient: string,\n  type: \"email\" | \"phone\",\n  notifi"
        },
        {
          "type": "email",
          "line": 278,
          "rule": "type: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 278,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 278,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 278,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 278,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 278,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 284,
          "rule": "try {\n    logger.info(\n      `[${testId}] Sending test ${notificationType} notification to ${type}: "
        },
        {
          "type": "email",
          "line": 284,
          "rule": "{\n    logger.info(\n      `[${testId}] Sending test ${notificationType} notification to ${type}: ${\n "
        },
        {
          "type": "email",
          "line": 284,
          "rule": "logger.info(\n      `[${testId}] Sending test ${notificationType} notification to ${type}: ${\n       "
        },
        {
          "type": "email",
          "line": 284,
          "rule": "logger.info(\n      `[${testId}] Sending test ${notificationType} notification to ${type}: ${\n       "
        },
        {
          "type": "email",
          "line": 285,
          "rule": "`[${testId}] Sending test ${notificationType} notification to ${type}: ${\n        type === \"email\"\n "
        },
        {
          "type": "email",
          "line": 286,
          "rule": "type === \"email\"\n          ? `${recipient.substring(0, 3)}***${recipient.split(\"@\")[1]}`\n          :"
        },
        {
          "type": "email",
          "line": 286,
          "rule": "type === \"email\"\n          ? `${recipient.substring(0, 3)}***${recipient.split(\"@\")[1]}`\n          :"
        },
        {
          "type": "email",
          "line": 286,
          "rule": "type === \"email\""
        },
        {
          "type": "email",
          "line": 287,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 290,
          "rule": "if (type === \"email\" && !validateEmail(recipient)) {\n      logger.warn(`[${testId}] Invalid email ad"
        },
        {
          "type": "email",
          "line": 291,
          "rule": "type === \"email\" && !validateEmail(recipient)"
        },
        {
          "type": "email",
          "line": 291,
          "rule": "type === \"email\""
        },
        {
          "type": "email",
          "line": 291,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 291,
          "rule": "!validateEmail(recipient)"
        },
        {
          "type": "general",
          "line": 291,
          "rule": "validateEmail(recipient)"
        },
        {
          "type": "general",
          "line": 291,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 292,
          "rule": "{\n      logger.warn(`[${testId}] Invalid email address format`)\n      return {\n        success: fals"
        },
        {
          "type": "email",
          "line": 292,
          "rule": "logger.warn(`[${testId}] Invalid email address format`)"
        },
        {
          "type": "email",
          "line": 292,
          "rule": "logger.warn(`[${testId}] Invalid email address format`)"
        },
        {
          "type": "email",
          "line": 292,
          "rule": "`[${testId}] Invalid email address format`"
        },
        {
          "type": "email",
          "line": 292,
          "rule": "testId}] Invalid email address format`"
        },
        {
          "type": "email",
          "line": 293,
          "rule": "}] Invalid email address format`"
        },
        {
          "type": "email",
          "line": 293,
          "rule": "return {\n        success: false,\n        message: \"Invalid email address\",\n      }"
        },
        {
          "type": "email",
          "line": 293,
          "rule": "{\n        success: false,\n        message: \"Invalid email address\",\n      }"
        },
        {
          "type": "email",
          "line": 294,
          "rule": "message: \"Invalid email address\""
        },
        {
          "type": "email",
          "line": 294,
          "rule": "\"Invalid email address\""
        },
        {
          "type": "phone",
          "line": 295,
          "rule": "if (type === \"phone\" && !validatePhone(recipient)) {\n      logger.warn(`[${testId}] Invalid phone nu"
        },
        {
          "type": "phone",
          "line": 295,
          "rule": "type === \"phone\" && !validatePhone(recipient)"
        },
        {
          "type": "phone",
          "line": 295,
          "rule": "type === \"phone\""
        },
        {
          "type": "phone",
          "line": 295,
          "rule": "\"phone\""
        },
        {
          "type": "general",
          "line": 296,
          "rule": "!validatePhone(recipient)"
        },
        {
          "type": "general",
          "line": 296,
          "rule": "validatePhone(recipient)"
        },
        {
          "type": "general",
          "line": 296,
          "rule": "validatePhone"
        },
        {
          "type": "phone",
          "line": 296,
          "rule": "{\n      logger.warn(`[${testId}] Invalid phone number format`)\n      return {\n        success: false"
        },
        {
          "type": "phone",
          "line": 296,
          "rule": "logger.warn(`[${testId}] Invalid phone number format`)"
        },
        {
          "type": "phone",
          "line": 296,
          "rule": "logger.warn(`[${testId}] Invalid phone number format`)"
        },
        {
          "type": "phone",
          "line": 297,
          "rule": "`[${testId}] Invalid phone number format`"
        },
        {
          "type": "phone",
          "line": 297,
          "rule": "testId}] Invalid phone number format`"
        },
        {
          "type": "phone",
          "line": 297,
          "rule": "}] Invalid phone number format`"
        },
        {
          "type": "phone",
          "line": 297,
          "rule": "return {\n        success: false,\n        message: \"Invalid phone number\",\n      }"
        },
        {
          "type": "phone",
          "line": 298,
          "rule": "{\n        success: false,\n        message: \"Invalid phone number\",\n      }"
        },
        {
          "type": "phone",
          "line": 298,
          "rule": "message: \"Invalid phone number\""
        },
        {
          "type": "phone",
          "line": 299,
          "rule": "\"Invalid phone number\""
        },
        {
          "type": "email",
          "line": 299,
          "rule": "const recipientObj =\n      type === \"email\"\n        ? { type: \"email\" as const, value: recipient, la"
        },
        {
          "type": "email",
          "line": 299,
          "rule": "const recipientObj =\n      type === \"email\"\n        ? { type: \"email\" as const, value: recipient, la"
        },
        {
          "type": "email",
          "line": 300,
          "rule": "recipientObj =\n      type === \"email\"\n        ? { type: \"email\" as const, value: recipient, language"
        },
        {
          "type": "email",
          "line": 300,
          "rule": "type === \"email\"\n        ? { type: \"email\" as const, value: recipient, language }\n        : { type: "
        },
        {
          "type": "email",
          "line": 300,
          "rule": "type === \"email\""
        },
        {
          "type": "email",
          "line": 301,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 301,
          "rule": "{ type: \"email\" as const, value: recipient, language }"
        },
        {
          "type": "email",
          "line": 301,
          "rule": "type: \"email\" as const"
        },
        {
          "type": "email",
          "line": 301,
          "rule": "\"email\" as const"
        },
        {
          "type": "email",
          "line": 301,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 302,
          "rule": "{ type: \"phone\" as const, value: recipient, language }"
        },
        {
          "type": "phone",
          "line": 302,
          "rule": "type: \"phone\" as const"
        },
        {
          "type": "phone",
          "line": 303,
          "rule": "\"phone\" as const"
        },
        {
          "type": "phone",
          "line": 303,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 311,
          "rule": "case \"welcome\":\n        logger.info(`[${testId}] Sending test welcome message`)\n        if (type ==="
        },
        {
          "type": "email",
          "line": 313,
          "rule": "if (type === \"email\") {\n          result = await notificationManager.sendWelcome(recipientObj as Ema"
        },
        {
          "type": "email",
          "line": 313,
          "rule": "type === \"email\""
        },
        {
          "type": "email",
          "line": 313,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 316,
          "rule": "{\n          result = { success: false, error: \"Cannot send welcome to phone\" }\n        }"
        },
        {
          "type": "phone",
          "line": 316,
          "rule": "result = { success: false, error: \"Cannot send welcome to phone\" }"
        },
        {
          "type": "phone",
          "line": 316,
          "rule": "result = { success: false, error: \"Cannot send welcome to phone\" }"
        },
        {
          "type": "phone",
          "line": 316,
          "rule": "{ success: false, error: \"Cannot send welcome to phone\" }"
        },
        {
          "type": "phone",
          "line": 317,
          "rule": "error: \"Cannot send welcome to phone\""
        },
        {
          "type": "phone",
          "line": 317,
          "rule": "\"Cannot send welcome to phone\""
        },
        {
          "type": "email",
          "line": 318,
          "rule": "case \"password-reset\":\n        logger.info(`[${testId}] Sending test password reset`)\n        if (ty"
        },
        {
          "type": "email",
          "line": 320,
          "rule": "if (type === \"email\") {\n          result = await notificationManager.sendPasswordReset(\n            "
        },
        {
          "type": "email",
          "line": 320,
          "rule": "type === \"email\""
        },
        {
          "type": "email",
          "line": 320,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 325,
          "rule": "{\n          result = { success: false, error: \"Cannot send password reset to phone\" }\n        }"
        },
        {
          "type": "phone",
          "line": 325,
          "rule": "result = { success: false, error: \"Cannot send password reset to phone\" }"
        },
        {
          "type": "phone",
          "line": 325,
          "rule": "result = { success: false, error: \"Cannot send password reset to phone\" }"
        },
        {
          "type": "phone",
          "line": 325,
          "rule": "{ success: false, error: \"Cannot send password reset to phone\" }"
        },
        {
          "type": "phone",
          "line": 326,
          "rule": "error: \"Cannot send password reset to phone\""
        },
        {
          "type": "phone",
          "line": 326,
          "rule": "\"Cannot send password reset to phone\""
        },
        {
          "type": "email",
          "line": 341,
          "rule": "export async function sendOTP(\n  identifier: string,\n  identifierType: \"email\" | \"phone\",\n  language"
        },
        {
          "type": "email",
          "line": 343,
          "rule": "identifierType: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 343,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 343,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 343,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 344,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 344,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 351,
          "rule": "if (identifierType === \"email\") {\n      recipient = { type: \"email\", value: identifier, language }\n "
        },
        {
          "type": "email",
          "line": 352,
          "rule": "identifierType === \"email\""
        },
        {
          "type": "email",
          "line": 352,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 352,
          "rule": "{\n      recipient = { type: \"email\", value: identifier, language }\n    }"
        },
        {
          "type": "email",
          "line": 352,
          "rule": "recipient = { type: \"email\", value: identifier, language }"
        },
        {
          "type": "email",
          "line": 352,
          "rule": "recipient = { type: \"email\", value: identifier, language }"
        },
        {
          "type": "email",
          "line": 353,
          "rule": "{ type: \"email\", value: identifier, language }"
        },
        {
          "type": "email",
          "line": 353,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 353,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 354,
          "rule": "{\n      recipient = { type: \"phone\", value: identifier, language }\n    }"
        },
        {
          "type": "phone",
          "line": 354,
          "rule": "recipient = { type: \"phone\", value: identifier, language }"
        },
        {
          "type": "phone",
          "line": 354,
          "rule": "recipient = { type: \"phone\", value: identifier, language }"
        },
        {
          "type": "phone",
          "line": 354,
          "rule": "{ type: \"phone\", value: identifier, language }"
        },
        {
          "type": "phone",
          "line": 354,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 354,
          "rule": "\"phone\""
        }
      ],
      "errorHandling": [
        {
          "line": 29,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 177,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 194,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 214,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 260,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 284,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 348,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\common\\ui\\chart.tsx",
      "lines": 366,
      "complexity": 53,
      "conditionals": [
        {
          "type": "if",
          "line": 14,
          "condition": "!context",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "!colorConfig.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "hideLabel || !payload?.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "labelFormatter",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 90,
          "condition": "!value",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "!active || !payload?.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 172,
          "condition": "!payload?.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 198,
          "condition": "typeof payload !== \"object\" || payload === null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 204,
          "condition": "key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 208,
          "condition": "payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useChart",
          "line": 13,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ChartStyle",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ id: string; config: ChartConfig }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 169,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 178,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPayloadConfigFromPayload",
          "line": 195,
          "parameters": [
            {
              "name": "config",
              "type": "ChartConfig"
            },
            {
              "name": "payload",
              "type": "unknown"
            },
            {
              "name": "key",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\chart.tsx",
      "lines": 366,
      "complexity": 53,
      "conditionals": [
        {
          "type": "if",
          "line": 14,
          "condition": "!context",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "!colorConfig.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "hideLabel || !payload?.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "labelFormatter",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "!value",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "!active || !payload?.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 172,
          "condition": "!payload?.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 198,
          "condition": "typeof payload !== \"object\" || payload === null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 204,
          "condition": "key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 208,
          "condition": "payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useChart",
          "line": 12,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ChartStyle",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ id: string; config: ChartConfig }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 169,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 178,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPayloadConfigFromPayload",
          "line": 195,
          "parameters": [
            {
              "name": "config",
              "type": "ChartConfig"
            },
            {
              "name": "payload",
              "type": "unknown"
            },
            {
              "name": "key",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\purchase\\purchase-stats-overview.tsx",
      "lines": 265,
      "complexity": 50,
      "conditionals": [
        {
          "type": "if",
          "line": 18,
          "condition": "isLoading",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseStatsOverview",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseStatsOverviewProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatCurrency",
          "line": 14,
          "parameters": [
            {
              "name": "amount",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatPercentage",
          "line": 16,
          "parameters": [
            {
              "name": "value",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 87,
          "parameters": [
            {
              "name": "stat",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "lines": 532,
      "complexity": 49,
      "conditionals": [
        {
          "type": "if",
          "line": 60,
          "condition": "selectedTreatmentData?.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "selectedTreatmentData?.pricingType === \"duration_based\" && selectedTreatmentData.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "selectedTreatmentData?.pricingType === \"duration_based\" && selectedTreatmentData.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "!selectedTreatmentData",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "selectedTreatmentData.pricingType === \"fixed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "selectedTreatmentData.pricingType === \"duration_based\" && selectedDurationData",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "!selectedSubscriptionData || singleSessionPrice <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 107,
          "condition": "session?.user?.id && currentStep !== \"complete\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "currentIndex < steps.length - 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 122,
          "condition": "nextStep.key === \"duration\" && selectedTreatmentData?.pricingType !== \"duration_based\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 126,
          "condition": "afterDurationIndex !== -1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 132,
          "condition": "currentIndex > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 134,
          "condition": "prevStep.key === \"duration\" && selectedTreatmentData?.pricingType !== \"duration_based\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 139,
          "condition": "beforeDurationIndex !== -1",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 143,
          "cases": 6,
          "expression": "currentStep"
        },
        {
          "type": "if",
          "line": 156,
          "condition": "!selectedSubscriptionId || !selectedTreatmentId || !selectedPaymentMethodId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 160,
          "condition": "selectedTreatmentData?.pricingType === \"duration_based\" && !selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 170,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 180,
          "condition": "purchaseComplete",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 191,
          "condition": "subscriptions.length === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseSubscriptionClient",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseSubscriptionClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 79,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 85,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 104,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 106,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "save",
          "line": 106,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 109,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleNextStep",
          "line": 118,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePrevStep",
          "line": 131,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 132,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 138,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 143,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePurchase",
          "line": 156,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handlePaymentMethodAdded",
          "line": 177,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 187,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 190,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 214,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 261,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 262,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 270,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 298,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 305,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 397,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 402,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 428,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 164,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\booking\\steps\\guest-summary-step.tsx",
      "lines": 438,
      "complexity": 48,
      "conditionals": [
        {
          "type": "if",
          "line": 48,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && selectedTreatment.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "selectedTreatment?.pricingType === \"fixed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "selectedDuration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "hours > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "mins > 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "hours > 0",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 74,
          "cases": 4,
          "expression": "bookingOptions.therapistGenderPreference"
        },
        {
          "type": "if",
          "line": 81,
          "condition": "!couponCode.trim() || !setBookingOptions",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "!setBookingOptions",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestSummaryStep",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestSummaryStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateString",
          "line": 54,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getTreatmentDurationText",
          "line": 59,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getGenderPreferenceText",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "formatPrice",
          "line": 79,
          "parameters": [
            {
              "name": "amount",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCouponApply",
          "line": 81,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 85,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCouponRemove",
          "line": 90,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 257,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 300,
          "parameters": [
            {
              "name": "surcharge",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 18,
          "rule": "interface GuestInfo {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  phone: string\r\n  "
        },
        {
          "type": "email",
          "line": 19,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "<span className=\"font-medium\">{guestInfo.email}</span>"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "{guestInfo.email}"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "<span className=\"font-medium\">{guestInfo.phone}</span>"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "{guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 83,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\common\\ui\\calendar.tsx",
      "lines": 361,
      "complexity": 48,
      "conditionals": [
        {
          "type": "if",
          "line": 83,
          "condition": "currentMonth.getMonth() === 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 88,
          "condition": "currentMonth.getMonth() === 11",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 102,
          "condition": "!selected",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "mode === \"single\" && selected instanceof Date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 105,
          "condition": "mode === \"multiple\" && Array.isArray(selected)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "mode === \"range\" && selected && typeof selected === \"object\" && \"from\" in selected",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "!selected.to",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 119,
          "condition": "disabled && disabled(date)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 119,
          "condition": "mode === \"single\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 121,
          "condition": "mode === \"multiple\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 125,
          "condition": "isAlreadySelected",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 129,
          "condition": "mode === \"range\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 131,
          "condition": "!currentSelected || (currentSelected.from && currentSelected.to)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 134,
          "condition": "currentSelected.from && !currentSelected.to",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 135,
          "condition": "date < currentSelected.from",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "Calendar",
          "line": 18,
          "parameters": [
            {
              "name": "unknown",
              "type": "CalendarProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 31,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "goToPreviousMonth",
          "line": 83,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "goToNextMonth",
          "line": 88,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleMonthChange",
          "line": 94,
          "parameters": [
            {
              "name": "monthIndex",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleYearChange",
          "line": 97,
          "parameters": [
            {
              "name": "year",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "isSelected",
          "line": 102,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 107,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "isToday",
          "line": 115,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDateClick",
          "line": 118,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 124,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [
            {
              "name": "month",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [
            {
              "name": "year",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 193,
          "parameters": [
            {
              "name": "day",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 198,
          "parameters": [
            {
              "name": "day",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 219,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 231,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 239,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "lines": 482,
      "complexity": 48,
      "conditionals": [
        {
          "type": "if",
          "line": 41,
          "condition": "data.voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 42,
          "condition": "!data.monetaryValue ||\r\n        isNaN(Number.parseFloat(data.monetaryValue)) ||\r\n        Number.parseFloat(data.monetaryValue) <= 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 49,
          "condition": "data.voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 50,
          "condition": "!data.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "data.validFrom && data.validUntil && data.validUntil < data.validFrom",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "treatmentsRes.success && treatmentsRes.treatments",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 105,
          "condition": "initialData?.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "foundTreatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 114,
          "condition": "usersRes.success && usersRes.users",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 122,
          "condition": "voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 146,
          "condition": "!result.success || !result.giftVoucher",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            },
            {
              "name": "ctx",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "GiftVoucherForm",
          "line": 69,
          "parameters": [
            {
              "name": "unknown",
              "type": "GiftVoucherFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 99,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "fetchData",
          "line": 99,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 107,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleTreatmentChange",
          "line": 128,
          "parameters": [
            {
              "name": "treatmentId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 129,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onSubmit",
          "line": 134,
          "parameters": [
            {
              "name": "values",
              "type": "GiftVoucherFormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 164,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 185,
          "parameters": [
            {
              "name": "user",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 194,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 213,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 230,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 234,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 246,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 270,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 282,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 302,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 310,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 331,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 338,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 348,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 34,
          "rule": "ownerUserId: z.string().min(1, \"Owner user is required\")"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "z.string().min(1, \"Owner user is required\")"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "\"Owner user is required\""
        },
        {
          "type": "required",
          "line": 36,
          "rule": "validFrom: z.date({ required_error: \"Valid from date is required.\" })"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "z.date({ required_error: \"Valid from date is required.\" })"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "{ required_error: \"Valid from date is required.\" }"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "required_error: \"Valid from date is required.\""
        },
        {
          "type": "required",
          "line": 37,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "\"Valid from date is required.\""
        },
        {
          "type": "required",
          "line": 38,
          "rule": "validUntil: z.date({ required_error: \"Valid until date is required.\" })"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "z.date({ required_error: \"Valid until date is required.\" })"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "{ required_error: \"Valid until date is required.\" }"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "required_error: \"Valid until date is required.\""
        },
        {
          "type": "required",
          "line": 38,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "\"Valid until date is required.\""
        },
        {
          "type": "required",
          "line": 49,
          "rule": "if (data.voucherType === \"treatment\") {\r\n      if (!data.treatmentId) {\r\n        ctx.addIssue({\r\n   "
        },
        {
          "type": "required",
          "line": 50,
          "rule": "{\r\n      if (!data.treatmentId) {\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n "
        },
        {
          "type": "required",
          "line": 50,
          "rule": "if (!data.treatmentId) {\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          "
        },
        {
          "type": "required",
          "line": 51,
          "rule": "{\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: \"Treatment is "
        },
        {
          "type": "required",
          "line": 51,
          "rule": "ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: \"Treatment is required fo"
        },
        {
          "type": "required",
          "line": 51,
          "rule": "ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: \"Treatment is required fo"
        },
        {
          "type": "required",
          "line": 51,
          "rule": "{\r\n          code: z.ZodIssueCode.custom,\r\n          message: \"Treatment is required for treatment v"
        },
        {
          "type": "required",
          "line": 52,
          "rule": "message: \"Treatment is required for treatment voucher\""
        },
        {
          "type": "required",
          "line": 52,
          "rule": "\"Treatment is required for treatment voucher\""
        },
        {
          "type": "email",
          "line": 68,
          "rule": "interface UserOption {\r\n  _id: string\r\n  name: string\r\n  email: string\r\n}"
        },
        {
          "type": "email",
          "line": 69,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 69,
          "rule": "email"
        },
        {
          "type": "general",
          "line": 134,
          "rule": "async function onSubmit(values: GiftVoucherFormValues) {\r\n    try {\r\n      setIsLoading(true)\r\n     "
        },
        {
          "type": "general",
          "line": 135,
          "rule": "{\r\n    try {\r\n      setIsLoading(true)\r\n      const formData: AdminGiftVoucherFormData = {\r\n        "
        },
        {
          "type": "general",
          "line": 135,
          "rule": "try {\r\n      setIsLoading(true)\r\n      const formData: AdminGiftVoucherFormData = {\r\n        ...valu"
        },
        {
          "type": "general",
          "line": 135,
          "rule": "{\r\n      setIsLoading(true)\r\n      const formData: AdminGiftVoucherFormData = {\r\n        ...values, "
        },
        {
          "type": "general",
          "line": 136,
          "rule": "const formData: AdminGiftVoucherFormData = {\r\n        ...values, // Spread validated form values\r\n  "
        },
        {
          "type": "general",
          "line": 136,
          "rule": "const formData: AdminGiftVoucherFormData = {\r\n        ...values, // Spread validated form values\r\n  "
        },
        {
          "type": "general",
          "line": 136,
          "rule": "formData: AdminGiftVoucherFormData = {\r\n        ...values, // Spread validated form values\r\n        "
        },
        {
          "type": "general",
          "line": 137,
          "rule": "{\r\n        ...values, // Spread validated form values\r\n        monetaryValue: values.monetaryValue, "
        },
        {
          "type": "email",
          "line": 184,
          "rule": "<SelectContent>\r\n                  {users.map((user) => (\r\n                    <SelectItem key={user"
        },
        {
          "type": "email",
          "line": 185,
          "rule": "{users.map((user) => (\r\n                    <SelectItem key={user._id} value={user._id}>\r\n          "
        },
        {
          "type": "email",
          "line": 185,
          "rule": "users.map((user) => (\r\n                    <SelectItem key={user._id} value={user._id}>\r\n           "
        },
        {
          "type": "email",
          "line": 185,
          "rule": "(user) => (\r\n                    <SelectItem key={user._id} value={user._id}>\r\n                     "
        },
        {
          "type": "email",
          "line": 185,
          "rule": "(\r\n                    <SelectItem key={user._id} value={user._id}>\r\n                      {user.nam"
        },
        {
          "type": "email",
          "line": 185,
          "rule": "<SelectItem key={user._id} value={user._id}>\r\n                      {user.name} ({user.email})\r\n    "
        },
        {
          "type": "email",
          "line": 187,
          "rule": "{user.email}"
        },
        {
          "type": "email",
          "line": 187,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 188,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 135,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "lines": 319,
      "complexity": 48,
      "conditionals": [
        {
          "type": "if",
          "line": 63,
          "condition": "guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "!guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 80,
          "condition": "result.success && result.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "guestInfo.isGift && guestInfo.sendOption === \"scheduled\" && guestInfo.sendDate && guestInfo.sendTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "!initRes.success || !initRes.voucherId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 119,
          "condition": "confirmRes.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 178,
          "condition": "next.selectedTreatmentId !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 180,
          "condition": "next.selectedDurationId !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 240,
          "condition": "currentStep === 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 246,
          "condition": "currentStep === 2",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 247,
          "condition": "currentStep === 3",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 249,
          "condition": "currentStep === 4",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 250,
          "condition": "currentStep === 5",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 256,
          "condition": "currentStep === 6 && purchaseComplete",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestGiftVoucherWizard",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "Props"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "nextStep",
          "line": 60,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "prevStep",
          "line": 61,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleGuestInfoSubmit",
          "line": 74,
          "parameters": [
            {
              "name": "info",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handlePurchase",
          "line": 83,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "renderVoucherTypeStep",
          "line": 125,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 134,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 144,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderMonetaryStep",
          "line": 155,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 164,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderTreatmentStep",
          "line": 171,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [
            {
              "name": "update",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderSummaryStep",
          "line": 185,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderStep",
          "line": 239,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 74,
          "rule": "{\r\n    setGuestInfo(info)\r\n    if (!guestUserId) {\r\n      const result = await createGuestUser({\r\n  "
        },
        {
          "type": "email",
          "line": 75,
          "rule": "if (!guestUserId) {\r\n      const result = await createGuestUser({\r\n        firstName: info.firstName"
        },
        {
          "type": "email",
          "line": 75,
          "rule": "{\r\n      const result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastNam"
        },
        {
          "type": "email",
          "line": 75,
          "rule": "const result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.l"
        },
        {
          "type": "email",
          "line": 75,
          "rule": "const result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.l"
        },
        {
          "type": "email",
          "line": 75,
          "rule": "result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.lastNam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n     "
        },
        {
          "type": "email",
          "line": 76,
          "rule": "createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n        ema"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "{\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n        email: info.email,\r"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "email: info.email"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "info.email"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 78,
          "rule": "phone: info.phone"
        },
        {
          "type": "phone",
          "line": 78,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 78,
          "rule": "info.phone"
        },
        {
          "type": "phone",
          "line": 79,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "guestInfo: {\r\n        name: guestInfo.firstName + \" \" + guestInfo.lastName,\r\n        email: guestInf"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "{\r\n        name: guestInfo.firstName + \" \" + guestInfo.lastName,\r\n        email: guestInfo.email,\r\n "
        },
        {
          "type": "email",
          "line": 106,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 115,
          "rule": "guestInfo: {\r\n        name: guestInfo.firstName + \" \" + guestInfo.lastName,\r\n        email: guestInf"
        },
        {
          "type": "email",
          "line": 116,
          "rule": "{\r\n        name: guestInfo.firstName + \" \" + guestInfo.lastName,\r\n        email: guestInfo.email,\r\n "
        },
        {
          "type": "email",
          "line": 117,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 118,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 118,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 118,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 118,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 229,
          "rule": "<div className=\"flex justify-between\"><span>אימייל:</span><span>{guestInfo.email}</span></div>"
        },
        {
          "type": "email",
          "line": 230,
          "rule": "<span>{guestInfo.email}</span>"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "{guestInfo.email}"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 231,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 231,
          "rule": "<div className=\"flex justify-between\"><span>טלפון:</span><span>{guestInfo.phone}</span></div>"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "<span>{guestInfo.phone}</span>"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "{guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\auth\\reset-password\\reset-password-form.tsx",
      "lines": 345,
      "complexity": 47,
      "conditionals": [
        {
          "type": "if",
          "line": 35,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 43,
          "condition": "confirmPassword",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "password !== confirmPassword",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 65,
          "condition": "isVerifying",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 80,
          "condition": "!tokenValid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ResetPasswordForm",
          "line": 17,
          "parameters": [
            {
              "name": "unknown",
              "type": "ResetPasswordFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "verifyToken",
          "line": 33,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handlePasswordChange",
          "line": 42,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleConfirmPasswordChange",
          "line": 46,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 49,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 163,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 226,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 160,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 160,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 223,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 223,
          "rule": "required"
        }
      ],
      "errorHandling": [
        {
          "line": 34,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 57,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\purchase-reports\\purchase-reports-client.tsx",
      "lines": 254,
      "complexity": 47,
      "conditionals": [
        {
          "type": "if",
          "line": 35,
          "condition": "result.success && result.data",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 52,
          "condition": "result.success && result.data",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 71,
          "condition": "activeTab === \"transactions\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "activeTab === \"overview\"",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "PurchaseReportsClient",
          "line": 19,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "loadStats",
          "line": 33,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "loadAllTransactions",
          "line": 49,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "newFilters",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 69,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleFiltersChange",
          "line": 74,
          "parameters": [
            {
              "name": "newFilters",
              "type": "Partial<PurchaseFilters>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleClearFilters",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePageChange",
          "line": 77,
          "parameters": [
            {
              "name": "page",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 79,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 184,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 34,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 50,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "lines": 329,
      "complexity": 46,
      "conditionals": [
        {
          "type": "if",
          "line": 23,
          "condition": "!dateString",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "!bookingId || sessionStatus !== \"authenticated\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "sessionStatus === \"unauthenticated\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 62,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 80,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 96,
          "condition": "result.success && result.booking",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 110,
          "condition": "sessionStatus === \"loading\" || isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 122,
          "condition": "error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 128,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 144,
          "condition": "booking.status === \"in_process\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 150,
          "condition": "isAssignedToCurrentPro",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 151,
          "condition": "booking.status === \"confirmed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 166,
          "condition": "!statusKey",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDateTime",
          "line": 22,
          "parameters": [
            {
              "name": "dateString",
              "type": "string | Date | undefined"
            },
            {
              "name": "locale",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ProfessionalBookingManagementPage",
          "line": 29,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleAcceptBooking",
          "line": 60,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleMarkEnRoute",
          "line": 78,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleMarkCompleted",
          "line": 94,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "renderActionButtons",
          "line": 144,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStatusText",
          "line": 165,
          "parameters": [
            {
              "name": "statusKey",
              "type": "string | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [
            {
              "name": "l",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 267,
          "parameters": [
            {
              "name": "args",
              "type": "any[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 269,
          "parameters": [
            {
              "name": "args",
              "type": "any[]"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 140,
          "rule": "const clientPhone = booking.userId?.phone || t(\"common.notAvailable\")"
        },
        {
          "type": "phone",
          "line": 140,
          "rule": "const clientPhone = booking.userId?.phone || t(\"common.notAvailable\")"
        },
        {
          "type": "phone",
          "line": 140,
          "rule": "clientPhone = booking.userId?.phone || t(\"common.notAvailable\")"
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "booking.userId?.phone || t(\"common.notAvailable\")"
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "booking.userId?.phone"
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "const clientEmail = booking.userId?.email || t(\"common.notAvailable\")"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "const clientEmail = booking.userId?.email || t(\"common.notAvailable\")"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "clientEmail = booking.userId?.email || t(\"common.notAvailable\")"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "booking.userId?.email || t(\"common.notAvailable\")"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "booking.userId?.email"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 224,
          "rule": "<p>\r\n                <strong>{t(\"professionalBookingManagement.clientDetails.phone\")}:</strong> {cli"
        },
        {
          "type": "phone",
          "line": 224,
          "rule": "<strong>{t(\"professionalBookingManagement.clientDetails.phone\")}:</strong>"
        },
        {
          "type": "phone",
          "line": 224,
          "rule": "{t(\"professionalBookingManagement.clientDetails.phone\")}"
        },
        {
          "type": "phone",
          "line": 224,
          "rule": "t(\"professionalBookingManagement.clientDetails.phone\")"
        },
        {
          "type": "phone",
          "line": 224,
          "rule": "\"professionalBookingManagement.clientDetails.phone\""
        },
        {
          "type": "email",
          "line": 227,
          "rule": "<p>\r\n                <strong>{t(\"professionalBookingManagement.clientDetails.email\")}:</strong> {cli"
        },
        {
          "type": "email",
          "line": 227,
          "rule": "<strong>{t(\"professionalBookingManagement.clientDetails.email\")}:</strong>"
        },
        {
          "type": "email",
          "line": 227,
          "rule": "{t(\"professionalBookingManagement.clientDetails.email\")}"
        },
        {
          "type": "email",
          "line": 227,
          "rule": "t(\"professionalBookingManagement.clientDetails.email\")"
        },
        {
          "type": "email",
          "line": 227,
          "rule": "\"professionalBookingManagement.clientDetails.email\""
        }
      ],
      "errorHandling": [
        {
          "line": 24,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 47,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\account\\phone-change-form.tsx",
      "lines": 251,
      "complexity": 45,
      "conditionals": [
        {
          "type": "if",
          "line": 31,
          "condition": "!phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 35,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 38,
          "condition": "result.message === \"phoneExists\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 52,
          "condition": "code.length !== 6",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 63,
          "condition": "onPhoneChanged",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "value && !/^\\d+$/.test(value)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 80,
          "condition": "value && index < 5",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "step === \"otp\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PhoneChangeForm",
          "line": 14,
          "parameters": [
            {
              "name": "unknown",
              "type": "PhoneChangeFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePhoneSubmit",
          "line": 25,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleOtpSubmit",
          "line": 49,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleOtpChange",
          "line": 75,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 109,
          "parameters": [
            {
              "name": "digit",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 114,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 123,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 7,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 7,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\")"
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\")"
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "[step, setStep] = useState<\"phone\" | \"otp\">(\"phone\")"
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "useState<\"phone\" | \"otp\">(\"phone\")"
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "\"phone\" | \"otp\""
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "const handlePhoneSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "const handlePhoneSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "handlePhoneSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    se"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n  "
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "{\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError(\"\")\r\n\r\n    // Get phone from PhoneIn"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "const phoneInput = document.querySelector('input[name=\"phone\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "const phoneInput = document.querySelector('input[name=\"phone\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "phoneInput = document.querySelector('input[name=\"phone\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "phoneInput"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "document.querySelector('input[name=\"phone\"]') as HTMLInputElement"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "document.querySelector('input[name=\"phone\"]')"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "'input[name=\"phone\"]'"
        },
        {
          "type": "phone",
          "line": 30,
          "rule": "const phone = phoneInput?.value"
        },
        {
          "type": "phone",
          "line": 30,
          "rule": "const phone = phoneInput?.value"
        },
        {
          "type": "phone",
          "line": 30,
          "rule": "phone = phoneInput?.value"
        },
        {
          "type": "phone",
          "line": 30,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 31,
          "rule": "phoneInput?.value"
        },
        {
          "type": "phone",
          "line": 31,
          "rule": "phoneInput"
        },
        {
          "type": "phone",
          "line": 31,
          "rule": "if (!phone) {\r\n      setError(t(\"errors.invalidPhone\"))\r\n      setIsLoading(false)\r\n      return\r\n  "
        },
        {
          "type": "phone",
          "line": 31,
          "rule": "!phone"
        },
        {
          "type": "phone",
          "line": 31,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "try {\r\n      const result = await requestPhoneChange(phone, language)\r\n\r\n      if (result.success) {"
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "{\r\n      const result = await requestPhoneChange(phone, language)\r\n\r\n      if (result.success) {\r\n  "
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "const result = await requestPhoneChange(phone, language)"
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "const result = await requestPhoneChange(phone, language)"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "result = await requestPhoneChange(phone, language)"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "await requestPhoneChange(phone, language)"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "requestPhoneChange(phone, language)"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "if (result.success) {\r\n        setNewPhone(phone)\r\n        setObscuredPhone(result.obscuredIdentifie"
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "{\r\n        setNewPhone(phone)\r\n        setObscuredPhone(result.obscuredIdentifier || \"\")\r\n        se"
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "setNewPhone(phone)"
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "setNewPhone(phone)"
        },
        {
          "type": "phone",
          "line": 36,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "{\r\n        if (result.message === \"phoneExists\") {\r\n          setError(\r\n            language === \"h"
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "if (result.message === \"phoneExists\") {\r\n          setError(\r\n            language === \"he\"\r\n       "
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "result.message === \"phoneExists\""
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "\"phoneExists\""
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "language === \"he\"\r\n              ? \"מספר הטלפון הזה כבר בשימוש\"\r\n              : language === \"ru\"\r\n"
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "language === \"ru\"\r\n                ? \"Этот номер телефона уже используется\"\r\n                : \"This"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "\"This phone number is already in use\""
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "setStep(\"phone\")"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "setStep(\"phone\")"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 80,
          "rule": "if (value && index < 5) {\r\n      const nextInput = document.getElementById(`phone-otp-${index + 1}`)"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "{\r\n      const nextInput = document.getElementById(`phone-otp-${index + 1}`)\r\n      nextInput?.focus"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "const nextInput = document.getElementById(`phone-otp-${index + 1}`)"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "const nextInput = document.getElementById(`phone-otp-${index + 1}`)"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "nextInput = document.getElementById(`phone-otp-${index + 1}`)"
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "document.getElementById(`phone-otp-${index + 1}`)"
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "`phone-otp-${index + 1}`"
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "`phone-otp-${"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "<div className=\"flex justify-center gap-2\">\r\n              {otpCode.map((digit, index) => (\r\n       "
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "{otpCode.map((digit, index) => (\r\n                <Input\r\n                  key={index}\r\n           "
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "otpCode.map((digit, index) => (\r\n                <Input\r\n                  key={index}\r\n            "
        },
        {
          "type": "phone",
          "line": 109,
          "rule": "(digit, index) => (\r\n                <Input\r\n                  key={index}\r\n                  id={`p"
        },
        {
          "type": "phone",
          "line": 109,
          "rule": "(\r\n                <Input\r\n                  key={index}\r\n                  id={`phone-otp-${index}`"
        },
        {
          "type": "phone",
          "line": 109,
          "rule": "<Input\r\n                  key={index}\r\n                  id={`phone-otp-${index}`}\r\n                "
        },
        {
          "type": "phone",
          "line": 110,
          "rule": "key={index}\r\n                  id={`phone-otp-${index}`}\r\n                  type=\"text\"\r\n           "
        },
        {
          "type": "phone",
          "line": 110,
          "rule": "id={`phone-otp-${index}`}"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "{`phone-otp-${index}`}"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "`phone-otp-${index}`"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "`phone-otp-${"
        },
        {
          "type": "phone",
          "line": 121,
          "rule": "<div className=\"flex gap-2\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={() => set"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "<Button type=\"button\" variant=\"outline\" onClick={() => setStep(\"phone\")} className=\"flex-1\">\r\n      "
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "<Button type=\"button\" variant=\"outline\" onClick={() => setStep(\"phone\")} className=\"flex-1\">"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "type=\"button\" variant=\"outline\" onClick={() => setStep(\"phone\")} className=\"flex-1\""
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "onClick={() => setStep(\"phone\")}"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "{() => setStep(\"phone\")}"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "() => setStep(\"phone\")"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "setStep(\"phone\")"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "{\r\n            language === \"he\"\r\n              ? \"הכנס מספר טלפון חדש\"\r\n              : language =="
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "language === \"he\"\r\n              ? \"הכנס מספר טלפון חדש\"\r\n              : language === \"ru\"\r\n       "
        },
        {
          "type": "phone",
          "line": 154,
          "rule": "language === \"ru\"\r\n                ? \"Введите новый номер телефона\"\r\n                : \"Enter new ph"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "\"Enter new phone number\""
        }
      ],
      "errorHandling": [
        {
          "line": 33,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 54,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\purchase-history\\purchase-history-client.tsx",
      "lines": 311,
      "complexity": 44,
      "conditionals": [
        {
          "type": "if",
          "line": 33,
          "condition": "result.success && result.data",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 165,
          "condition": "currentPage > 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 176,
          "condition": "!showPage",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 177,
          "condition": "page === currentPage - 3 || page === currentPage + 3",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 198,
          "condition": "currentPage < totalPages",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseHistoryClient",
          "line": 19,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "loadTransactions",
          "line": 30,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "newFilters",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleFiltersChange",
          "line": 52,
          "parameters": [
            {
              "name": "newFilters",
              "type": "Partial<PurchaseFilters>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleClearFilters",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePageChange",
          "line": 56,
          "parameters": [
            {
              "name": "page",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 58,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 164,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 171,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 187,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 197,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 31,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\coupon-form.tsx",
      "lines": 313,
      "complexity": 42,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CouponForm",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "CouponFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 94,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 132,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 162,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 181,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 227,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 228,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 242,
          "parameters": [
            {
              "name": "partner",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 256,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 31,
          "rule": "validFrom: z.date({ required_error: \"Start date is required.\" })"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "z.date({ required_error: \"Start date is required.\" })"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "{ required_error: \"Start date is required.\" }"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required_error: \"Start date is required.\""
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "\"Start date is required.\""
        },
        {
          "type": "required",
          "line": 32,
          "rule": "validUntil: z.date({ required_error: \"Expiration date is required.\" })"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "z.date({ required_error: \"Expiration date is required.\" })"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "{ required_error: \"Expiration date is required.\" }"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "required_error: \"Expiration date is required.\""
        },
        {
          "type": "required",
          "line": 33,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "\"Expiration date is required.\""
        },
        {
          "type": "required",
          "line": 151,
          "rule": "{form.formState.errors.validFrom && (\r\n            <p className=\"text-sm text-red-500 mt-1\">\r\n      "
        },
        {
          "type": "required",
          "line": 151,
          "rule": "form.formState.errors.validFrom && (\r\n            <p className=\"text-sm text-red-500 mt-1\">\r\n       "
        },
        {
          "type": "required",
          "line": 152,
          "rule": "(\r\n            <p className=\"text-sm text-red-500 mt-1\">\r\n              {form.formState.errors.valid"
        },
        {
          "type": "required",
          "line": 152,
          "rule": "<p className=\"text-sm text-red-500 mt-1\">\r\n              {form.formState.errors.validFrom.message =="
        },
        {
          "type": "required",
          "line": 153,
          "rule": "{form.formState.errors.validFrom.message === \"Start date is required.\"\r\n                ? t(\"adminCo"
        },
        {
          "type": "required",
          "line": 153,
          "rule": "form.formState.errors.validFrom.message === \"Start date is required.\"\r\n                ? t(\"adminCou"
        },
        {
          "type": "required",
          "line": 153,
          "rule": "form.formState.errors.validFrom.message === \"Start date is required.\""
        },
        {
          "type": "required",
          "line": 154,
          "rule": "\"Start date is required.\""
        },
        {
          "type": "required",
          "line": 186,
          "rule": "{form.formState.errors.validUntil && (\r\n            <p className=\"text-sm text-red-500 mt-1\">\r\n     "
        },
        {
          "type": "required",
          "line": 186,
          "rule": "form.formState.errors.validUntil && (\r\n            <p className=\"text-sm text-red-500 mt-1\">\r\n      "
        },
        {
          "type": "required",
          "line": 187,
          "rule": "(\r\n            <p className=\"text-sm text-red-500 mt-1\">\r\n              {form.formState.errors.valid"
        },
        {
          "type": "required",
          "line": 187,
          "rule": "<p className=\"text-sm text-red-500 mt-1\">\r\n              {form.formState.errors.validUntil.message ="
        },
        {
          "type": "required",
          "line": 189,
          "rule": "{form.formState.errors.validUntil.message === \"Expiration date is required.\"\r\n                ? t(\"a"
        },
        {
          "type": "required",
          "line": 189,
          "rule": "form.formState.errors.validUntil.message === \"Expiration date is required.\"\r\n                ? t(\"ad"
        },
        {
          "type": "required",
          "line": 189,
          "rule": "form.formState.errors.validUntil.message === \"Expiration date is required.\""
        },
        {
          "type": "required",
          "line": 190,
          "rule": "\"Expiration date is required.\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\account\\email-change-form.tsx",
      "lines": 238,
      "complexity": 41,
      "conditionals": [
        {
          "type": "if",
          "line": 30,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 33,
          "condition": "result.message === \"emailExists\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 47,
          "condition": "code.length !== 6",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 59,
          "condition": "onEmailChanged",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "value && !/^\\d+$/.test(value)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "value && index < 5",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "step === \"otp\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "EmailChangeForm",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "EmailChangeFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleEmailSubmit",
          "line": 24,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleOtpSubmit",
          "line": 44,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleOtpChange",
          "line": 71,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "digit",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 110,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 18,
          "rule": "const [step, setStep] = useState<\"email\" | \"otp\">(\"email\")"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "const [step, setStep] = useState<\"email\" | \"otp\">(\"email\")"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "[step, setStep] = useState<\"email\" | \"otp\">(\"email\")"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "useState<\"email\" | \"otp\">(\"email\")"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "\"email\" | \"otp\""
        },
        {
          "type": "email",
          "line": 19,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 19,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 19,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n  "
        },
        {
          "type": "email",
          "line": 25,
          "rule": "{\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError(\"\")\r\n\r\n    const formData = new Form"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "const email = formData.get(\"newEmail\") as string"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "const email = formData.get(\"newEmail\") as string"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "email = formData.get(\"newEmail\") as string"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "try {\r\n      const result = await requestEmailChange(email, language)\r\n\r\n      if (result.success) {"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "{\r\n      const result = await requestEmailChange(email, language)\r\n\r\n      if (result.success) {\r\n  "
        },
        {
          "type": "email",
          "line": 29,
          "rule": "const result = await requestEmailChange(email, language)"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "const result = await requestEmailChange(email, language)"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "result = await requestEmailChange(email, language)"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "await requestEmailChange(email, language)"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "requestEmailChange(email, language)"
        },
        {
          "type": "email",
          "line": 30,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 30,
          "rule": "if (result.success) {\r\n        setNewEmail(email)\r\n        setObscuredEmail(result.obscuredIdentifie"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "{\r\n        setNewEmail(email)\r\n        setObscuredEmail(result.obscuredIdentifier || \"\")\r\n        se"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "setNewEmail(email)"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "setNewEmail(email)"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "{\r\n        if (result.message === \"emailExists\") {\r\n          setError(\r\n            language === \"h"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "if (result.message === \"emailExists\") {\r\n          setError(\r\n            language === \"he\"\r\n       "
        },
        {
          "type": "email",
          "line": 33,
          "rule": "result.message === \"emailExists\""
        },
        {
          "type": "email",
          "line": 34,
          "rule": "\"emailExists\""
        },
        {
          "type": "email",
          "line": 35,
          "rule": "language === \"he\"\r\n              ? \"כתובת האימייל הזו כבר בשימוש\"\r\n              : language === \"ru\""
        },
        {
          "type": "email",
          "line": 36,
          "rule": "language === \"ru\"\r\n                ? \"Этот адрес электронной почты уже используется\"\r\n              "
        },
        {
          "type": "email",
          "line": 39,
          "rule": "\"This email address is already in use\""
        },
        {
          "type": "email",
          "line": 57,
          "rule": "setStep(\"email\")"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "setStep(\"email\")"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 83,
          "rule": "<h3 className=\"text-lg font-medium mb-2\">\r\n            {language === \"he\"\r\n              ? \"אמת את ה"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "{language === \"he\"\r\n              ? \"אמת את האימייל החדש\"\r\n              : language === \"ru\"\r\n      "
        },
        {
          "type": "email",
          "line": 84,
          "rule": "language === \"he\"\r\n              ? \"אמת את האימייל החדש\"\r\n              : language === \"ru\"\r\n       "
        },
        {
          "type": "email",
          "line": 86,
          "rule": "language === \"ru\"\r\n                ? \"Подтвердите новый email\"\r\n                : \"Verify New Email\""
        },
        {
          "type": "email",
          "line": 87,
          "rule": "\"Подтвердите новый email\""
        },
        {
          "type": "email",
          "line": 117,
          "rule": "<div className=\"flex gap-2\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={() => set"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "<Button type=\"button\" variant=\"outline\" onClick={() => setStep(\"email\")} className=\"flex-1\">\r\n      "
        },
        {
          "type": "email",
          "line": 118,
          "rule": "<Button type=\"button\" variant=\"outline\" onClick={() => setStep(\"email\")} className=\"flex-1\">"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "type=\"button\" variant=\"outline\" onClick={() => setStep(\"email\")} className=\"flex-1\""
        },
        {
          "type": "email",
          "line": 119,
          "rule": "onClick={() => setStep(\"email\")}"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "{() => setStep(\"email\")}"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "() => setStep(\"email\")"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "setStep(\"email\")"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 135,
          "rule": "<div className=\"space-y-2\">\r\n        <Label>{language === \"he\" ? \"אימייל נוכחי\" : language === \"ru\" "
        },
        {
          "type": "email",
          "line": 136,
          "rule": "<Label>{language === \"he\" ? \"אימייל נוכחי\" : language === \"ru\" ? \"Текущий email\" : \"Current Email\"}<"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "{language === \"he\" ? \"אימייל נוכחי\" : language === \"ru\" ? \"Текущий email\" : \"Current Email\"}"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "language === \"he\" ? \"אימייל נוכחי\" : language === \"ru\" ? \"Текущий email\" : \"Current Email\""
        },
        {
          "type": "email",
          "line": 137,
          "rule": "language === \"ru\" ? \"Текущий email\" : \"Current Email\""
        },
        {
          "type": "email",
          "line": 137,
          "rule": "\"Текущий email\""
        },
        {
          "type": "email",
          "line": 141,
          "rule": "<div className=\"space-y-2\">\r\n        <Label htmlFor=\"newEmail\">\r\n          {language === \"he\" ? \"אימ"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "<Label htmlFor=\"newEmail\">\r\n          {language === \"he\" ? \"אימייל חדש\" : language === \"ru\" ? \"Новый"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "{language === \"he\" ? \"אימייל חדש\" : language === \"ru\" ? \"Новый email\" : \"New Email\"}"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "language === \"he\" ? \"אימייל חדש\" : language === \"ru\" ? \"Новый email\" : \"New Email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "language === \"ru\" ? \"Новый email\" : \"New Email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "\"Новый email\""
        },
        {
          "type": "email",
          "line": 144,
          "rule": "<Input\r\n          id=\"newEmail\"\r\n          name=\"newEmail\"\r\n          type=\"email\"\r\n          placeh"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "id=\"newEmail\"\r\n          name=\"newEmail\"\r\n          type=\"email\"\r\n          placeholder={\r\n         "
        },
        {
          "type": "email",
          "line": 146,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 146,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 146,
          "rule": "placeholder={\r\n            language === \"he\" ? \"הכנס אימייל חדש\" : language === \"ru\" ? \"Введите новы"
        },
        {
          "type": "email",
          "line": 147,
          "rule": "{\r\n            language === \"he\" ? \"הכנס אימייל חדש\" : language === \"ru\" ? \"Введите новый email\" : \""
        },
        {
          "type": "email",
          "line": 147,
          "rule": "language === \"he\" ? \"הכנס אימייל חדש\" : language === \"ru\" ? \"Введите новый email\" : \"Enter new email"
        },
        {
          "type": "email",
          "line": 148,
          "rule": "language === \"ru\" ? \"Введите новый email\" : \"Enter new email\""
        },
        {
          "type": "email",
          "line": 148,
          "rule": "\"Введите новый email\""
        },
        {
          "type": "email",
          "line": 149,
          "rule": "\"Enter new email\""
        },
        {
          "type": "required",
          "line": 151,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 151,
          "rule": "required"
        }
      ],
      "errorHandling": [
        {
          "line": 28,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 49,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batch-form.tsx",
      "lines": 327,
      "complexity": 41,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PartnerCouponBatchForm",
          "line": 53,
          "parameters": [
            {
              "name": "unknown",
              "type": "PartnerCouponBatchFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 79,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 189,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 242,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 243,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [
            {
              "name": "partner",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 272,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 22,
          "rule": "const formSchema = z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    desc"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "const formSchema = z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    desc"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "formSchema = z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    descriptio"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string()"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string()"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string()"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "{\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string().optional(),\r"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "name: z.string().min(1, \"Name is required\").trim()"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "z.string().min(1, \"Name is required\").trim()"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "z.string().min(1, \"Name is required\").trim"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "z.string().min(1, \"Name is required\")"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "\"Name is required\""
        },
        {
          "type": "required",
          "line": 32,
          "rule": "validFrom: z.date({ required_error: \"Start date is required.\" })"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "z.date({ required_error: \"Start date is required.\" })"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "{ required_error: \"Start date is required.\" }"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "required_error: \"Start date is required.\""
        },
        {
          "type": "required",
          "line": 32,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "\"Start date is required.\""
        },
        {
          "type": "required",
          "line": 33,
          "rule": "validUntil: z.date({ required_error: \"Expiration date is required.\" })"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "z.date({ required_error: \"Expiration date is required.\" })"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "{ required_error: \"Expiration date is required.\" }"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required_error: \"Expiration date is required.\""
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "\"Expiration date is required.\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "actions\\partner-coupon-batch-actions.ts",
      "lines": 362,
      "complexity": 39,
      "conditionals": [
        {
          "type": "if",
          "line": 24,
          "condition": "!batch.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 25,
          "condition": "validFrom > now",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 28,
          "condition": "endOfValidUntilDay <= now",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 39,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "!validatedFields.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 93,
          "condition": "!validatedFields.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 102,
          "condition": "!updatedBatch",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 128,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 132,
          "condition": "!batch",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 153,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 156,
          "condition": "filters.name",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 157,
          "condition": "typeof filters.isActive === \"boolean\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 159,
          "condition": "filters.partnerId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 175,
          "condition": "filters.effectiveStatus",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 189,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 195,
          "condition": "!batch",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 208,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 211,
          "condition": "!validatedFields.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 219,
          "condition": "!batch",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 224,
          "condition": "validCouponIds.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 244,
          "condition": "!coupon.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 245,
          "condition": "validFrom > now",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 248,
          "condition": "endOfValidUntilDay <= now",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "isAdminUser",
          "line": 16,
          "parameters": [
            {
              "name": "user",
              "type": "{ roles?: string[] } | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "calculateBatchEffectiveStatus",
          "line": 17,
          "parameters": [
            {
              "name": "batch",
              "type": "IPartnerCouponBatch"
            }
          ],
          "isAsync": false
        },
        {
          "name": "generateCouponCode",
          "line": 30,
          "parameters": [
            {
              "name": "prefix",
              "type": "string"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createPartnerCouponBatch",
          "line": 36,
          "parameters": [
            {
              "name": "payload",
              "type": "CreatePartnerCouponBatchPayload"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updatePartnerCouponBatch",
          "line": 86,
          "parameters": [
            {
              "name": "payload",
              "type": "UpdatePartnerCouponBatchPayload"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deletePartnerCouponBatch",
          "line": 125,
          "parameters": [
            {
              "name": "batchId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getPartnerCouponBatches",
          "line": 144,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "filters",
              "type": "{ name?: string; isActive?: boolean; partnerId?: string; effectiveStatus?: string }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 166,
          "parameters": [
            {
              "name": "batch",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 177,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getBatchCoupons",
          "line": 185,
          "parameters": [
            {
              "name": "batchId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 200,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateCouponsInBatch",
          "line": 205,
          "parameters": [
            {
              "name": "payload",
              "type": "UpdateCouponsInBatchPayload"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 222,
          "parameters": [
            {
              "name": "id",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 223,
          "parameters": [
            {
              "name": "batchCouponId",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "calculateCouponEffectiveStatus",
          "line": 237,
          "parameters": [
            {
              "name": "coupon",
              "type": "ICoupon"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { revalidatePath } from \"next/cache\"\r\nimport PartnerCouponBatch, { type IPart"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 13,
          "rule": "\"@/lib/validation/partner-coupon-batch-schemas\""
        },
        {
          "type": "general",
          "line": 38,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "const validatedFields = CreatePartnerCouponBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "const validatedFields = CreatePartnerCouponBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "validatedFields = CreatePartnerCouponBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "if (!validatedFields.success) {\r\n    return { success: false, error: \"Invalid fields\", details: vali"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "!validatedFields.success"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "validatedFields.success"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "{\r\n    return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fi"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErro"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "{ success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErrors }"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "details: validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validatedFields.error.flatten()"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validatedFields.error.flatten"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validatedFields.error"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "try {\r\n    await connectDB()\r\n\r\n    // Create the batch first\r\n    const newBatch = new PartnerCoupo"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "{\r\n    await connectDB()\r\n\r\n    // Create the batch first\r\n    const newBatch = new PartnerCouponBat"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "const newBatch = new PartnerCouponBatch({\r\n      ...validatedFields.data,\r\n      createdBy: session."
        },
        {
          "type": "general",
          "line": 46,
          "rule": "const newBatch = new PartnerCouponBatch({\r\n      ...validatedFields.data,\r\n      createdBy: session."
        },
        {
          "type": "general",
          "line": 47,
          "rule": "newBatch = new PartnerCouponBatch({\r\n      ...validatedFields.data,\r\n      createdBy: session.user.i"
        },
        {
          "type": "general",
          "line": 47,
          "rule": "new PartnerCouponBatch({\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n      a"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "{\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n      assignedPartnerId: valid"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "...validatedFields.data"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 49,
          "rule": "assignedPartnerId: validatedFields.data.assignedPartnerId || null"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "validatedFields.data.assignedPartnerId || null"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "validatedFields.data.assignedPartnerId"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 54,
          "rule": "for (let i = 1; i <= validatedFields.data.couponCount; i++) {\r\n      const couponCode = generateCoup"
        },
        {
          "type": "general",
          "line": 54,
          "rule": "i <= validatedFields.data.couponCount"
        },
        {
          "type": "general",
          "line": 55,
          "rule": "validatedFields.data.couponCount"
        },
        {
          "type": "general",
          "line": 55,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 55,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 55,
          "rule": "{\r\n      const couponCode = generateCouponCode(validatedFields.data.codePrefix, i)\r\n      \r\n      co"
        },
        {
          "type": "general",
          "line": 55,
          "rule": "const couponCode = generateCouponCode(validatedFields.data.codePrefix, i)"
        },
        {
          "type": "general",
          "line": 55,
          "rule": "const couponCode = generateCouponCode(validatedFields.data.codePrefix, i)"
        },
        {
          "type": "general",
          "line": 56,
          "rule": "couponCode = generateCouponCode(validatedFields.data.codePrefix, i)"
        },
        {
          "type": "general",
          "line": 56,
          "rule": "generateCouponCode(validatedFields.data.codePrefix, i)"
        },
        {
          "type": "general",
          "line": 56,
          "rule": "validatedFields.data.codePrefix"
        },
        {
          "type": "general",
          "line": 56,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 56,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 57,
          "rule": "const coupon = new Coupon({\r\n        code: couponCode,\r\n        description: `${validatedFields.data"
        },
        {
          "type": "general",
          "line": 57,
          "rule": "const coupon = new Coupon({\r\n        code: couponCode,\r\n        description: `${validatedFields.data"
        },
        {
          "type": "general",
          "line": 57,
          "rule": "coupon = new Coupon({\r\n        code: couponCode,\r\n        description: `${validatedFields.data.name}"
        },
        {
          "type": "general",
          "line": 58,
          "rule": "new Coupon({\r\n        code: couponCode,\r\n        description: `${validatedFields.data.name} - קופון "
        },
        {
          "type": "general",
          "line": 58,
          "rule": "{\r\n        code: couponCode,\r\n        description: `${validatedFields.data.name} - קופון ${i}`,\r\n   "
        },
        {
          "type": "general",
          "line": 58,
          "rule": "description: `${validatedFields.data.name} - קופון ${i}`"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "`${validatedFields.data.name} - קופון ${i}`"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "validatedFields.data.name} - קופון ${"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "validatedFields.data.name"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "discountType: validatedFields.data.discountType"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "validatedFields.data.discountType"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "discountValue: validatedFields.data.discountValue"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "validatedFields.data.discountValue"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 62,
          "rule": "validFrom: validatedFields.data.validFrom"
        },
        {
          "type": "general",
          "line": 62,
          "rule": "validatedFields.data.validFrom"
        },
        {
          "type": "general",
          "line": 62,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 62,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "validUntil: validatedFields.data.validUntil"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "validatedFields.data.validUntil"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "usageLimit: validatedFields.data.usageLimit"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "validatedFields.data.usageLimit"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "usageLimitPerUser: validatedFields.data.usageLimitPerUser"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields.data.usageLimitPerUser"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "isActive: validatedFields.data.isActive"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "validatedFields.data.isActive"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "assignedPartnerId: validatedFields.data.assignedPartnerId || null"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "validatedFields.data.assignedPartnerId || null"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "validatedFields.data.assignedPartnerId"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 70,
          "rule": "notesForPartner: validatedFields.data.notesForPartner"
        },
        {
          "type": "general",
          "line": 71,
          "rule": "validatedFields.data.notesForPartner"
        },
        {
          "type": "general",
          "line": 71,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 71,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 77,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 77,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 77,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 88,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "general",
          "line": 91,
          "rule": "const validatedFields = UpdatePartnerCouponBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 91,
          "rule": "const validatedFields = UpdatePartnerCouponBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 92,
          "rule": "validatedFields = UpdatePartnerCouponBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 92,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "if (!validatedFields.success) {\r\n    return { success: false, error: \"Invalid fields\", details: vali"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "!validatedFields.success"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "validatedFields.success"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "{\r\n    return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fi"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErro"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "{ success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErrors }"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "details: validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatedFields.error.flatten()"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatedFields.error.flatten"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatedFields.error"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "const { id, ...updateData } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "const { id, ...updateData } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "{ id, ...updateData } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 117,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 117,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 117,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 137,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 137,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 137,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 152,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "required",
          "line": 153,
          "rule": "if (!session || !isAdminUser(session.user)) {\r\n    throw new Error(\"Unauthorized: Admin access requi"
        },
        {
          "type": "required",
          "line": 154,
          "rule": "{\r\n    throw new Error(\"Unauthorized: Admin access required.\")\r\n  }"
        },
        {
          "type": "required",
          "line": 154,
          "rule": "throw new Error(\"Unauthorized: Admin access required.\")"
        },
        {
          "type": "required",
          "line": 154,
          "rule": "new Error(\"Unauthorized: Admin access required.\")"
        },
        {
          "type": "required",
          "line": 154,
          "rule": "\"Unauthorized: Admin access required.\""
        },
        {
          "type": "email",
          "line": 160,
          "rule": "const allMatchingBatches = await PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name em"
        },
        {
          "type": "email",
          "line": 160,
          "rule": "const allMatchingBatches = await PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name em"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "allMatchingBatches = await PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "await PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assig"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPar"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPar"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPar"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPar"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPar"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "PartnerCouponBatch.find(query)\r\n    .populate(\"createdBy\", \"name email\")"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "\"name email\""
        },
        {
          "type": "email",
          "line": 163,
          "rule": "\"name email\""
        },
        {
          "type": "required",
          "line": 188,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "required",
          "line": 189,
          "rule": "if (!session || !isAdminUser(session.user)) {\r\n    throw new Error(\"Unauthorized: Admin access requi"
        },
        {
          "type": "required",
          "line": 190,
          "rule": "{\r\n    throw new Error(\"Unauthorized: Admin access required.\")\r\n  }"
        },
        {
          "type": "required",
          "line": 190,
          "rule": "throw new Error(\"Unauthorized: Admin access required.\")"
        },
        {
          "type": "required",
          "line": 190,
          "rule": "new Error(\"Unauthorized: Admin access required.\")"
        },
        {
          "type": "required",
          "line": 191,
          "rule": "\"Unauthorized: Admin access required.\""
        },
        {
          "type": "email",
          "line": 192,
          "rule": "const batch = await PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n"
        },
        {
          "type": "email",
          "line": 192,
          "rule": "const batch = await PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n"
        },
        {
          "type": "email",
          "line": 192,
          "rule": "batch = await PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .p"
        },
        {
          "type": "email",
          "line": 192,
          "rule": "await PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate("
        },
        {
          "type": "email",
          "line": 193,
          "rule": "PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assig"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assig"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assig"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "PartnerCouponBatch.findById(batchId)\r\n    .populate(\"createdBy\", \"name email\")"
        },
        {
          "type": "email",
          "line": 194,
          "rule": "\"name email\""
        },
        {
          "type": "email",
          "line": 195,
          "rule": "\"name email\""
        },
        {
          "type": "general",
          "line": 207,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "general",
          "line": 210,
          "rule": "const validatedFields = UpdateCouponsInBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 210,
          "rule": "const validatedFields = UpdateCouponsInBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 210,
          "rule": "validatedFields = UpdateCouponsInBatchSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 210,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 211,
          "rule": "if (!validatedFields.success) {\r\n    return { success: false, error: \"Invalid fields\", details: vali"
        },
        {
          "type": "general",
          "line": 212,
          "rule": "!validatedFields.success"
        },
        {
          "type": "general",
          "line": 212,
          "rule": "validatedFields.success"
        },
        {
          "type": "general",
          "line": 212,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 212,
          "rule": "{\r\n    return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fi"
        },
        {
          "type": "general",
          "line": 212,
          "rule": "return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErro"
        },
        {
          "type": "general",
          "line": 212,
          "rule": "{ success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErrors }"
        },
        {
          "type": "general",
          "line": 213,
          "rule": "details: validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 213,
          "rule": "validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 213,
          "rule": "validatedFields.error.flatten()"
        },
        {
          "type": "general",
          "line": 213,
          "rule": "validatedFields.error.flatten"
        },
        {
          "type": "general",
          "line": 213,
          "rule": "validatedFields.error"
        },
        {
          "type": "general",
          "line": 213,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 214,
          "rule": "try {\r\n    await connectDB()\r\n    \r\n    const { batchId, couponIds, updates } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 215,
          "rule": "{\r\n    await connectDB()\r\n    \r\n    const { batchId, couponIds, updates } = validatedFields.data\r\n\r\n"
        },
        {
          "type": "general",
          "line": 215,
          "rule": "const { batchId, couponIds, updates } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 215,
          "rule": "const { batchId, couponIds, updates } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 215,
          "rule": "{ batchId, couponIds, updates } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 216,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 216,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 229,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 229,
          "rule": "revalidatePath(\"/dashboard/admin/partner-coupon-batches\")"
        },
        {
          "type": "general",
          "line": 229,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 46,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 97,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 130,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 214,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\db\\models\\gift-voucher.ts",
      "lines": 267,
      "complexity": 39,
      "conditionals": [
        {
          "type": "if",
          "line": 128,
          "condition": "typeof this.amount !== \"number\" && typeof this.originalAmount === \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 132,
          "condition": "typeof this.amount === \"number\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 136,
          "condition": "this.amount < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 149,
          "condition": "typeof this.amount === \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 152,
          "condition": "typeof this.originalAmount !== \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 156,
          "condition": "typeof this.monetaryValue !== \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 158,
          "condition": "this.voucherType === \"monetary\" && typeof this.originalAmount === \"number\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 164,
          "condition": "this.voucherType === \"monetary\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 166,
          "condition": "typeof this.remainingAmount !== \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 167,
          "condition": "typeof this.originalAmount === \"number\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 175,
          "condition": "typeof this.remainingAmount === \"number\" && typeof this.originalAmount === \"number\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 179,
          "condition": "this.remainingAmount > this.originalAmount",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 181,
          "condition": "this.remainingAmount < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 196,
          "condition": "new Date() > validUntilDate &&\r\n    this.status !== \"fully_used\" &&\r\n    this.status !== \"expired\" &&\r\n    this.status !== \"cancelled\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 201,
          "condition": "this.voucherType === \"monetary\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 203,
          "condition": "this.status === \"fully_used\" ||\r\n      this.status === \"expired\" ||\r\n      this.status === \"cancelled\" ||\r\n      (typeof this.remainingAmount === \"number\" && this.remainingAmount <= 0)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 208,
          "condition": "this.status === \"active\" || this.status === \"partially_used\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 210,
          "condition": "this.voucherType === \"treatment\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 211,
          "condition": "this.status === \"fully_used\" || this.status === \"expired\" || this.status === \"cancelled\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 214,
          "condition": "this.status === \"active\" || this.status === \"pending_send\" || this.status === \"sent\"",
          "hasElse": false
        }
      ],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 52,
          "rule": "guestInfo?: { // Guest information for non-user purchases\r\n    name: string\r\n    email: string\r\n    "
        },
        {
          "type": "email",
          "line": 53,
          "rule": "{ // Guest information for non-user purchases\r\n    name: string\r\n    email: string\r\n    phone: strin"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 54,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 54,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 66,
          "rule": "const GiftVoucherSchema: Schema<IGiftVoucher> = new Schema(\r\n  {\r\n    code: { type: String, required"
        },
        {
          "type": "required",
          "line": 66,
          "rule": "const GiftVoucherSchema: Schema<IGiftVoucher> = new Schema(\r\n  {\r\n    code: { type: String, required"
        },
        {
          "type": "required",
          "line": 67,
          "rule": "GiftVoucherSchema: Schema<IGiftVoucher> = new Schema(\r\n  {\r\n    code: { type: String, required: true"
        },
        {
          "type": "required",
          "line": 67,
          "rule": "new Schema(\r\n  {\r\n    code: { type: String, required: true, unique: true, trim: true }, // unique: t"
        },
        {
          "type": "required",
          "line": 68,
          "rule": "{\r\n    code: { type: String, required: true, unique: true, trim: true }, // unique: true also create"
        },
        {
          "type": "required",
          "line": 68,
          "rule": "code: { type: String, required: true, unique: true, trim: true }"
        },
        {
          "type": "required",
          "line": 68,
          "rule": "{ type: String, required: true, unique: true, trim: true }"
        },
        {
          "type": "required",
          "line": 68,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 68,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 69,
          "rule": "voucherType: { type: String, enum: [\"treatment\", \"monetary\"], required: true }"
        },
        {
          "type": "required",
          "line": 70,
          "rule": "{ type: String, enum: [\"treatment\", \"monetary\"], required: true }"
        },
        {
          "type": "required",
          "line": 71,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 71,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 72,
          "rule": "amount: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 72,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 72,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 72,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "purchaserUserId: { type: Schema.Types.ObjectId, ref: \"User\", required: false, index: true }"
        },
        {
          "type": "required",
          "line": 84,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: false, index: true }"
        },
        {
          "type": "required",
          "line": 84,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 84,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 85,
          "rule": "ownerUserId: { type: Schema.Types.ObjectId, ref: \"User\", required: false, index: true }"
        },
        {
          "type": "required",
          "line": 86,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: false, index: true }"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 88,
          "rule": "guestInfo: {\r\n      // Guest information for non-user purchases\r\n      type: {\r\n        name: { type"
        },
        {
          "type": "email",
          "line": 89,
          "rule": "{\r\n      // Guest information for non-user purchases\r\n      type: {\r\n        name: { type: String, r"
        },
        {
          "type": "email",
          "line": 89,
          "rule": "type: {\r\n        name: { type: String, required: true },\r\n        email: { type: String, required: t"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "{\r\n        name: { type: String, required: true },\r\n        email: { type: String, required: true },"
        },
        {
          "type": "required",
          "line": 90,
          "rule": "name: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 90,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 91,
          "rule": "email: { type: String, required: true }"
        },
        {
          "type": "email",
          "line": 91,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 92,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 92,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 92,
          "rule": "phone: { type: String, required: true }"
        },
        {
          "type": "phone",
          "line": 92,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 92,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 105,
          "rule": "validFrom: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 106,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 106,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 106,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 106,
          "rule": "validUntil: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 108,
          "rule": "usageHistory: [\r\n      {\r\n        date: { type: Date, required: true },\r\n        amountUsed: { type:"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "[\r\n      {\r\n        date: { type: Date, required: true },\r\n        amountUsed: { type: Number, requi"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "{\r\n        date: { type: Date, required: true },\r\n        amountUsed: { type: Number, required: true"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "date: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "amountUsed: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 138,
          "rule": "{\r\n    // If amount is still not a number, and this is a new document,\r\n    // Mongoose's `required:"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "lines": 350,
      "complexity": 38,
      "conditionals": [
        {
          "type": "if",
          "line": 50,
          "condition": "search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "isActive !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "result.success && Array.isArray(result.subscriptions)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 71,
          "condition": "searchTerm || activeFilter !== \"all\" || currentPage > 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 104,
          "condition": "!currentSubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 107,
          "condition": "result.success && result.subscription",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 123,
          "condition": "!currentSubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 126,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 131,
          "condition": "subscriptions.length === 1 && currentPage > 1",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "SubscriptionsClient",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "SubscriptionsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "fetchSubscriptions",
          "line": 47,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "search",
              "type": "any"
            },
            {
              "name": "isActive",
              "type": "boolean"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "obj",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSearch",
          "line": 79,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleResetFilters",
          "line": 84,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleCreate",
          "line": 87,
          "parameters": [
            {
              "name": "data",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleUpdate",
          "line": 103,
          "parameters": [
            {
              "name": "data",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 109,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleEdit",
          "line": 117,
          "parameters": [
            {
              "name": "subscription",
              "type": "SubscriptionPlain"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDeleteClick",
          "line": 120,
          "parameters": [
            {
              "name": "subscription",
              "type": "SubscriptionPlain"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDelete",
          "line": 123,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePageChange",
          "line": 142,
          "parameters": [
            {
              "name": "page",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 152,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 165,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 166,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 196,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 202,
          "parameters": [
            {
              "name": "subscription",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 208,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 217,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 225,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 250,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 48,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 88,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 105,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 124,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "actions\\professional-actions.ts",
      "lines": 427,
      "complexity": 37,
      "conditionals": [
        {
          "type": "if",
          "line": 20,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "status",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 47,
          "condition": "sortBy.startsWith('user.')",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 70,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "!professional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "!professional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "status === \"active\" && professional.status !== \"active\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 106,
          "condition": "status === \"rejected\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 134,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 158,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 163,
          "condition": "!professional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 177,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 181,
          "condition": "!professional",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 185,
          "cases": 4,
          "expression": "period"
        },
        {
          "type": "if",
          "line": 224,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 237,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getProfessionals",
          "line": 13,
          "parameters": [
            {
              "name": "params",
              "type": "{\r\n  page?: number\r\n  limit?: number\r\n  search?: string\r\n  status?: ProfessionalStatus\r\n  sortBy?: string\r\n  sortOrder?: 'asc' | 'desc'\r\n}"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getProfessionalById",
          "line": 66,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateProfessionalStatus",
          "line": 90,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            },
            {
              "name": "status",
              "type": "ProfessionalStatus"
            },
            {
              "name": "adminNote",
              "type": "string"
            },
            {
              "name": "rejectionReason",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateProfessionalTreatments",
          "line": 115,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            },
            {
              "name": "treatments",
              "type": "ITreatmentPricing[]"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateProfessionalWorkAreas",
          "line": 130,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            },
            {
              "name": "workAreas",
              "type": "IWorkArea[]"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 140,
          "parameters": [
            {
              "name": "area",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 145,
          "parameters": [
            {
              "name": "city",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "addProfessionalFinancialTransaction",
          "line": 154,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            },
            {
              "name": "transaction",
              "type": "Omit<IFinancialTransaction, 'date'>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getProfessionalFinancialReport",
          "line": 171,
          "parameters": [
            {
              "name": "professionalId",
              "type": "string"
            },
            {
              "name": "period",
              "type": "'daily' | 'weekly' | 'monthly' | 'yearly'"
            },
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 203,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 205,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 207,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 211,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 212,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAvailableTreatments",
          "line": 221,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "getAvailableCities",
          "line": 233,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 4,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 4,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 4,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 4,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 4,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "if (search) {\r\n      pipeline.push({\r\n        $match: {\r\n          $or: [\r\n            { \"user.name\""
        },
        {
          "type": "email",
          "line": 39,
          "rule": "{\r\n      pipeline.push({\r\n        $match: {\r\n          $or: [\r\n            { \"user.name\": { $regex: "
        },
        {
          "type": "email",
          "line": 39,
          "rule": "pipeline.push({\r\n        $match: {\r\n          $or: [\r\n            { \"user.name\": { $regex: search, $"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "pipeline.push({\r\n        $match: {\r\n          $or: [\r\n            { \"user.name\": { $regex: search, $"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "{\r\n        $match: {\r\n          $or: [\r\n            { \"user.name\": { $regex: search, $options: \"i\" }"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "$match: {\r\n          $or: [\r\n            { \"user.name\": { $regex: search, $options: \"i\" } },\r\n      "
        },
        {
          "type": "email",
          "line": 40,
          "rule": "{\r\n          $or: [\r\n            { \"user.name\": { $regex: search, $options: \"i\" } },\r\n            { "
        },
        {
          "type": "email",
          "line": 40,
          "rule": "$or: [\r\n            { \"user.name\": { $regex: search, $options: \"i\" } },\r\n            { \"user.email\":"
        },
        {
          "type": "email",
          "line": 40,
          "rule": "[\r\n            { \"user.name\": { $regex: search, $options: \"i\" } },\r\n            { \"user.email\": { $r"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "{ \"user.email\": { $regex: search, $options: \"i\" } }"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"user.email\": { $regex: search, $options: \"i\" }"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"user.email\""
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "{ \"user.phone\": { $regex: search, $options: \"i\" } }"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "\"user.phone\": { $regex: search, $options: \"i\" }"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "\"user.phone\""
        },
        {
          "type": "email",
          "line": 73,
          "rule": "const professional = await ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', '"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "const professional = await ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', '"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "professional = await ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name e"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "await ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gend"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "ProfessionalProfile.findById(professionalId)\r\n      .populate('userId', 'name email phone gender bir"
        },
        {
          "type": "email",
          "line": 75,
          "rule": "'name email phone gender birthDate'"
        },
        {
          "type": "general",
          "line": 110,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 110,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 110,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 148,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 148,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 148,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 166,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 166,
          "rule": "revalidatePath(\"/dashboard/admin/professionals\")"
        },
        {
          "type": "general",
          "line": 166,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 18,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 68,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 94,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 118,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 133,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 157,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 175,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 223,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 235,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "lines": 369,
      "complexity": 37,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "!isActive",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 22,
          "cases": 9,
          "expression": "status"
        },
        {
          "type": "if",
          "line": 35,
          "condition": "!isActive",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 37,
          "cases": 9,
          "expression": "status"
        },
        {
          "type": "if",
          "line": 179,
          "condition": "daysLeft < 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 182,
          "condition": "daysLeft === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getStatusBadgeVariant",
          "line": 19,
          "parameters": [
            {
              "name": "status",
              "type": "GiftVoucherPlain[\"status\"]"
            },
            {
              "name": "isActive",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusIcon",
          "line": 34,
          "parameters": [
            {
              "name": "status",
              "type": "GiftVoucherPlain[\"status\"]"
            },
            {
              "name": "isActive",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "GiftVoucherRow",
          "line": 53,
          "parameters": [
            {
              "name": "unknown",
              "type": "GiftVoucherRowProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 69,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 177,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 261,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 272,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 141,
          "rule": "<p>\r\n                    {t(\"common.email\")}: {(voucher as any).guestInfo.email}\r\n                  "
        },
        {
          "type": "email",
          "line": 142,
          "rule": "{t(\"common.email\")}"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "t(\"common.email\")"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "\"common.email\""
        },
        {
          "type": "email",
          "line": 142,
          "rule": "{(voucher as any).guestInfo.email}"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "(voucher as any).guestInfo.email"
        },
        {
          "type": "email",
          "line": 143,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "<p>\r\n                    {t(\"common.phone\")}: {(voucher as any).guestInfo.phone}\r\n                  "
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "{t(\"common.phone\")}"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "t(\"common.phone\")"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "\"common.phone\""
        },
        {
          "type": "phone",
          "line": 145,
          "rule": "{(voucher as any).guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 145,
          "rule": "(voucher as any).guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 145,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\booking\\steps\\guest-payment-step.tsx",
      "lines": 643,
      "complexity": 36,
      "conditionals": [
        {
          "type": "if",
          "line": 75,
          "condition": "isCountingDown && countdown > 0",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 78,
          "condition": "countdown === 0 && isCountingDown",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "isCountingDown || !termsAccepted",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "!pendingBookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "!bookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 102,
          "condition": "!calculatedPrice || calculatedPrice.finalAmount === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 159,
          "condition": "!pendingBookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 163,
          "condition": "!bookingId",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestPaymentStep",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestPaymentStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 80,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "formatPrice",
          "line": 82,
          "parameters": [
            {
              "name": "amount",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePayNow",
          "line": 83,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handlePaymentSuccess",
          "line": 92,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 94,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePaymentFailure",
          "line": 96,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleTryAgain",
          "line": 97,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "closeModal",
          "line": 100,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 133,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 146,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 159,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 194,
          "parameters": [
            {
              "name": "surcharge",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 277,
          "parameters": [
            {
              "name": "value",
              "type": "\"email\" | \"sms\" | \"both\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 304,
          "parameters": [
            {
              "name": "value",
              "type": "\"he\" | \"en\" | \"ru\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 343,
          "parameters": [
            {
              "name": "value",
              "type": "\"email\" | \"sms\" | \"both\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 372,
          "parameters": [
            {
              "name": "value",
              "type": "\"he\" | \"en\" | \"ru\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 420,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 433,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 19,
          "rule": "interface GuestInfo {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  phone: string\r\n  "
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "bookerNotificationMethod?: \"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 30,
          "rule": "recipientNotificationMethod?: \"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 30,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 30,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 30,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 52,
          "rule": "const [bookerNotificationMethod, setBookerNotificationMethod] = useState<\"email\" | \"sms\" | \"both\">(\r"
        },
        {
          "type": "email",
          "line": 52,
          "rule": "const [bookerNotificationMethod, setBookerNotificationMethod] = useState<\"email\" | \"sms\" | \"both\">(\r"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "[bookerNotificationMethod, setBookerNotificationMethod] = useState<\"email\" | \"sms\" | \"both\">(\r\n    g"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "useState<\"email\" | \"sms\" | \"both\">(\r\n    guestInfo.bookerNotificationMethod || \"email\"\r\n  )"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 54,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 54,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 54,
          "rule": "guestInfo.bookerNotificationMethod || \"email\""
        },
        {
          "type": "email",
          "line": 55,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 59,
          "rule": "const [recipientNotificationMethod, setRecipientNotificationMethod] = useState<\"email\" | \"sms\" | \"bo"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "const [recipientNotificationMethod, setRecipientNotificationMethod] = useState<\"email\" | \"sms\" | \"bo"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "[recipientNotificationMethod, setRecipientNotificationMethod] = useState<\"email\" | \"sms\" | \"both\">(\r"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "useState<\"email\" | \"sms\" | \"both\">(\r\n    guestInfo.recipientNotificationMethod || \"email\"\r\n  )"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 60,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 60,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 61,
          "rule": "guestInfo.recipientNotificationMethod || \"email\""
        },
        {
          "type": "email",
          "line": 62,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 274,
          "rule": "<div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">אמצעי התראה:</"
        },
        {
          "type": "email",
          "line": 276,
          "rule": "<Select value={bookerNotificationMethod} onValueChange={(value: \"email\" | \"sms\" | \"both\") => setBook"
        },
        {
          "type": "email",
          "line": 276,
          "rule": "<Select value={bookerNotificationMethod} onValueChange={(value: \"email\" | \"sms\" | \"both\") => setBook"
        },
        {
          "type": "email",
          "line": 276,
          "rule": "value={bookerNotificationMethod} onValueChange={(value: \"email\" | \"sms\" | \"both\") => setBookerNotifi"
        },
        {
          "type": "email",
          "line": 277,
          "rule": "onValueChange={(value: \"email\" | \"sms\" | \"both\") => setBookerNotificationMethod(value)}"
        },
        {
          "type": "email",
          "line": 277,
          "rule": "{(value: \"email\" | \"sms\" | \"both\") => setBookerNotificationMethod(value)}"
        },
        {
          "type": "email",
          "line": 277,
          "rule": "(value: \"email\" | \"sms\" | \"both\") => setBookerNotificationMethod(value)"
        },
        {
          "type": "email",
          "line": 277,
          "rule": "value: \"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 277,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 277,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 277,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 281,
          "rule": "<SelectContent>\r\n                      <SelectItem value=\"email\">\r\n                        <div clas"
        },
        {
          "type": "email",
          "line": 282,
          "rule": "<SelectItem value=\"email\">\r\n                        <div className=\"flex items-center gap-2\">\r\n     "
        },
        {
          "type": "email",
          "line": 282,
          "rule": "<SelectItem value=\"email\">"
        },
        {
          "type": "email",
          "line": 282,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 282,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 283,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 342,
          "rule": "<Select value={recipientNotificationMethod} onValueChange={(value: \"email\" | \"sms\" | \"both\") => setR"
        },
        {
          "type": "email",
          "line": 342,
          "rule": "<Select value={recipientNotificationMethod} onValueChange={(value: \"email\" | \"sms\" | \"both\") => setR"
        },
        {
          "type": "email",
          "line": 342,
          "rule": "value={recipientNotificationMethod} onValueChange={(value: \"email\" | \"sms\" | \"both\") => setRecipient"
        },
        {
          "type": "email",
          "line": 343,
          "rule": "onValueChange={(value: \"email\" | \"sms\" | \"both\") => setRecipientNotificationMethod(value)}"
        },
        {
          "type": "email",
          "line": 343,
          "rule": "{(value: \"email\" | \"sms\" | \"both\") => setRecipientNotificationMethod(value)}"
        },
        {
          "type": "email",
          "line": 343,
          "rule": "(value: \"email\" | \"sms\" | \"both\") => setRecipientNotificationMethod(value)"
        },
        {
          "type": "email",
          "line": 343,
          "rule": "value: \"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 343,
          "rule": "\"email\" | \"sms\" | \"both\""
        },
        {
          "type": "email",
          "line": 343,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 343,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 347,
          "rule": "<SelectContent>\r\n                        <SelectItem value=\"email\">\r\n                          <div "
        },
        {
          "type": "email",
          "line": 348,
          "rule": "<SelectItem value=\"email\">\r\n                          <div className=\"flex items-center gap-2\">\r\n   "
        },
        {
          "type": "email",
          "line": 348,
          "rule": "<SelectItem value=\"email\">"
        },
        {
          "type": "email",
          "line": 348,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 348,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 349,
          "rule": "\"email\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "lines": 346,
      "complexity": 36,
      "conditionals": [
        {
          "type": "if",
          "line": 48,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && selectedTreatment.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "selectedTreatment?.pricingType === \"fixed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "selectedDuration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "!bookingOptions.bookingTime",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "!bookingOptions.bookingDate",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "anonymous",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ \r\n  slot: TimeSlot\r\n  isSelected: boolean\r\n  onSelect: (time: string) => void\r\n}"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "date",
              "type": "Date | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "time",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 87,
          "parameters": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 93,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 96,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 158,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 189,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 227,
          "parameters": [
            {
              "name": "slot",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 109,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\user-subscriptions\\admin-user-subscriptions-client.tsx",
      "lines": 467,
      "complexity": 36,
      "conditionals": [
        {
          "type": "if",
          "line": 64,
          "condition": "showRefreshToast",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "result.success && result.userSubscriptions && result.pagination",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 73,
          "condition": "showRefreshToast",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "initialUserSubscriptions.length > 0 &&\r\n      currentPage === initialPagination?.page &&\r\n      searchTerm === \"\" &&\r\n      statusFilter === \"all\" &&\r\n      limit === initialPagination?.limit",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "newPage > 0 && newPage <= (pagination?.totalPages || 1)",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminUserSubscriptionsClient",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "AdminUserSubscriptionsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [
            {
              "name": "sum",
              "type": "any"
            },
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "fetchData",
          "line": 61,
          "parameters": [
            {
              "name": "page",
              "type": "number"
            },
            {
              "name": "currentLimit",
              "type": "number"
            },
            {
              "name": "search",
              "type": "string"
            },
            {
              "name": "status",
              "type": "string"
            },
            {
              "name": "showRefreshToast",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSearchAndFilter",
          "line": 94,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 97,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePageChange",
          "line": 99,
          "parameters": [
            {
              "name": "newPage",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleExport",
          "line": 102,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "TableSkeleton",
          "line": 104,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 111,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 118,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "j",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CardListSkeleton",
          "line": 131,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 134,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 229,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 230,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 297,
          "parameters": [
            {
              "name": "subscription",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 301,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 345,
          "parameters": [
            {
              "name": "subscription",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 349,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 366,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 375,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 384,
          "parameters": [
            {
              "name": "l",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 393,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 28,
          "rule": "interface PopulatedUserSubscription extends IUserSubscription {\r\n  userId: Pick<User, \"name\" | \"emai"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "userId: Pick<User, \"name\" | \"email\"> & { _id: string }"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "Pick<User, \"name\" | \"email\"> & { _id: string }"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "Pick<User, \"name\" | \"email\">"
        },
        {
          "type": "email",
          "line": 30,
          "rule": "\"name\" | \"email\""
        },
        {
          "type": "email",
          "line": 30,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 30,
          "rule": "\"email\""
        }
      ],
      "errorHandling": [
        {
          "line": 65,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\booking\\steps\\guest-treatment-selection-step.tsx",
      "lines": 258,
      "complexity": 35,
      "conditionals": [
        {
          "type": "if",
          "line": 39,
          "condition": "!selectedCategory",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 49,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && selectedTreatment.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "!bookingOptions.selectedTreatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "selectedTreatment?.pricingType === \"duration_based\" && !bookingOptions.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "selectedTreatment?.allowTherapistGenderSelection && !hideGenderPreference && !bookingOptions.therapistGenderPreference",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestTreatmentSelectionStep",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestTreatmentSelectionStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatPrice",
          "line": 54,
          "parameters": [
            {
              "name": "price",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDurationString",
          "line": 56,
          "parameters": [
            {
              "name": "minutes",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleTreatmentSelect",
          "line": 71,
          "parameters": [
            {
              "name": "treatmentId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDurationSelect",
          "line": 76,
          "parameters": [
            {
              "name": "durationId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleGenderPreferenceChange",
          "line": 79,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 80,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "category",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 101,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 117,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [
            {
              "name": "duration",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "lines": 455,
      "complexity": 35,
      "conditionals": [
        {
          "type": "if",
          "line": 86,
          "condition": "statusFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "professionalFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "treatmentFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "dateRangeFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "priceRangeFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 90,
          "condition": "addressFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 93,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 101,
          "condition": "error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 374,
          "condition": "page > data.totalPages",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminBookingsClient",
          "line": 24,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRowClick",
          "line": 73,
          "parameters": [
            {
              "name": "booking",
              "type": "PopulatedBooking"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCloseEditModal",
          "line": 75,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 80,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "clearAllFilters",
          "line": 81,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getActiveFiltersCount",
          "line": 86,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 282,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 289,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 297,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 305,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 312,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 362,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 367,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 373,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 380,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 386,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 392,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "actions\\coupon-actions.ts",
      "lines": 246,
      "complexity": 34,
      "conditionals": [
        {
          "type": "if",
          "line": 21,
          "condition": "!coupon.isActive",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 23,
          "condition": "validFrom > now",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 28,
          "condition": "endOfValidUntilDay <= now",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "!validatedFields.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "error.code === 11000",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 64,
          "condition": "!validatedFields.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "!updatedCoupon",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 81,
          "condition": "error.code === 11000",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "!deletedCoupon",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 108,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 112,
          "condition": "filters.code",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 113,
          "condition": "typeof filters.isActive === \"boolean\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 116,
          "condition": "filters.partnerId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 133,
          "condition": "filters.effectiveStatus",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 146,
          "condition": "!session || !isAdminUser(session.user)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 163,
          "condition": "!session || !isPartnerUser(session.user) || !session.user.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 167,
          "condition": "filters.code",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 169,
          "condition": "typeof filters.isActive === \"boolean\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "isAdminUser",
          "line": 11,
          "parameters": [
            {
              "name": "user",
              "type": "{ roles?: string[] } | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "isPartnerUser",
          "line": 13,
          "parameters": [
            {
              "name": "user",
              "type": "{ roles?: string[] } | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "calculateEffectiveStatus",
          "line": 15,
          "parameters": [
            {
              "name": "coupon",
              "type": "ICoupon"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createCoupon",
          "line": 35,
          "parameters": [
            {
              "name": "payload",
              "type": "CreateCouponPayload"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateCoupon",
          "line": 58,
          "parameters": [
            {
              "name": "payload",
              "type": "UpdateCouponPayload"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteCoupon",
          "line": 86,
          "parameters": [
            {
              "name": "couponId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getAdminCoupons",
          "line": 101,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "filters",
              "type": "{ code?: string; isActive?: boolean; partnerId?: string; effectiveStatus?: string }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 135,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPartnersForSelection",
          "line": 143,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 150,
          "parameters": [
            {
              "name": "partner",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAssignedPartnerCoupons",
          "line": 155,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "filters",
              "type": "{ code?: string; isActive?: boolean }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { revalidatePath } from \"next/cache\"\r\nimport Coupon, { type ICoupon } from \"@"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 7,
          "rule": "import {\r\n  CreateCouponSchema,\r\n  UpdateCouponSchema,\r\n  type CreateCouponPayload,\r\n  type UpdateCo"
        },
        {
          "type": "general",
          "line": 9,
          "rule": "\"@/lib/validation/coupon-schemas\""
        },
        {
          "type": "general",
          "line": 37,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "general",
          "line": 40,
          "rule": "const validatedFields = CreateCouponSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 40,
          "rule": "const validatedFields = CreateCouponSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "validatedFields = CreateCouponSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 42,
          "rule": "if (!validatedFields.success) {\r\n    return { success: false, error: \"Invalid fields\", details: vali"
        },
        {
          "type": "general",
          "line": 42,
          "rule": "!validatedFields.success"
        },
        {
          "type": "general",
          "line": 42,
          "rule": "validatedFields.success"
        },
        {
          "type": "general",
          "line": 42,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 42,
          "rule": "{\r\n    return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fi"
        },
        {
          "type": "general",
          "line": 42,
          "rule": "return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErro"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "{ success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErrors }"
        },
        {
          "type": "general",
          "line": 43,
          "rule": "details: validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "validatedFields.error.flatten()"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "validatedFields.error.flatten"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "validatedFields.error"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "try {\r\n    await connectDB()\r\n    const newCoupon = new Coupon({\r\n      ...validatedFields.data,\r\n  "
        },
        {
          "type": "general",
          "line": 45,
          "rule": "{\r\n    await connectDB()\r\n    const newCoupon = new Coupon({\r\n      ...validatedFields.data,\r\n      "
        },
        {
          "type": "general",
          "line": 45,
          "rule": "const newCoupon = new Coupon({\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n "
        },
        {
          "type": "general",
          "line": 45,
          "rule": "const newCoupon = new Coupon({\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n "
        },
        {
          "type": "general",
          "line": 46,
          "rule": "newCoupon = new Coupon({\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n      a"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "new Coupon({\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n      assignedPartn"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "{\r\n      ...validatedFields.data,\r\n      createdBy: session.user.id,\r\n      assignedPartnerId: valid"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "...validatedFields.data"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 47,
          "rule": "assignedPartnerId: validatedFields.data.assignedPartnerId || null"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "validatedFields.data.assignedPartnerId || null"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "validatedFields.data.assignedPartnerId"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "revalidatePath(\"/dashboard/admin/coupons\")"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "revalidatePath(\"/dashboard/admin/coupons\")"
        },
        {
          "type": "general",
          "line": 50,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "const validatedFields = UpdateCouponSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "const validatedFields = UpdateCouponSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "validatedFields = UpdateCouponSchema.safeParse(payload)"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "if (!validatedFields.success) {\r\n    return { success: false, error: \"Invalid fields\", details: vali"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "!validatedFields.success"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "validatedFields.success"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "{\r\n    return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fi"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "return { success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErro"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "{ success: false, error: \"Invalid fields\", details: validatedFields.error.flatten().fieldErrors }"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "details: validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields.error.flatten().fieldErrors"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields.error.flatten()"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields.error.flatten"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields.error"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "const { id, ...updateData } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "const { id, ...updateData } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "{ id, ...updateData } = validatedFields.data"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "validatedFields.data"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "validatedFields"
        },
        {
          "type": "general",
          "line": 75,
          "rule": "revalidatePath(\"/dashboard/admin/coupons\")"
        },
        {
          "type": "general",
          "line": 75,
          "rule": "revalidatePath(\"/dashboard/admin/coupons\")"
        },
        {
          "type": "general",
          "line": 75,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 76,
          "rule": "revalidatePath(`/dashboard/partner/assigned-coupons`)"
        },
        {
          "type": "general",
          "line": 76,
          "rule": "revalidatePath(`/dashboard/partner/assigned-coupons`)"
        },
        {
          "type": "general",
          "line": 76,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "revalidatePath(\"/dashboard/admin/coupons\")"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "revalidatePath(\"/dashboard/admin/coupons\")"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "revalidatePath(`/dashboard/partner/assigned-coupons`)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "revalidatePath(`/dashboard/partner/assigned-coupons`)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isAdminUser(session.use"
        },
        {
          "type": "required",
          "line": 108,
          "rule": "if (!session || !isAdminUser(session.user)) {\r\n    throw new Error(\"Unauthorized: Admin access requi"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "{\r\n    throw new Error(\"Unauthorized: Admin access required.\")\r\n  }"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "throw new Error(\"Unauthorized: Admin access required.\")"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "new Error(\"Unauthorized: Admin access required.\")"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "\"Unauthorized: Admin access required.\""
        },
        {
          "type": "email",
          "line": 118,
          "rule": "const allMatchingCoupons = await Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    ."
        },
        {
          "type": "email",
          "line": 118,
          "rule": "const allMatchingCoupons = await Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    ."
        },
        {
          "type": "email",
          "line": 124,
          "rule": "allMatchingCoupons = await Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .popula"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "await Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPartnerId"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPartnerId\", \"na"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPartnerId\", \"na"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPartnerId\", \"na"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPartnerId\", \"na"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate(\"assignedPartnerId\", \"na"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")\r\n    .populate"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "Coupon.find(query)\r\n    .populate(\"createdBy\", \"name email\")"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "\"name email\""
        },
        {
          "type": "email",
          "line": 126,
          "rule": "\"name email\""
        },
        {
          "type": "required",
          "line": 162,
          "rule": "{\r\n  const session = await getServerSession(authOptions)\r\n  if (!session || !isPartnerUser(session.u"
        },
        {
          "type": "required",
          "line": 163,
          "rule": "if (!session || !isPartnerUser(session.user) || !session.user.id) {\r\n    throw new Error(\"Unauthoriz"
        },
        {
          "type": "required",
          "line": 164,
          "rule": "{\r\n    throw new Error(\"Unauthorized: Partner access required.\")\r\n  }"
        },
        {
          "type": "required",
          "line": 164,
          "rule": "throw new Error(\"Unauthorized: Partner access required.\")"
        },
        {
          "type": "required",
          "line": 165,
          "rule": "new Error(\"Unauthorized: Partner access required.\")"
        },
        {
          "type": "required",
          "line": 165,
          "rule": "\"Unauthorized: Partner access required.\""
        }
      ],
      "errorHandling": [
        {
          "line": 45,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 69,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 90,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 147,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\gift-vouchers\\member-gift-voucher-card.tsx",
      "lines": 218,
      "complexity": 34,
      "conditionals": [
        {
          "type": "switch",
          "line": 20,
          "cases": 7,
          "expression": "status"
        }
      ],
      "functions": [
        {
          "name": "MemberGiftVoucherCard",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "MemberGiftVoucherCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusColor",
          "line": 19,
          "parameters": [
            {
              "name": "status",
              "type": "GiftVoucherPlain[\"status\"]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 151,
          "parameters": [
            {
              "name": "usage",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 183,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\booking\\steps\\guest-address-step.tsx",
      "lines": 402,
      "complexity": 33,
      "conditionals": [],
      "functions": [
        {
          "name": "GuestAddressStep",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestAddressStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onSubmit",
          "line": 68,
          "parameters": [
            {
              "name": "data",
              "type": "GuestAddressFormData"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleAddressTypeChange",
          "line": 70,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 95,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 115,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 153,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 164,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 189,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 199,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 213,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 223,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 234,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 248,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 269,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 281,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 298,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "lines": 203,
      "complexity": 33,
      "conditionals": [
        {
          "type": "if",
          "line": 28,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 39,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 52,
          "condition": "address.addressType === \"apartment\" && address.apartmentDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "address.apartmentDetails.floor !== undefined && address.apartmentDetails.floor !== null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 57,
          "condition": "address.apartmentDetails.apartmentNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "address.apartmentDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 64,
          "condition": "address.addressType === \"house\" && address.houseDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "address.houseDetails.doorName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 68,
          "condition": "address.houseDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "address.addressType === \"office\" && address.officeDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "address.officeDetails.buildingName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "address.officeDetails.floor !== undefined && address.officeDetails.floor !== null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "address.officeDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "address.addressType === \"hotel\" && address.hotelDetails",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "address.hotelDetails.hotelName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "address.hotelDetails.roomNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "address.addressType === \"other\" && address.otherDetails?.instructions",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "address.hasPrivateParking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "address.additionalNotes",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AddressCard",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "AddressCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSetDefault",
          "line": 26,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleDelete",
          "line": 36,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 116,
          "parameters": [
            {
              "name": "detail",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 28,
          "rule": "if (result.success) {\r\n        toast.success(t(\"addresses.setDefaultSuccess\"))\r\n        queryClient."
        },
        {
          "type": "general",
          "line": 29,
          "rule": "{\r\n        toast.success(t(\"addresses.setDefaultSuccess\"))\r\n        queryClient.invalidateQueries({ "
        },
        {
          "type": "general",
          "line": 30,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"addresses\"] })"
        },
        {
          "type": "general",
          "line": 30,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"addresses\"] })"
        },
        {
          "type": "general",
          "line": 30,
          "rule": "queryClient.invalidateQueries"
        },
        {
          "type": "general",
          "line": 30,
          "rule": "invalidateQueries"
        },
        {
          "type": "general",
          "line": 39,
          "rule": "if (result.success) {\r\n        toast.success(t(\"addresses.deleteSuccess\"))\r\n        queryClient.inva"
        },
        {
          "type": "general",
          "line": 39,
          "rule": "{\r\n        toast.success(t(\"addresses.deleteSuccess\"))\r\n        queryClient.invalidateQueries({ quer"
        },
        {
          "type": "general",
          "line": 40,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"addresses\"] })"
        },
        {
          "type": "general",
          "line": 40,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"addresses\"] })"
        },
        {
          "type": "general",
          "line": 40,
          "rule": "queryClient.invalidateQueries"
        },
        {
          "type": "general",
          "line": 41,
          "rule": "invalidateQueries"
        }
      ],
      "errorHandling": [
        {
          "line": 26,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 37,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "lines": 266,
      "complexity": 32,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 18,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 30,
          "condition": "!review?.bookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "!review?.bookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "!review?.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "!review?.professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "!review?.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "!review?.bookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "!recipient",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "!review",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 163,
          "condition": "!review",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDateSafe",
          "line": 12,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateTimeSafe",
          "line": 16,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date | null | undefined"
            },
            {
              "name": "language",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAdminReviewColumns",
          "line": 22,
          "parameters": [
            {
              "name": "t",
              "type": "(key: string, fallback?: string) => string"
            },
            {
              "name": "language",
              "type": "string"
            },
            {
              "name": "onReviewClick",
              "type": "(review: PopulatedReview) => void"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 68,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 84,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 99,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 136,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 162,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 168,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 76,
          "rule": "<div className=\"text-xs text-muted-foreground\">\r\n              {professional.phone || \"-\"}\r\n        "
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "{professional.phone || \"-\"}"
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "professional.phone || \"-\""
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "professional.phone"
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "<div className=\"text-xs text-muted-foreground\">\r\n              {professional.email || \"-\"}\r\n        "
        },
        {
          "type": "email",
          "line": 80,
          "rule": "{professional.email || \"-\"}"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "professional.email || \"-\""
        },
        {
          "type": "email",
          "line": 80,
          "rule": "professional.email"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 88,
          "rule": "<div className=\"space-y-1\">\r\n            <div className=\"font-medium\">{user.name || t(\"common.unknow"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "<div className=\"text-xs text-muted-foreground\">\r\n              {user.phone || \"-\"}\r\n            </di"
        },
        {
          "type": "phone",
          "line": 92,
          "rule": "{user.phone || \"-\"}"
        },
        {
          "type": "phone",
          "line": 92,
          "rule": "user.phone || \"-\""
        },
        {
          "type": "phone",
          "line": 92,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 92,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 93,
          "rule": "<div className=\"text-xs text-muted-foreground\">\r\n              {user.email || \"-\"}\r\n            </di"
        },
        {
          "type": "email",
          "line": 95,
          "rule": "{user.email || \"-\"}"
        },
        {
          "type": "email",
          "line": 95,
          "rule": "user.email || \"-\""
        },
        {
          "type": "email",
          "line": 95,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 95,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 14,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 18,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\account\\password-change-form.tsx",
      "lines": 200,
      "complexity": 31,
      "conditionals": [
        {
          "type": "if",
          "line": 26,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 33,
          "condition": "result.message === \"passwordMismatch\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 39,
          "condition": "result.message === \"invalidCurrentPassword\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 45,
          "condition": "result.message === \"weakPassword\"",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "PasswordChangeForm",
          "line": 9,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 16,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "togglePasswordVisibility",
          "line": 55,
          "parameters": [
            {
              "name": "field",
              "type": "\"current\" | \"new\" | \"confirm\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 70,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 70,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 89,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 89,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 118,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 118,
          "rule": "required"
        }
      ],
      "errorHandling": [
        {
          "line": 24,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "actions\\auth-actions.ts",
      "lines": 180,
      "complexity": 30,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 26,
          "condition": "phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "!cleaned.startsWith(\"+\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 31,
          "condition": "cleaned.startsWith(\"0\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 35,
          "condition": "cleaned.length === 9 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 39,
          "condition": "cleaned.length === 10 && cleaned.startsWith(\"972\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 45,
          "condition": "cleaned.startsWith(\"+9720\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 50,
          "condition": "cleaned.startsWith(\"+972\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "nationalNumber.length !== 9 || !/^[5-9]/.test(nationalNumber)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "day && month && year",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "birthDate >= minAge && birthDate <= maxAge",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 80,
          "condition": "!name || !email || !password",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "!validateEmail(email)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "formattedPhone && !validatePhone(formattedPhone)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "!passwordValidation.isValid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 109,
          "condition": "emailExists",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 112,
          "condition": "phoneExists",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "registerUser",
          "line": 6,
          "parameters": [
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "checkUserExists",
          "line": 134,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { hashPassword, validatePassword, validateEmail, validatePhone } from \"@/lib/"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { hashPassword, validatePassword, validateEmail, validatePhone } from \"@/lib/auth/auth\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ hashPassword, validatePassword, validateEmail, validatePhone }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ hashPassword, validatePassword, validateEmail, validatePhone }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validatePassword"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validatePassword"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "validatePhone"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "validatePhone"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "const email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "const email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "email = formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "formData.get(\"email\") as string"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "formData.get(\"email\")"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "const phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "const phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "phone = formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 16,
          "rule": "formData.get(\"phone\") as string"
        },
        {
          "type": "phone",
          "line": 16,
          "rule": "formData.get(\"phone\")"
        },
        {
          "type": "phone",
          "line": 16,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 19,
          "rule": "logger.info(`[${requestId}] Registration attempt for email: ${email.substring(0, 3)}***${email.split"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "logger.info(`[${requestId}] Registration attempt for email: ${email.substring(0, 3)}***${email.split"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "`[${requestId}] Registration attempt for email: ${email.substring(0, 3)}***${email.split(\"@\")[1]}`"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "requestId}] Registration attempt for email: ${"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "}] Registration attempt for email: ${"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.substring(0, 3)}***${"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.substring(0, 3)"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.substring"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.split(\"@\")[1]}`"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.split(\"@\")[1]"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email.split"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "if (phone) {\r\n      logger.info(`[${requestId}] Phone provided: ${phone.substring(0, 3)}***${phone.s"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "{\r\n      logger.info(`[${requestId}] Phone provided: ${phone.substring(0, 3)}***${phone.substring(ph"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "logger.info(`[${requestId}] Phone provided: ${phone.substring(0, 3)}***${phone.substring(phone.lengt"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "logger.info(`[${requestId}] Phone provided: ${phone.substring(0, 3)}***${phone.substring(phone.lengt"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "`[${requestId}] Phone provided: ${phone.substring(0, 3)}***${phone.substring(phone.length - 3)}`"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone.substring(0, 3)}***${"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone.substring(0, 3)"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone.substring"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone.substring(phone.length - 3)}`"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone.substring(phone.length - 3)"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone.substring"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone.length - 3"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone.length"
        },
        {
          "type": "phone",
          "line": 24,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "if (phone) {\r\n      // Remove all non-digit characters except the plus sign\r\n      let cleaned = pho"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "{\r\n      // Remove all non-digit characters except the plus sign\r\n      let cleaned = phone.replace("
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "let cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "let cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "phone.replace"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "if (!name || !email || !password) {\r\n      logger.warn(`[${requestId}] Registration failed: Missing "
        },
        {
          "type": "email",
          "line": 81,
          "rule": "!name || !email || !password"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "!name || !email"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "!email"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "{\r\n      logger.warn(`[${requestId}] Registration failed: Missing required fields`)\r\n      return { "
        },
        {
          "type": "required",
          "line": 82,
          "rule": "logger.warn(`[${requestId}] Registration failed: Missing required fields`)"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "logger.warn(`[${requestId}] Registration failed: Missing required fields`)"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "`[${requestId}] Registration failed: Missing required fields`"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "requestId}] Registration failed: Missing required fields`"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "}] Registration failed: Missing required fields`"
        },
        {
          "type": "email",
          "line": 85,
          "rule": "if (!validateEmail(email)) {\r\n      logger.warn(`[${requestId}] Registration failed: Invalid email f"
        },
        {
          "type": "email",
          "line": 85,
          "rule": "!validateEmail(email)"
        },
        {
          "type": "email",
          "line": 85,
          "rule": "validateEmail(email)"
        },
        {
          "type": "general",
          "line": 85,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "{\r\n      logger.warn(`[${requestId}] Registration failed: Invalid email format`)\r\n      return { suc"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "logger.warn(`[${requestId}] Registration failed: Invalid email format`)"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "logger.warn(`[${requestId}] Registration failed: Invalid email format`)"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "`[${requestId}] Registration failed: Invalid email format`"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "requestId}] Registration failed: Invalid email format`"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "}] Registration failed: Invalid email format`"
        },
        {
          "type": "phone",
          "line": 89,
          "rule": "if (formattedPhone && !validatePhone(formattedPhone)) {\r\n      logger.warn(`[${requestId}] Registrat"
        },
        {
          "type": "general",
          "line": 90,
          "rule": "formattedPhone && !validatePhone(formattedPhone)"
        },
        {
          "type": "general",
          "line": 90,
          "rule": "!validatePhone(formattedPhone)"
        },
        {
          "type": "general",
          "line": 90,
          "rule": "validatePhone(formattedPhone)"
        },
        {
          "type": "general",
          "line": 90,
          "rule": "validatePhone"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "{\r\n      logger.warn(`[${requestId}] Registration failed: Invalid phone format`)\r\n      return { suc"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "logger.warn(`[${requestId}] Registration failed: Invalid phone format`)"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "logger.warn(`[${requestId}] Registration failed: Invalid phone format`)"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "`[${requestId}] Registration failed: Invalid phone format`"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "requestId}] Registration failed: Invalid phone format`"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "}] Registration failed: Invalid phone format`"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "const passwordValidation = validatePassword(password)"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "const passwordValidation = validatePassword(password)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "passwordValidation = validatePassword(password)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatePassword(password)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatePassword"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "const [emailExists, phoneExists] = await Promise.all([\r\n      UserQueries.emailExists(email),\r\n     "
        },
        {
          "type": "email",
          "line": 105,
          "rule": "const [emailExists, phoneExists] = await Promise.all([\r\n      UserQueries.emailExists(email),\r\n     "
        },
        {
          "type": "email",
          "line": 105,
          "rule": "[emailExists, phoneExists] = await Promise.all([\r\n      UserQueries.emailExists(email),\r\n      forma"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "[emailExists, phoneExists]"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "emailExists"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "emailExists"
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "phoneExists"
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "phoneExists"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "await Promise.all([\r\n      UserQueries.emailExists(email),\r\n      formattedPhone ? UserQueries.phone"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "Promise.all([\r\n      UserQueries.emailExists(email),\r\n      formattedPhone ? UserQueries.phoneExists"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "[\r\n      UserQueries.emailExists(email),\r\n      formattedPhone ? UserQueries.phoneExists(formattedPh"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "UserQueries.emailExists(email)"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "UserQueries.emailExists"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "emailExists"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 107,
          "rule": "formattedPhone ? UserQueries.phoneExists(formattedPhone) : Promise.resolve(false)"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "UserQueries.phoneExists(formattedPhone)"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "UserQueries.phoneExists"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "phoneExists"
        },
        {
          "type": "email",
          "line": 109,
          "rule": "if (emailExists) {\r\n      logger.warn(`[${requestId}] Registration failed: Email already exists`)\r\n "
        },
        {
          "type": "email",
          "line": 109,
          "rule": "emailExists"
        },
        {
          "type": "email",
          "line": 110,
          "rule": "{\r\n      logger.warn(`[${requestId}] Registration failed: Email already exists`)\r\n      return { suc"
        },
        {
          "type": "email",
          "line": 111,
          "rule": "return { success: false, message: \"emailExists\" }"
        },
        {
          "type": "email",
          "line": 111,
          "rule": "{ success: false, message: \"emailExists\" }"
        },
        {
          "type": "email",
          "line": 112,
          "rule": "message: \"emailExists\""
        },
        {
          "type": "email",
          "line": 112,
          "rule": "\"emailExists\""
        },
        {
          "type": "phone",
          "line": 112,
          "rule": "if (phoneExists) {\r\n      logger.warn(`[${requestId}] Registration failed: Phone already exists`)\r\n "
        },
        {
          "type": "phone",
          "line": 113,
          "rule": "phoneExists"
        },
        {
          "type": "phone",
          "line": 113,
          "rule": "{\r\n      logger.warn(`[${requestId}] Registration failed: Phone already exists`)\r\n      return { suc"
        },
        {
          "type": "phone",
          "line": 115,
          "rule": "return { success: false, message: \"phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 115,
          "rule": "{ success: false, message: \"phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 115,
          "rule": "message: \"phoneExists\""
        },
        {
          "type": "phone",
          "line": 115,
          "rule": "\"phoneExists\""
        },
        {
          "type": "email",
          "line": 122,
          "rule": "const user = new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone: formattedPhone"
        },
        {
          "type": "email",
          "line": 122,
          "rule": "const user = new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone: formattedPhone"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "user = new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone: formattedPhone,\r\n   "
        },
        {
          "type": "email",
          "line": 123,
          "rule": "new User({\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone: formattedPhone,\r\n      pass"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "{\r\n      name,\r\n      email: email.toLowerCase(),\r\n      phone: formattedPhone,\r\n      password: has"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 124,
          "rule": "phone: formattedPhone"
        },
        {
          "type": "phone",
          "line": 124,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 134,
          "rule": "export async function checkUserExists(email: string) {\r\n  const requestId = `check_${Date.now()}_${M"
        },
        {
          "type": "email",
          "line": 135,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 135,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "{\r\n  const requestId = `check_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`\r\n\r\n  try"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "try {\r\n    logger.info(`[${requestId}] Checking if user exists with email: ${email.substring(0, 3)}*"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "{\r\n    logger.info(`[${requestId}] Checking if user exists with email: ${email.substring(0, 3)}***${"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "logger.info(`[${requestId}] Checking if user exists with email: ${email.substring(0, 3)}***${email.s"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "logger.info(`[${requestId}] Checking if user exists with email: ${email.substring(0, 3)}***${email.s"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "`[${requestId}] Checking if user exists with email: ${email.substring(0, 3)}***${email.split(\"@\")[1]"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "requestId}] Checking if user exists with email: ${"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "}] Checking if user exists with email: ${"
        },
        {
          "type": "email",
          "line": 139,
          "rule": "email.substring(0, 3)}***${"
        },
        {
          "type": "email",
          "line": 139,
          "rule": "email.substring(0, 3)"
        },
        {
          "type": "email",
          "line": 139,
          "rule": "email.substring"
        },
        {
          "type": "email",
          "line": 139,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "email.split(\"@\")[1]}`"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "email.split(\"@\")[1]"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "email.split"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "const exists = await UserQueries.emailExists(email)"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "const exists = await UserQueries.emailExists(email)"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "exists = await UserQueries.emailExists(email)"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "await UserQueries.emailExists(email)"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "UserQueries.emailExists(email)"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "UserQueries.emailExists"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "emailExists"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 9,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 137,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\notifications\\notification-manager.ts",
      "lines": 454,
      "complexity": 30,
      "conditionals": [
        {
          "type": "if",
          "line": 19,
          "condition": "process.env.TWILIO_ACCOUNT_SID && \n      process.env.TWILIO_AUTH_TOKEN && \n      process.env.TWILIO_ACCOUNT_SID.startsWith('AC')",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 40,
          "condition": "this.isDevelopment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "recipient.type === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 45,
          "condition": "!emailService.isConfigured()",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "recipient.type === \"phone\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 52,
          "condition": "!smsService.isConfigured()",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "this.isDevelopment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "recipient.type === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 116,
          "condition": "this.isDevelopment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 136,
          "condition": "this.isDevelopment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 158,
          "condition": "!resend",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 163,
          "cases": 4,
          "expression": "data.type"
        },
        {
          "type": "if",
          "line": 198,
          "condition": "!twilioClient || !FROM_PHONE",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 215,
          "condition": "recipient.type === \"email\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 218,
          "condition": "recipient.type === \"phone\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "sendNotification",
          "line": 32,
          "parameters": [
            {
              "name": "recipient",
              "type": "NotificationRecipient"
            },
            {
              "name": "data",
              "type": "NotificationData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendOTP",
          "line": 61,
          "parameters": [
            {
              "name": "recipient",
              "type": "EmailRecipient | PhoneRecipient"
            },
            {
              "name": "length",
              "type": "number"
            },
            {
              "name": "expiryMinutes",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "generateOTP",
          "line": 104,
          "parameters": [
            {
              "name": "length",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "sendWelcome",
          "line": 111,
          "parameters": [
            {
              "name": "recipient",
              "type": "EmailRecipient"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendPasswordReset",
          "line": 129,
          "parameters": [
            {
              "name": "recipient",
              "type": "EmailRecipient"
            },
            {
              "name": "resetUrl",
              "type": "string"
            },
            {
              "name": "expiryMinutes",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendEmailNotification",
          "line": 153,
          "parameters": [
            {
              "name": "recipient",
              "type": "string"
            },
            {
              "name": "data",
              "type": "NotificationData"
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            },
            {
              "name": "recipientName",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendSMSNotification",
          "line": 194,
          "parameters": [
            {
              "name": "recipient",
              "type": "string"
            },
            {
              "name": "data",
              "type": "NotificationData"
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendNotification",
          "line": 212,
          "parameters": [
            {
              "name": "recipient",
              "type": "NotificationRecipient"
            },
            {
              "name": "data",
              "type": "NotificationData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendNotificationToMultiple",
          "line": 222,
          "parameters": [
            {
              "name": "recipients",
              "type": "NotificationRecipient[]"
            },
            {
              "name": "data",
              "type": "NotificationData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 226,
          "parameters": [
            {
              "name": "recipient",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "sendOTP",
          "line": 228,
          "parameters": [
            {
              "name": "recipients",
              "type": "NotificationRecipient[]"
            },
            {
              "name": "code",
              "type": "string"
            },
            {
              "name": "expiresIn",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendWelcome",
          "line": 234,
          "parameters": [
            {
              "name": "recipients",
              "type": "NotificationRecipient[]"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendPasswordReset",
          "line": 240,
          "parameters": [
            {
              "name": "recipients",
              "type": "NotificationRecipient[]"
            },
            {
              "name": "resetUrl",
              "type": "string"
            },
            {
              "name": "expiresIn",
              "type": "number"
            }
          ],
          "isAsync": true
        },
        {
          "name": "sendTreatmentBookingSuccess",
          "line": 247,
          "parameters": [
            {
              "name": "recipients",
              "type": "NotificationRecipient[]"
            },
            {
              "name": "bookingData",
              "type": "{\n    recipientName: string\n    bookerName?: string\n    treatmentName: string\n    bookingDateTime: Date\n    bookingNumber: string\n    bookingAddress: string\n    isForSomeoneElse: boolean\n  }"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 1,
          "rule": "import { emailService } from \"./email-service\"\nimport { smsService } from \"./sms-service\"\nimport { l"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "import { emailService } from \"./email-service\""
        },
        {
          "type": "email",
          "line": 1,
          "rule": "{ emailService }"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "{ emailService }"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "\"./email-service\""
        },
        {
          "type": "email",
          "line": 13,
          "rule": "import { getEmailTemplate } from \"./templates/email-templates\""
        },
        {
          "type": "email",
          "line": 13,
          "rule": "\"./templates/email-templates\""
        },
        {
          "type": "email",
          "line": 40,
          "rule": "if (this.isDevelopment) {\n      logNotification(recipient.type === \"email\" ? \"email\" : \"sms\", recipi"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "{\n      logNotification(recipient.type === \"email\" ? \"email\" : \"sms\", recipient.value, data)\n      r"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "logNotification(recipient.type === \"email\" ? \"email\" : \"sms\", recipient.value, data)"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "logNotification(recipient.type === \"email\" ? \"email\" : \"sms\", recipient.value, data)"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "recipient.type === \"email\" ? \"email\" : \"sms\""
        },
        {
          "type": "email",
          "line": 42,
          "rule": "recipient.type === \"email\""
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "if (recipient.type === \"email\") {\n      if (!emailService.isConfigured()) {\n        logger.error(\"Em"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "recipient.type === \"email\""
        },
        {
          "type": "email",
          "line": 45,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 45,
          "rule": "{\n      if (!emailService.isConfigured()) {\n        logger.error(\"Email service not configured\")\n   "
        },
        {
          "type": "email",
          "line": 45,
          "rule": "if (!emailService.isConfigured()) {\n        logger.error(\"Email service not configured\")\n        ret"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "!emailService.isConfigured()"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "emailService.isConfigured()"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "emailService.isConfigured"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 49,
          "rule": "return emailService.sendNotification(recipient as EmailRecipient, data)"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "emailService.sendNotification(recipient as EmailRecipient, data)"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "emailService.sendNotification"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "emailService"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "if (recipient.type === \"phone\") {\n      if (!smsService.isConfigured()) {\n        logger.error(\"SMS "
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "recipient.type === \"phone\""
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 74,
          "rule": "if (this.isDevelopment) {\n      // Store the OTP for verification\n      storeDevOTP(recipient.value,"
        },
        {
          "type": "email",
          "line": 75,
          "rule": "{\n      // Store the OTP for verification\n      storeDevOTP(recipient.value, recipient.type, code)\n "
        },
        {
          "type": "email",
          "line": 77,
          "rule": "logNotification(recipient.type === \"email\" ? \"email\" : \"sms\", recipient.value, { \n        code, \n   "
        },
        {
          "type": "email",
          "line": 77,
          "rule": "logNotification(recipient.type === \"email\" ? \"email\" : \"sms\", recipient.value, { \n        code, \n   "
        },
        {
          "type": "email",
          "line": 78,
          "rule": "recipient.type === \"email\" ? \"email\" : \"sms\""
        },
        {
          "type": "email",
          "line": 78,
          "rule": "recipient.type === \"email\""
        },
        {
          "type": "email",
          "line": 78,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 79,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 82,
          "rule": "try {\n      const data: OTPNotificationData = { type: \"otp\", code, expiresIn: expiryMinutes }\n      "
        },
        {
          "type": "email",
          "line": 84,
          "rule": "{\n      const data: OTPNotificationData = { type: \"otp\", code, expiresIn: expiryMinutes }\n      if ("
        },
        {
          "type": "email",
          "line": 85,
          "rule": "if (recipient.type === \"email\") {\n        await emailService.sendNotification(recipient, data)\n     "
        },
        {
          "type": "email",
          "line": 86,
          "rule": "recipient.type === \"email\""
        },
        {
          "type": "email",
          "line": 86,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 86,
          "rule": "{\n        await emailService.sendNotification(recipient, data)\n      }"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "await emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "await emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "emailService.sendNotification"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 116,
          "rule": "{\n    // In development mode, just log the welcome message\n    if (this.isDevelopment) {\n      logNo"
        },
        {
          "type": "email",
          "line": 116,
          "rule": "if (this.isDevelopment) {\n      logNotification(\"email\", recipient.value, { type: \"welcome\", name })"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "{\n      logNotification(\"email\", recipient.value, { type: \"welcome\", name })\n      return { success:"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "logNotification(\"email\", recipient.value, { type: \"welcome\", name })"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "logNotification(\"email\", recipient.value, { type: \"welcome\", name })"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 120,
          "rule": "try {\n      const data: WelcomeNotificationData = { type: \"welcome\", name }\n      await emailService"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "{\n      const data: WelcomeNotificationData = { type: \"welcome\", name }\n      await emailService.sen"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "await emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "await emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "emailService.sendNotification"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "catch (error) {\n      logger.error(\"Failed to send welcome email:\", error)\n      return {\n        su"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "{\n      logger.error(\"Failed to send welcome email:\", error)\n      return {\n        success: false,\n"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "logger.error(\"Failed to send welcome email:\", error)"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "logger.error(\"Failed to send welcome email:\", error)"
        },
        {
          "type": "email",
          "line": 125,
          "rule": "\"Failed to send welcome email:\""
        },
        {
          "type": "email",
          "line": 126,
          "rule": "return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to "
        },
        {
          "type": "email",
          "line": 126,
          "rule": "{\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to send we"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "error: error instanceof Error ? error.message : \"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 127,
          "rule": "error instanceof Error ? error.message : \"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 128,
          "rule": "\"Failed to send welcome email\""
        },
        {
          "type": "email",
          "line": 136,
          "rule": "{\n    // In development mode, just log the password reset\n    if (this.isDevelopment) {\n      logNot"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "if (this.isDevelopment) {\n      logNotification(\"email\", recipient.value, { type: \"password-reset\", "
        },
        {
          "type": "email",
          "line": 138,
          "rule": "{\n      logNotification(\"email\", recipient.value, { type: \"password-reset\", resetUrl, expiresIn: exp"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "logNotification(\"email\", recipient.value, { type: \"password-reset\", resetUrl, expiresIn: expiryMinut"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "logNotification(\"email\", recipient.value, { type: \"password-reset\", resetUrl, expiresIn: expiryMinut"
        },
        {
          "type": "email",
          "line": 139,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 141,
          "rule": "try {\n      const data: PasswordResetNotificationData = { type: \"password-reset\", resetUrl, expiresI"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "{\n      const data: PasswordResetNotificationData = { type: \"password-reset\", resetUrl, expiresIn: e"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "await emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "await emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "emailService.sendNotification(recipient, data)"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "emailService.sendNotification"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "emailService"
        },
        {
          "type": "email",
          "line": 147,
          "rule": "catch (error) {\n      logger.error(\"Failed to send password reset email:\", error)\n      return {\n   "
        },
        {
          "type": "email",
          "line": 147,
          "rule": "{\n      logger.error(\"Failed to send password reset email:\", error)\n      return {\n        success: "
        },
        {
          "type": "email",
          "line": 147,
          "rule": "logger.error(\"Failed to send password reset email:\", error)"
        },
        {
          "type": "email",
          "line": 147,
          "rule": "logger.error(\"Failed to send password reset email:\", error)"
        },
        {
          "type": "email",
          "line": 147,
          "rule": "\"Failed to send password reset email:\""
        },
        {
          "type": "email",
          "line": 148,
          "rule": "return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to "
        },
        {
          "type": "email",
          "line": 149,
          "rule": "{\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to send pa"
        },
        {
          "type": "email",
          "line": 149,
          "rule": "error: error instanceof Error ? error.message : \"Failed to send password reset email\""
        },
        {
          "type": "email",
          "line": 149,
          "rule": "error instanceof Error ? error.message : \"Failed to send password reset email\""
        },
        {
          "type": "email",
          "line": 150,
          "rule": "\"Failed to send password reset email\""
        },
        {
          "type": "email",
          "line": 158,
          "rule": "{\n  try {\n    if (!resend) {\n      console.warn(\"RESEND_API_KEY not configured, skipping email notif"
        },
        {
          "type": "email",
          "line": 158,
          "rule": "try {\n    if (!resend) {\n      console.warn(\"RESEND_API_KEY not configured, skipping email notificat"
        },
        {
          "type": "email",
          "line": 158,
          "rule": "{\n    if (!resend) {\n      console.warn(\"RESEND_API_KEY not configured, skipping email notification\""
        },
        {
          "type": "email",
          "line": 158,
          "rule": "if (!resend) {\n      console.warn(\"RESEND_API_KEY not configured, skipping email notification\")\n    "
        },
        {
          "type": "email",
          "line": 158,
          "rule": "{\n      console.warn(\"RESEND_API_KEY not configured, skipping email notification\")\n      return { su"
        },
        {
          "type": "email",
          "line": 158,
          "rule": "console.warn(\"RESEND_API_KEY not configured, skipping email notification\")"
        },
        {
          "type": "email",
          "line": 158,
          "rule": "console.warn(\"RESEND_API_KEY not configured, skipping email notification\")"
        },
        {
          "type": "email",
          "line": 159,
          "rule": "\"RESEND_API_KEY not configured, skipping email notification\""
        },
        {
          "type": "email",
          "line": 161,
          "rule": "let emailData: any = { type: data.type }"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "let emailData: any = { type: data.type }"
        },
        {
          "type": "email",
          "line": 163,
          "rule": "emailData: any = { type: data.type }"
        },
        {
          "type": "email",
          "line": 163,
          "rule": "emailData"
        },
        {
          "type": "email",
          "line": 163,
          "rule": "switch (data.type) {\n      case \"otp\":\n        emailData = {\n          type: \"otp\",\n          code: "
        },
        {
          "type": "email",
          "line": 164,
          "rule": "{\n      case \"otp\":\n        emailData = {\n          type: \"otp\",\n          code: data.code,\n        "
        },
        {
          "type": "email",
          "line": 164,
          "rule": "case \"otp\":\n        emailData = {\n          type: \"otp\",\n          code: data.code,\n          expire"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "emailData = {\n          type: \"otp\",\n          code: data.code,\n          expiresIn: data.expiresIn,"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "emailData = {\n          type: \"otp\",\n          code: data.code,\n          expiresIn: data.expiresIn,"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "emailData"
        },
        {
          "type": "email",
          "line": 167,
          "rule": "case \"welcome\":\n        emailData = {\n          type: \"welcome\",\n          userName: data.name,\n    "
        },
        {
          "type": "email",
          "line": 168,
          "rule": "emailData = {\n          type: \"welcome\",\n          userName: data.name,\n        }"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "emailData = {\n          type: \"welcome\",\n          userName: data.name,\n        }"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "emailData"
        },
        {
          "type": "email",
          "line": 170,
          "rule": "case \"password-reset\":\n        emailData = {\n          type: \"passwordReset\",\n          resetLink: d"
        },
        {
          "type": "email",
          "line": 170,
          "rule": "emailData = {\n          type: \"passwordReset\",\n          resetLink: data.resetUrl,\n          userNam"
        },
        {
          "type": "email",
          "line": 170,
          "rule": "emailData = {\n          type: \"passwordReset\",\n          resetLink: data.resetUrl,\n          userNam"
        },
        {
          "type": "email",
          "line": 170,
          "rule": "emailData"
        },
        {
          "type": "email",
          "line": 173,
          "rule": "case \"treatment-booking-success\":\n        emailData = {\n          type: \"treatment-booking-success\","
        },
        {
          "type": "email",
          "line": 174,
          "rule": "emailData = {\n          type: \"treatment-booking-success\",\n          recipientName: data.recipientNa"
        },
        {
          "type": "email",
          "line": 174,
          "rule": "emailData = {\n          type: \"treatment-booking-success\",\n          recipientName: data.recipientNa"
        },
        {
          "type": "email",
          "line": 174,
          "rule": "emailData"
        },
        {
          "type": "email",
          "line": 182,
          "rule": "const template = getEmailTemplate(emailData, language, recipientName)"
        },
        {
          "type": "email",
          "line": 182,
          "rule": "const template = getEmailTemplate(emailData, language, recipientName)"
        },
        {
          "type": "email",
          "line": 183,
          "rule": "template = getEmailTemplate(emailData, language, recipientName)"
        },
        {
          "type": "email",
          "line": 183,
          "rule": "getEmailTemplate(emailData, language, recipientName)"
        },
        {
          "type": "email",
          "line": 183,
          "rule": "emailData"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "const result = await resend!.emails.send({\n      from: FROM_EMAIL,\n      to: recipient,\n      subjec"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "const result = await resend!.emails.send({\n      from: FROM_EMAIL,\n      to: recipient,\n      subjec"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "result = await resend!.emails.send({\n      from: FROM_EMAIL,\n      to: recipient,\n      subject: tem"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "await resend!.emails.send({\n      from: FROM_EMAIL,\n      to: recipient,\n      subject: template.sub"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "resend!.emails.send({\n      from: FROM_EMAIL,\n      to: recipient,\n      subject: template.subject,\n"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "resend!.emails.send"
        },
        {
          "type": "email",
          "line": 184,
          "rule": "resend!.emails"
        },
        {
          "type": "email",
          "line": 185,
          "rule": "emails"
        },
        {
          "type": "email",
          "line": 190,
          "rule": "catch (error) {\n    console.error(\"Email notification failed:\", error)\n    return {\n      success: f"
        },
        {
          "type": "email",
          "line": 190,
          "rule": "{\n    console.error(\"Email notification failed:\", error)\n    return {\n      success: false,\n      er"
        },
        {
          "type": "email",
          "line": 191,
          "rule": "return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown email "
        },
        {
          "type": "email",
          "line": 191,
          "rule": "{\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown email error\","
        },
        {
          "type": "email",
          "line": 192,
          "rule": "error: error instanceof Error ? error.message : \"Unknown email error\""
        },
        {
          "type": "email",
          "line": 192,
          "rule": "error instanceof Error ? error.message : \"Unknown email error\""
        },
        {
          "type": "email",
          "line": 193,
          "rule": "\"Unknown email error\""
        },
        {
          "type": "email",
          "line": 212,
          "rule": "export async function sendNotification(\n  recipient: NotificationRecipient,\n  data: NotificationData"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "{\n  if (recipient.type === \"email\") {\n    return sendEmailNotification(recipient.value, data, recipi"
        },
        {
          "type": "email",
          "line": 215,
          "rule": "if (recipient.type === \"email\") {\n    return sendEmailNotification(recipient.value, data, recipient."
        },
        {
          "type": "email",
          "line": 215,
          "rule": "recipient.type === \"email\""
        },
        {
          "type": "email",
          "line": 216,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 218,
          "rule": "if (recipient.type === \"phone\") {\n    return sendSMSNotification(recipient.value, data, recipient.la"
        },
        {
          "type": "phone",
          "line": 218,
          "rule": "recipient.type === \"phone\""
        },
        {
          "type": "phone",
          "line": 219,
          "rule": "\"phone\""
        }
      ],
      "errorHandling": [
        {
          "line": 18,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 82,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 120,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 141,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 158,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 198,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\professional-sms-actions.ts",
      "lines": 313,
      "complexity": 29,
      "conditionals": [
        {
          "type": "if",
          "line": 24,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 26,
          "condition": "booking.status !== \"confirmed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 33,
          "condition": "!suitableResult.success || !suitableResult.professionals",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "!professional.userId?.phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "smsResult.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 109,
          "condition": "!response",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "response.status !== \"pending\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 114,
          "condition": "response.expiresAt < new Date()",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "!booking || booking.status !== \"in_process\" || booking.professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 123,
          "condition": "action === \"accept\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 131,
          "condition": "assignResult.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 148,
          "condition": "action === \"decline\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 163,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 199,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 207,
          "condition": "!booking || booking.status !== \"confirmed\" || booking.professionalId",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "sendProfessionalNotifications",
          "line": 8,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleProfessionalResponse",
          "line": 95,
          "parameters": [
            {
              "name": "responseId",
              "type": "string"
            },
            {
              "name": "action",
              "type": "\"accept\" | \"decline\""
            },
            {
              "name": "responseMethod",
              "type": "\"sms\" | \"app\" | \"phone\""
            }
          ],
          "isAsync": true
        },
        {
          "name": "getProfessionalResponses",
          "line": 157,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "expireOldResponses",
          "line": 176,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "resendProfessionalNotifications",
          "line": 193,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 7,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 7,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 7,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 7,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 7,
          "rule": "revalidatePath"
        },
        {
          "type": "phone",
          "line": 45,
          "rule": "for (const professional of professionals) {\r\n      try {\r\n        if (!professional.userId?.phone) {"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "{\r\n      try {\r\n        if (!professional.userId?.phone) {\r\n          console.log(`Professional ${pr"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "try {\r\n        if (!professional.userId?.phone) {\r\n          console.log(`Professional ${professiona"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "{\r\n        if (!professional.userId?.phone) {\r\n          console.log(`Professional ${professional.us"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "if (!professional.userId?.phone) {\r\n          console.log(`Professional ${professional.userId?.name}"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "!professional.userId?.phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "professional.userId?.phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "{\r\n          console.log(`Professional ${professional.userId?.name} has no phone number`)\r\n         "
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "console.log(`Professional ${professional.userId?.name} has no phone number`)"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "console.log(`Professional ${professional.userId?.name} has no phone number`)"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "`Professional ${professional.userId?.name} has no phone number`"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "professional.userId?.name} has no phone number`"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "} has no phone number`"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "const response = new ProfessionalResponse({\r\n          bookingId: new mongoose.Types.ObjectId(bookin"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "const response = new ProfessionalResponse({\r\n          bookingId: new mongoose.Types.ObjectId(bookin"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "response = new ProfessionalResponse({\r\n          bookingId: new mongoose.Types.ObjectId(bookingId),\r"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "new ProfessionalResponse({\r\n          bookingId: new mongoose.Types.ObjectId(bookingId),\r\n          "
        },
        {
          "type": "phone",
          "line": 53,
          "rule": "{\r\n          bookingId: new mongoose.Types.ObjectId(bookingId),\r\n          professionalId: professio"
        },
        {
          "type": "phone",
          "line": 55,
          "rule": "phoneNumber: professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 55,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "const smsResult = await smsService.sendNotification(\r\n          { \r\n            value: professional."
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "const smsResult = await smsService.sendNotification(\r\n          { \r\n            value: professional."
        },
        {
          "type": "phone",
          "line": 70,
          "rule": "smsResult = await smsService.sendNotification(\r\n          { \r\n            value: professional.userId"
        },
        {
          "type": "phone",
          "line": 71,
          "rule": "await smsService.sendNotification(\r\n          { \r\n            value: professional.userId.phone, \r\n  "
        },
        {
          "type": "phone",
          "line": 71,
          "rule": "smsService.sendNotification(\r\n          { \r\n            value: professional.userId.phone, \r\n        "
        },
        {
          "type": "phone",
          "line": 71,
          "rule": "{ \r\n            value: professional.userId.phone, \r\n            language: userLanguage as \"he\" | \"en"
        },
        {
          "type": "phone",
          "line": 72,
          "rule": "value: professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 72,
          "rule": "professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 72,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 79,
          "rule": "console.log(`✅ SMS sent to professional ${professional.userId.name} (${professional.userId.phone})`)"
        },
        {
          "type": "phone",
          "line": 79,
          "rule": "console.log(`✅ SMS sent to professional ${professional.userId.name} (${professional.userId.phone})`)"
        },
        {
          "type": "phone",
          "line": 79,
          "rule": "`✅ SMS sent to professional ${professional.userId.name} (${professional.userId.phone})`"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "professional.userId.phone})`"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 95,
          "rule": "export async function handleProfessionalResponse(\r\n  responseId: string,\r\n  action: \"accept\" | \"decl"
        },
        {
          "type": "phone",
          "line": 98,
          "rule": "responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\""
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "\"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 105,
          "rule": "const response = await ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', "
        },
        {
          "type": "phone",
          "line": 105,
          "rule": "const response = await ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', "
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "response = await ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', 'name "
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "await ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', 'name phone')\r\n  "
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', 'name phone')\r\n      .p"
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', 'name phone')\r\n      .p"
        },
        {
          "type": "phone",
          "line": 106,
          "rule": "ProfessionalResponse.findById(responseId)\r\n      .populate('professionalId', 'name phone')"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "'name phone'"
        },
        {
          "type": "general",
          "line": 138,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 138,
          "rule": "revalidatePath(\"/dashboard/admin/bookings\")"
        },
        {
          "type": "general",
          "line": 138,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 139,
          "rule": "revalidatePath(\"/dashboard/professional/booking-management\")"
        },
        {
          "type": "general",
          "line": 139,
          "rule": "revalidatePath(\"/dashboard/professional/booking-management\")"
        },
        {
          "type": "general",
          "line": 139,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "const responses = await ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bo"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "const responses = await ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bo"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "responses = await ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingI"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "await ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingId)\r\n    })\r\n"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingId)\r\n    })\r\n    .p"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingId)\r\n    })\r\n    .p"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingId)\r\n    })\r\n    .p"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingId)\r\n    })\r\n    .p"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "ProfessionalResponse.find({\r\n      bookingId: new mongoose.Types.ObjectId(bookingId)\r\n    })\r\n    .p"
        },
        {
          "type": "email",
          "line": 171,
          "rule": "'name phone email'"
        }
      ],
      "errorHandling": [
        {
          "line": 12,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 47,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 101,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 161,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 180,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 198,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\db\\models\\address.ts",
      "lines": 184,
      "complexity": 29,
      "conditionals": [
        {
          "type": "if",
          "line": 55,
          "condition": "data.street",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "data.streetNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 57,
          "condition": "data.addressType === \"apartment\" && data.apartmentDetails?.apartmentNumber",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 60,
          "condition": "data.apartmentDetails.floor !== undefined && data.apartmentDetails.floor !== null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "data.apartmentDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 66,
          "condition": "(data.addressType === \"house\" || data.addressType === \"private\") && data.houseDetails?.doorName",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 68,
          "condition": "data.houseDetails.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "data.addressType === \"office\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 71,
          "condition": "data.officeDetails?.buildingName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "data.officeDetails?.floor !== undefined && data.officeDetails.floor !== null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "data.officeDetails?.entrance",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "data.addressType === \"hotel\" && data.hotelDetails?.hotelName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 80,
          "condition": "data.hotelDetails.roomNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 82,
          "condition": "data.city",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "this.isModified(\"street\") ||\n    this.isModified(\"streetNumber\") ||\n    this.isModified(\"city\") ||\n    this.isModified(\"addressType\") ||\n    this.isModified(\"apartmentDetails\") ||\n    this.isModified(",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "constructFullAddress",
          "line": 51,
          "parameters": [
            {
              "name": "data",
              "type": "Partial<IAddress>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 20,
          "rule": "const AddressSchema: Schema = new Schema(\n  {\n    userId: {\n      type: Schema.Types.ObjectId,\n     "
        },
        {
          "type": "required",
          "line": 20,
          "rule": "const AddressSchema: Schema = new Schema(\n  {\n    userId: {\n      type: Schema.Types.ObjectId,\n     "
        },
        {
          "type": "required",
          "line": 20,
          "rule": "AddressSchema: Schema = new Schema(\n  {\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: "
        },
        {
          "type": "required",
          "line": 21,
          "rule": "new Schema(\n  {\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: "
        },
        {
          "type": "required",
          "line": 21,
          "rule": "{\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n "
        },
        {
          "type": "required",
          "line": 21,
          "rule": "userId: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "{\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "country: {\n      type: String,\n      default: \"ישראל\",\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "{\n      type: String,\n      default: \"ישראל\",\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "city: {\n      type: String,\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "{\n      type: String,\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "street: {\n      type: String,\n      required: true,\n      trim: true,\n    }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{\n      type: String,\n      required: true,\n      trim: true,\n    }"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "streetNumber: {\n      type: String,\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{\n      type: String,\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "fullAddress: {\n      // Added fullAddress field definition\n      type: String,\n      required: true,"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "{\n      // Added fullAddress field definition\n      type: String,\n      required: true,\n      trim: "
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "addressType: {\n      type: String,\n      enum: [\"apartment\", \"house\", \"private\", \"office\", \"hotel\", "
        },
        {
          "type": "required",
          "line": 32,
          "rule": "{\n      type: String,\n      enum: [\"apartment\", \"house\", \"private\", \"office\", \"hotel\", \"other\"],\n   "
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\sidebar.tsx",
      "lines": 764,
      "complexity": 28,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "!context",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 47,
          "condition": "setOpenProp",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 62,
          "condition": "event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "collapsible === \"none\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 111,
          "condition": "isMobile",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 361,
          "condition": "!tooltip",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 363,
          "condition": "typeof tooltip === \"string\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useSidebar",
          "line": 26,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "value",
              "type": "boolean | ((value: boolean) => boolean)"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleKeyDown",
          "line": 61,
          "parameters": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 99,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 168,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 174,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 181,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 206,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 219,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 228,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 235,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 242,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 249,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 266,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 281,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 299,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 305,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 311,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 351,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 375,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 401,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 418,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 421,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 437,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 446,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 452,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\gift-vouchers\\gift-vouchers-client.tsx",
      "lines": 370,
      "complexity": 28,
      "conditionals": [
        {
          "type": "if",
          "line": 78,
          "condition": "result.success && result.giftVouchers && result.pagination",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 111,
          "condition": "!voucherToDeleteId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 114,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 249,
          "condition": "!open",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GiftVouchersClient",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "GiftVouchersClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "newSearch",
              "type": "any"
            },
            {
              "name": "newFilters",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 94,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleOpenFormModal",
          "line": 99,
          "parameters": [
            {
              "name": "voucher",
              "type": "GiftVoucherPlain"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleViewDetails",
          "line": 102,
          "parameters": [
            {
              "name": "voucher",
              "type": "GiftVoucherPlain"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFormSuccess",
          "line": 105,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleOpenDeleteDialog",
          "line": 108,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDeleteConfirm",
          "line": 111,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleCloseDetails",
          "line": 126,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "resetFilters",
          "line": 128,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 136,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 146,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 150,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 157,
          "parameters": [
            {
              "name": "type",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 163,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 169,
          "parameters": [
            {
              "name": "status",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 217,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 236,
          "parameters": [
            {
              "name": "voucher",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 238,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 240,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 246,
          "parameters": [
            {
              "name": "newPage",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 249,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 264,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 66,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 112,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "lines": 279,
      "complexity": 28,
      "conditionals": [
        {
          "type": "if",
          "line": 72,
          "condition": "!batchToDelete",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 93,
          "condition": "editingBatch",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 97,
          "condition": "result.success && result.batch",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 105,
          "condition": "editingBatch",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 177,
          "condition": "!open",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PartnerCouponBatchesClient",
          "line": 31,
          "parameters": [
            {
              "name": "unknown",
              "type": "PartnerCouponBatchesClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCreateNew",
          "line": 60,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleEdit",
          "line": 61,
          "parameters": [
            {
              "name": "batch",
              "type": "IPartnerCouponBatch & { effectiveStatus: string; activeCouponsCount: number }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleViewCoupons",
          "line": 65,
          "parameters": [
            {
              "name": "batch",
              "type": "IPartnerCouponBatch & { effectiveStatus: string; activeCouponsCount: number }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDeleteRequest",
          "line": 69,
          "parameters": [
            {
              "name": "batchId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "confirmDelete",
          "line": 71,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 79,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFormSubmit",
          "line": 91,
          "parameters": [
            {
              "name": "values",
              "type": "PartnerCouponBatchFormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 106,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 107,
          "parameters": [
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 113,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 118,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 131,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 135,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 136,
          "parameters": [
            {
              "name": "batch",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 137,
          "parameters": [
            {
              "name": "batchId",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 139,
          "parameters": [
            {
              "name": "batch",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 142,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 157,
          "parameters": [
            {
              "name": "batch",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 177,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 194,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 73,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 92,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\steps\\booking-source-step.tsx",
      "lines": 198,
      "complexity": 28,
      "conditionals": [
        {
          "type": "if",
          "line": 49,
          "condition": "!hasSubscriptions && !hasVouchers && !form.getValues(\"source\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 64,
          "condition": "treatmentFromSub",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "treatmentFromSub.pricingType === \"duration_based\" && sub.selectedDurationId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "duration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "sub.expiryDate",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "BookingSourceStep",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "BookingSourceStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "values",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "onSubmitValidated",
          "line": 54,
          "parameters": [
            {
              "name": "data",
              "type": "BookingSourceFormValues"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getSubscriptionDisplayDetails",
          "line": 58,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 68,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 84,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 12,
          "rule": "import { BookingSourceSchema, type BookingSourceFormValues } from \"@/lib/validation/booking-schemas\""
        },
        {
          "type": "general",
          "line": 13,
          "rule": "\"@/lib/validation/booking-schemas\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\sidebar.tsx",
      "lines": 764,
      "complexity": 28,
      "conditionals": [
        {
          "type": "if",
          "line": 26,
          "condition": "!context",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "setOpenProp",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 61,
          "condition": "event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 103,
          "condition": "collapsible === \"none\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "isMobile",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 361,
          "condition": "!tooltip",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 362,
          "condition": "typeof tooltip === \"string\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useSidebar",
          "line": 25,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [
            {
              "name": "value",
              "type": "boolean | ((value: boolean) => boolean)"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleKeyDown",
          "line": 60,
          "parameters": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 168,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 173,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 180,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 205,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 218,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 227,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 234,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 241,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 249,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 257,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 265,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 280,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 298,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 304,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 310,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 350,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 374,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 400,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 417,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 420,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 436,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 445,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 451,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\auth\\login\\login-form.tsx",
      "lines": 363,
      "complexity": 27,
      "conditionals": [
        {
          "type": "if",
          "line": 38,
          "condition": "emailInputRef.current",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 47,
          "condition": "!identifier || !password",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 58,
          "condition": "result?.error",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 60,
          "condition": "result.error === \"No user found\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 62,
          "condition": "result.error === \"Invalid password\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 74,
          "condition": "result?.ok",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 100,
          "condition": "loginType === \"email\"",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "LoginMethod",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "LoginMethodProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "LoginForm",
          "line": 25,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentPropsWithoutRef<\"div\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 38,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePasswordSubmit",
          "line": 41,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleEmailChange",
          "line": 93,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePhoneChange",
          "line": 97,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleOtpIdentifierChange",
          "line": 99,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 133,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 146,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 221,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 233,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 14,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "email",
          "line": 25,
          "rule": "export function LoginForm({ className, ...props }: React.ComponentPropsWithoutRef<\"div\">) {\r\n  const"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "{\r\n  const [loginType, setLoginType] = useState<\"email\" | \"phone\">(\"email\")\r\n  const { t, dir } = us"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "const [loginType, setLoginType] = useState<\"email\" | \"phone\">(\"email\")"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "const [loginType, setLoginType] = useState<\"email\" | \"phone\">(\"email\")"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "[loginType, setLoginType] = useState<\"email\" | \"phone\">(\"email\")"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "useState<\"email\" | \"phone\">(\"email\")"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 31,
          "rule": "const [emailIdentifier, setEmailIdentifier] = useState(\"\")"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "const [emailIdentifier, setEmailIdentifier] = useState(\"\")"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "[emailIdentifier, setEmailIdentifier] = useState(\"\")"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "[emailIdentifier, setEmailIdentifier]"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "emailIdentifier"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "emailIdentifier"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "const [phoneIdentifier, setPhoneIdentifier] = useState(\"\")"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "const [phoneIdentifier, setPhoneIdentifier] = useState(\"\")"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "[phoneIdentifier, setPhoneIdentifier] = useState(\"\")"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "[phoneIdentifier, setPhoneIdentifier]"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "phoneIdentifier"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "phoneIdentifier"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "const emailInputRef = useRef<HTMLInputElement>(null)"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "const emailInputRef = useRef<HTMLInputElement>(null)"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "emailInputRef = useRef<HTMLInputElement>(null)"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "emailInputRef"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "useEffect(() => {\r\n    if (emailInputRef.current) {\r\n      emailInputRef.current.focus()\r\n    }\r\n  }"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "useEffect(() => {\r\n    if (emailInputRef.current) {\r\n      emailInputRef.current.focus()\r\n    }\r\n  }"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "() => {\r\n    if (emailInputRef.current) {\r\n      emailInputRef.current.focus()\r\n    }\r\n  }"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "{\r\n    if (emailInputRef.current) {\r\n      emailInputRef.current.focus()\r\n    }\r\n  }"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "if (emailInputRef.current) {\r\n      emailInputRef.current.focus()\r\n    }"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef.current"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "{\r\n      emailInputRef.current.focus()\r\n    }"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef.current.focus()"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef.current.focus()"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef.current.focus"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef.current"
        },
        {
          "type": "email",
          "line": 38,
          "rule": "emailInputRef"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "const result = await signIn(\"credentials\", {\r\n        redirect: false,\r\n        email: identifier, /"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "const result = await signIn(\"credentials\", {\r\n        redirect: false,\r\n        email: identifier, /"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "result = await signIn(\"credentials\", {\r\n        redirect: false,\r\n        email: identifier, // This"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "await signIn(\"credentials\", {\r\n        redirect: false,\r\n        email: identifier, // This will be "
        },
        {
          "type": "email",
          "line": 55,
          "rule": "signIn(\"credentials\", {\r\n        redirect: false,\r\n        email: identifier, // This will be either"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "{\r\n        redirect: false,\r\n        email: identifier, // This will be either email or phone\r\n     "
        },
        {
          "type": "email",
          "line": 56,
          "rule": "email: identifier"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 98,
          "rule": "const handleOtpIdentifierChange = (value: string) => {\r\n    if (loginType === \"email\") {\r\n      setE"
        },
        {
          "type": "email",
          "line": 98,
          "rule": "const handleOtpIdentifierChange = (value: string) => {\r\n    if (loginType === \"email\") {\r\n      setE"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "handleOtpIdentifierChange = (value: string) => {\r\n    if (loginType === \"email\") {\r\n      setEmailId"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "(value: string) => {\r\n    if (loginType === \"email\") {\r\n      setEmailIdentifier(value)\r\n    } else "
        },
        {
          "type": "email",
          "line": 100,
          "rule": "{\r\n    if (loginType === \"email\") {\r\n      setEmailIdentifier(value)\r\n    } else {\r\n      setPhoneId"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "if (loginType === \"email\") {\r\n      setEmailIdentifier(value)\r\n    } else {\r\n      setPhoneIdentifie"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 100,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 122,
          "rule": "<div className=\"grid gap-6\">\r\n                  <div className=\"flex gap-4\">\r\n                    <B"
        },
        {
          "type": "email",
          "line": 123,
          "rule": "<div className=\"flex gap-4\">\r\n                    <Button\r\n                      type=\"button\"\r\n    "
        },
        {
          "type": "email",
          "line": 124,
          "rule": "<Button\r\n                      type=\"button\"\r\n                      variant={loginType === \"email\" ?"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "<Button\r\n                      type=\"button\"\r\n                      variant={loginType === \"email\" ?"
        },
        {
          "type": "email",
          "line": 124,
          "rule": "type=\"button\"\r\n                      variant={loginType === \"email\" ? \"default\" : \"outline\"}\r\n      "
        },
        {
          "type": "email",
          "line": 125,
          "rule": "variant={loginType === \"email\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "email",
          "line": 126,
          "rule": "{loginType === \"email\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "email",
          "line": 126,
          "rule": "loginType === \"email\" ? \"default\" : \"outline\""
        },
        {
          "type": "email",
          "line": 126,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 126,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 126,
          "rule": "className={cn(\r\n                        \"flex-1\",\r\n                        loginType === \"email\"\r\n  "
        },
        {
          "type": "email",
          "line": 127,
          "rule": "{cn(\r\n                        \"flex-1\",\r\n                        loginType === \"email\"\r\n            "
        },
        {
          "type": "email",
          "line": 127,
          "rule": "cn(\r\n                        \"flex-1\",\r\n                        loginType === \"email\"\r\n             "
        },
        {
          "type": "email",
          "line": 128,
          "rule": "loginType === \"email\"\r\n                          ? \"bg-turquoise-500 hover:bg-turquoise-600\"\r\n      "
        },
        {
          "type": "email",
          "line": 128,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 129,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 132,
          "rule": "onClick={() => setLoginType(\"email\")}"
        },
        {
          "type": "email",
          "line": 133,
          "rule": "{() => setLoginType(\"email\")}"
        },
        {
          "type": "email",
          "line": 133,
          "rule": "() => setLoginType(\"email\")"
        },
        {
          "type": "email",
          "line": 133,
          "rule": "setLoginType(\"email\")"
        },
        {
          "type": "email",
          "line": 133,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 136,
          "rule": "{t(\"login.email\")}"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "t(\"login.email\")"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "\"login.email\""
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "<Button\r\n                      type=\"button\"\r\n                      variant={loginType === \"phone\" ?"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "<Button\r\n                      type=\"button\"\r\n                      variant={loginType === \"phone\" ?"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "type=\"button\"\r\n                      variant={loginType === \"phone\" ? \"default\" : \"outline\"}\r\n      "
        },
        {
          "type": "phone",
          "line": 138,
          "rule": "variant={loginType === \"phone\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "{loginType === \"phone\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "loginType === \"phone\" ? \"default\" : \"outline\""
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "loginType === \"phone\""
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 140,
          "rule": "className={cn(\r\n                        \"flex-1\",\r\n                        loginType === \"phone\"\r\n  "
        },
        {
          "type": "phone",
          "line": 140,
          "rule": "{cn(\r\n                        \"flex-1\",\r\n                        loginType === \"phone\"\r\n            "
        },
        {
          "type": "phone",
          "line": 140,
          "rule": "cn(\r\n                        \"flex-1\",\r\n                        loginType === \"phone\"\r\n             "
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "loginType === \"phone\"\r\n                          ? \"bg-turquoise-500 hover:bg-turquoise-600\"\r\n      "
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "loginType === \"phone\""
        },
        {
          "type": "phone",
          "line": 142,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 146,
          "rule": "onClick={() => setLoginType(\"phone\")}"
        },
        {
          "type": "phone",
          "line": 146,
          "rule": "{() => setLoginType(\"phone\")}"
        },
        {
          "type": "phone",
          "line": 146,
          "rule": "() => setLoginType(\"phone\")"
        },
        {
          "type": "phone",
          "line": 146,
          "rule": "setLoginType(\"phone\")"
        },
        {
          "type": "phone",
          "line": 147,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 149,
          "rule": "{t(\"login.phone\")}"
        },
        {
          "type": "phone",
          "line": 149,
          "rule": "t(\"login.phone\")"
        },
        {
          "type": "phone",
          "line": 149,
          "rule": "\"login.phone\""
        },
        {
          "type": "phone",
          "line": 151,
          "rule": "<div className=\"grid gap-6\">\r\n                    <div className=\"grid gap-2\">\r\n                    "
        },
        {
          "type": "phone",
          "line": 152,
          "rule": "<div className=\"grid gap-2\">\r\n                      {loginType === \"phone\" ? (\r\n                    "
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "{loginType === \"phone\" ? (\r\n                        <PhoneInput\r\n                          name=\"ide"
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "loginType === \"phone\" ? (\r\n                        <PhoneInput\r\n                          name=\"iden"
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "loginType === \"phone\""
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "(\r\n                        <PhoneInput\r\n                          name=\"identifier\"\r\n               "
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "<PhoneInput\r\n                          name=\"identifier\"\r\n                          placeholder={t(\""
        },
        {
          "type": "phone",
          "line": 154,
          "rule": "name=\"identifier\"\r\n                          placeholder={t(\"login.phonePlaceholder\")}\r\n            "
        },
        {
          "type": "phone",
          "line": 155,
          "rule": "placeholder={t(\"login.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "{t(\"login.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "t(\"login.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 156,
          "rule": "\"login.phonePlaceholder\""
        },
        {
          "type": "required",
          "line": 158,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 158,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "(\r\n                        <Input\r\n                          name=\"identifier\"\r\n                    "
        },
        {
          "type": "email",
          "line": 161,
          "rule": "<Input\r\n                          name=\"identifier\"\r\n                          type=\"email\"\r\n       "
        },
        {
          "type": "email",
          "line": 162,
          "rule": "name=\"identifier\"\r\n                          type=\"email\"\r\n                          placeholder={t("
        },
        {
          "type": "email",
          "line": 163,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 163,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 164,
          "rule": "placeholder={t(\"login.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "{t(\"login.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "t(\"login.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 164,
          "rule": "\"login.emailPlaceholder\""
        },
        {
          "type": "required",
          "line": 168,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 168,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 168,
          "rule": "value={emailIdentifier}"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "{emailIdentifier}"
        },
        {
          "type": "email",
          "line": 169,
          "rule": "emailIdentifier"
        },
        {
          "type": "email",
          "line": 170,
          "rule": "ref={emailInputRef}"
        },
        {
          "type": "email",
          "line": 171,
          "rule": "{emailInputRef}"
        },
        {
          "type": "email",
          "line": 171,
          "rule": "emailInputRef"
        },
        {
          "type": "required",
          "line": 191,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 191,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 210,
          "rule": "<div className=\"grid gap-6\">\r\n                <div className=\"flex gap-4\">\r\n                  <Butto"
        },
        {
          "type": "email",
          "line": 211,
          "rule": "<div className=\"flex gap-4\">\r\n                  <Button\r\n                    type=\"button\"\r\n        "
        },
        {
          "type": "email",
          "line": 212,
          "rule": "<Button\r\n                    type=\"button\"\r\n                    variant={loginType === \"email\" ? \"de"
        },
        {
          "type": "email",
          "line": 212,
          "rule": "<Button\r\n                    type=\"button\"\r\n                    variant={loginType === \"email\" ? \"de"
        },
        {
          "type": "email",
          "line": 212,
          "rule": "type=\"button\"\r\n                    variant={loginType === \"email\" ? \"default\" : \"outline\"}\r\n        "
        },
        {
          "type": "email",
          "line": 213,
          "rule": "variant={loginType === \"email\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "email",
          "line": 213,
          "rule": "{loginType === \"email\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "email",
          "line": 213,
          "rule": "loginType === \"email\" ? \"default\" : \"outline\""
        },
        {
          "type": "email",
          "line": 213,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 214,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 214,
          "rule": "className={cn(\r\n                      \"flex-1\",\r\n                      loginType === \"email\"\r\n      "
        },
        {
          "type": "email",
          "line": 215,
          "rule": "{cn(\r\n                      \"flex-1\",\r\n                      loginType === \"email\"\r\n                "
        },
        {
          "type": "email",
          "line": 215,
          "rule": "cn(\r\n                      \"flex-1\",\r\n                      loginType === \"email\"\r\n                 "
        },
        {
          "type": "email",
          "line": 216,
          "rule": "loginType === \"email\"\r\n                        ? \"bg-turquoise-500 hover:bg-turquoise-600\"\r\n        "
        },
        {
          "type": "email",
          "line": 216,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 216,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 220,
          "rule": "onClick={() => setLoginType(\"email\")}"
        },
        {
          "type": "email",
          "line": 221,
          "rule": "{() => setLoginType(\"email\")}"
        },
        {
          "type": "email",
          "line": 221,
          "rule": "() => setLoginType(\"email\")"
        },
        {
          "type": "email",
          "line": 221,
          "rule": "setLoginType(\"email\")"
        },
        {
          "type": "email",
          "line": 221,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 223,
          "rule": "{t(\"login.email\")}"
        },
        {
          "type": "email",
          "line": 223,
          "rule": "t(\"login.email\")"
        },
        {
          "type": "email",
          "line": 223,
          "rule": "\"login.email\""
        },
        {
          "type": "phone",
          "line": 225,
          "rule": "<Button\r\n                    type=\"button\"\r\n                    variant={loginType === \"phone\" ? \"de"
        },
        {
          "type": "phone",
          "line": 225,
          "rule": "<Button\r\n                    type=\"button\"\r\n                    variant={loginType === \"phone\" ? \"de"
        },
        {
          "type": "phone",
          "line": 225,
          "rule": "type=\"button\"\r\n                    variant={loginType === \"phone\" ? \"default\" : \"outline\"}\r\n        "
        },
        {
          "type": "phone",
          "line": 225,
          "rule": "variant={loginType === \"phone\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "{loginType === \"phone\" ? \"default\" : \"outline\"}"
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "loginType === \"phone\" ? \"default\" : \"outline\""
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "loginType === \"phone\""
        },
        {
          "type": "phone",
          "line": 226,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 227,
          "rule": "className={cn(\r\n                      \"flex-1\",\r\n                      loginType === \"phone\"\r\n      "
        },
        {
          "type": "phone",
          "line": 228,
          "rule": "{cn(\r\n                      \"flex-1\",\r\n                      loginType === \"phone\"\r\n                "
        },
        {
          "type": "phone",
          "line": 228,
          "rule": "cn(\r\n                      \"flex-1\",\r\n                      loginType === \"phone\"\r\n                 "
        },
        {
          "type": "phone",
          "line": 228,
          "rule": "loginType === \"phone\"\r\n                        ? \"bg-turquoise-500 hover:bg-turquoise-600\"\r\n        "
        },
        {
          "type": "phone",
          "line": 228,
          "rule": "loginType === \"phone\""
        },
        {
          "type": "phone",
          "line": 229,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "onClick={() => setLoginType(\"phone\")}"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "{() => setLoginType(\"phone\")}"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "() => setLoginType(\"phone\")"
        },
        {
          "type": "phone",
          "line": 233,
          "rule": "setLoginType(\"phone\")"
        },
        {
          "type": "phone",
          "line": 234,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "{t(\"login.phone\")}"
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "t(\"login.phone\")"
        },
        {
          "type": "phone",
          "line": 236,
          "rule": "\"login.phone\""
        },
        {
          "type": "phone",
          "line": 238,
          "rule": "<div className=\"grid gap-6\">\r\n                  <div className=\"grid gap-2\">\r\n                    {l"
        },
        {
          "type": "phone",
          "line": 239,
          "rule": "<div className=\"grid gap-2\">\r\n                    {loginType === \"phone\" ? (\r\n                      "
        },
        {
          "type": "phone",
          "line": 240,
          "rule": "{loginType === \"phone\" ? (\r\n                      <PhoneInput\r\n                        id=\"otp-ident"
        },
        {
          "type": "phone",
          "line": 240,
          "rule": "loginType === \"phone\" ? (\r\n                      <PhoneInput\r\n                        id=\"otp-identi"
        },
        {
          "type": "phone",
          "line": 240,
          "rule": "loginType === \"phone\""
        },
        {
          "type": "phone",
          "line": 240,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 240,
          "rule": "(\r\n                      <PhoneInput\r\n                        id=\"otp-identifier\"\r\n                 "
        },
        {
          "type": "phone",
          "line": 240,
          "rule": "<PhoneInput\r\n                        id=\"otp-identifier\"\r\n                        name=\"phone\"\r\n    "
        },
        {
          "type": "phone",
          "line": 241,
          "rule": "id=\"otp-identifier\"\r\n                        name=\"phone\"\r\n                        placeholder={t(\"l"
        },
        {
          "type": "phone",
          "line": 242,
          "rule": "name=\"phone\""
        },
        {
          "type": "phone",
          "line": 242,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 242,
          "rule": "placeholder={t(\"login.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 243,
          "rule": "{t(\"login.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 243,
          "rule": "t(\"login.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 243,
          "rule": "\"login.phonePlaceholder\""
        },
        {
          "type": "required",
          "line": 246,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 246,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 248,
          "rule": "(\r\n                      <Input\r\n                        id=\"otp-identifier\"\r\n                      "
        },
        {
          "type": "email",
          "line": 248,
          "rule": "<Input\r\n                        id=\"otp-identifier\"\r\n                        type=\"email\"\r\n         "
        },
        {
          "type": "email",
          "line": 249,
          "rule": "id=\"otp-identifier\"\r\n                        type=\"email\"\r\n                        placeholder={t(\"l"
        },
        {
          "type": "email",
          "line": 250,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 251,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 251,
          "rule": "placeholder={t(\"login.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 251,
          "rule": "{t(\"login.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 252,
          "rule": "t(\"login.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 252,
          "rule": "\"login.emailPlaceholder\""
        },
        {
          "type": "required",
          "line": 255,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 255,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 255,
          "rule": "value={emailIdentifier}"
        },
        {
          "type": "email",
          "line": 256,
          "rule": "{emailIdentifier}"
        },
        {
          "type": "email",
          "line": 256,
          "rule": "emailIdentifier"
        },
        {
          "type": "email",
          "line": 259,
          "rule": "<OTPForm\r\n                    loginType={loginType}\r\n                    identifier={loginType === \""
        },
        {
          "type": "email",
          "line": 259,
          "rule": "loginType={loginType}\r\n                    identifier={loginType === \"email\" ? emailIdentifier : pho"
        },
        {
          "type": "email",
          "line": 260,
          "rule": "identifier={loginType === \"email\" ? emailIdentifier : phoneIdentifier}"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "{loginType === \"email\" ? emailIdentifier : phoneIdentifier}"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "loginType === \"email\" ? emailIdentifier : phoneIdentifier"
        },
        {
          "type": "email",
          "line": 261,
          "rule": "loginType === \"email\""
        },
        {
          "type": "email",
          "line": 261,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 261,
          "rule": "emailIdentifier"
        },
        {
          "type": "phone",
          "line": 262,
          "rule": "phoneIdentifier"
        }
      ],
      "errorHandling": [
        {
          "line": 50,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\auth\\forgot-password\\forgot-password-form.tsx",
      "lines": 150,
      "complexity": 26,
      "conditionals": [
        {
          "type": "if",
          "line": 25,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 30,
          "condition": "success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ForgotPasswordForm",
          "line": 14,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentPropsWithoutRef<\"div\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 21,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 106,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 20,
          "rule": "const [email, setEmail] = useState(\"\")"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "const [email, setEmail] = useState(\"\")"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "[email, setEmail] = useState(\"\")"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "[email, setEmail]"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    setIsLo"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n  "
        },
        {
          "type": "email",
          "line": 22,
          "rule": "{\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError(\"\")\r\n\r\n    try {\r\n      const result"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "try {\r\n      const result = await sendPasswordResetEmail(email, language)\r\n\r\n      if (result.succes"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "{\r\n      const result = await sendPasswordResetEmail(email, language)\r\n\r\n      if (result.success) {"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "const result = await sendPasswordResetEmail(email, language)"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "const result = await sendPasswordResetEmail(email, language)"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "result = await sendPasswordResetEmail(email, language)"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "await sendPasswordResetEmail(email, language)"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "sendPasswordResetEmail(email, language)"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "language === \"ru\"\r\n                  ? \"Если учетная запись с этим адресом электронной почты существ"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "\"If an account with this email exists, you will receive a password reset link\""
        },
        {
          "type": "email",
          "line": 57,
          "rule": "language === \"ru\"\r\n                    ? \"Проверьте свою электронную почту и нажмите на ссылку для с"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "\"Check your email and click the password reset link\""
        },
        {
          "type": "email",
          "line": 84,
          "rule": "language === \"ru\"\r\n                ? \"Введите свой адрес электронной почты, и мы отправим вам ссылку"
        },
        {
          "type": "email",
          "line": 87,
          "rule": "\"Enter your email address and we'll send you a password reset link\""
        },
        {
          "type": "email",
          "line": 89,
          "rule": "<CardContent>\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            <div clas"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "<form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            <div className=\"space-y-2\">\r\n     "
        },
        {
          "type": "email",
          "line": 91,
          "rule": "<div className=\"space-y-2\">\r\n              <Label htmlFor=\"email\">\r\n                {language === \"h"
        },
        {
          "type": "email",
          "line": 92,
          "rule": "<Label htmlFor=\"email\">\r\n                {language === \"he\" ? \"כתובת אימייל\" : language === \"ru\" ? \""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "<Label htmlFor=\"email\">"
        },
        {
          "type": "email",
          "line": 92,
          "rule": "htmlFor=\"email\""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "htmlFor=\"email\""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 96,
          "rule": "<Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                placeholder={\r\n   "
        },
        {
          "type": "email",
          "line": 96,
          "rule": "id=\"email\"\r\n                type=\"email\"\r\n                placeholder={\r\n                  language "
        },
        {
          "type": "email",
          "line": 96,
          "rule": "id=\"email\""
        },
        {
          "type": "email",
          "line": 96,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 96,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 97,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 100,
          "rule": "language === \"ru\"\r\n                      ? \"Введите вашу электронную почту\"\r\n                      :"
        },
        {
          "type": "email",
          "line": 102,
          "rule": "\"Enter your email\""
        },
        {
          "type": "email",
          "line": 105,
          "rule": "value={email}"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "{email}"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "required"
        }
      ],
      "errorHandling": [
        {
          "line": 24,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "lines": 266,
      "complexity": 26,
      "conditionals": [
        {
          "type": "if",
          "line": 58,
          "condition": "!couponToDelete",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 78,
          "condition": "editingCoupon",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 82,
          "condition": "result.success && result.data",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 88,
          "condition": "editingCoupon",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 169,
          "condition": "!open",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "CouponsClient",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "CouponsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCreateNew",
          "line": 51,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleEdit",
          "line": 52,
          "parameters": [
            {
              "name": "coupon",
              "type": "ICoupon & { effectiveStatus: string }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDeleteRequest",
          "line": 55,
          "parameters": [
            {
              "name": "couponId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "confirmDelete",
          "line": 58,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFormSubmit",
          "line": 76,
          "parameters": [
            {
              "name": "values",
              "type": "CouponFormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 90,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 96,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 117,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [
            {
              "name": "couponId",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 127,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 141,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 169,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 185,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 59,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 77,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\gift-vouchers\\member-gift-voucher-details-modal.tsx",
      "lines": 318,
      "complexity": 26,
      "conditionals": [
        {
          "type": "if",
          "line": 24,
          "condition": "!voucher",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 26,
          "cases": 8,
          "expression": "status"
        }
      ],
      "functions": [
        {
          "name": "MemberGiftVoucherDetailsModal",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "MemberGiftVoucherDetailsModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusColor",
          "line": 25,
          "parameters": [
            {
              "name": "status",
              "type": "GiftVoucherPlain[\"status\"]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DetailItem",
          "line": 38,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n    icon: React.ElementType\r\n    label: string\r\n    value?: string | number | null\r\n    highlight?: boolean\r\n  }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 219,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\payment-methods\\payment-method-form.tsx",
      "lines": 312,
      "complexity": 26,
      "conditionals": [
        {
          "type": "if",
          "line": 51,
          "condition": "paymentMethod && isEditing",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 61,
          "condition": "!isEditing",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "result.success && result.paymentMethod",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 78,
          "condition": "onPaymentMethodUpserted",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PaymentMethodForm",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaymentMethodFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "onSubmit",
          "line": 68,
          "parameters": [
            {
              "name": "data",
              "type": "PaymentMethodFormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "formatCardNumber",
          "line": 90,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCardNumberChange",
          "line": 93,
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 102,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 114,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 131,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 143,
          "parameters": [
            {
              "name": "month",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 153,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 165,
          "parameters": [
            {
              "name": "year",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 182,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 191,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 204,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 216,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 228,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 66,
          "rule": "const onSubmit = async (data: PaymentMethodFormValues) => {\r\n    setIsLoading(true)\r\n    try {\r\n    "
        },
        {
          "type": "general",
          "line": 66,
          "rule": "const onSubmit = async (data: PaymentMethodFormValues) => {\r\n    setIsLoading(true)\r\n    try {\r\n    "
        },
        {
          "type": "general",
          "line": 68,
          "rule": "onSubmit = async (data: PaymentMethodFormValues) => {\r\n    setIsLoading(true)\r\n    try {\r\n      cons"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "async (data: PaymentMethodFormValues) => {\r\n    setIsLoading(true)\r\n    try {\r\n      const formData:"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "{\r\n    setIsLoading(true)\r\n    try {\r\n      const formData: PaymentMethodFormData = {\r\n        ...da"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "try {\r\n      const formData: PaymentMethodFormData = {\r\n        ...data, // Spread all validated for"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "{\r\n      const formData: PaymentMethodFormData = {\r\n        ...data, // Spread all validated form da"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "const formData: PaymentMethodFormData = {\r\n        ...data, // Spread all validated form data\r\n     "
        },
        {
          "type": "general",
          "line": 69,
          "rule": "const formData: PaymentMethodFormData = {\r\n        ...data, // Spread all validated form data\r\n     "
        },
        {
          "type": "general",
          "line": 70,
          "rule": "formData: PaymentMethodFormData = {\r\n        ...data, // Spread all validated form data\r\n      }"
        },
        {
          "type": "general",
          "line": 70,
          "rule": "{\r\n        ...data, // Spread all validated form data\r\n      }"
        }
      ],
      "errorHandling": [
        {
          "line": 69,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\preferences\\notifications-modal.tsx",
      "lines": 181,
      "complexity": 26,
      "conditionals": [
        {
          "type": "if",
          "line": 34,
          "condition": "isOpen && currentPreferences",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 39,
          "condition": "isOpen && !currentPreferences && session?.user?.notificationPreferences",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 47,
          "condition": "isOpen",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "selectedMethods.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "result.success && result.notificationPreferences",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "NotificationsModal",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "NotificationsModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleMethodChange",
          "line": 52,
          "parameters": [
            {
              "name": "method",
              "type": "\"email\" | \"sms\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 54,
          "parameters": [
            {
              "name": "m",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSave",
          "line": 55,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 90,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 101,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 112,
          "parameters": [
            {
              "name": "value",
              "type": "INotificationPreferences[\"language\"]"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 19,
          "rule": "const defaultPrefs: INotificationPreferences = { methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "const defaultPrefs: INotificationPreferences = { methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "defaultPrefs: INotificationPreferences = { methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "{ methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "methods: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 51,
          "rule": "const handleMethodChange = (method: \"email\" | \"sms\") => {\r\n    setSelectedMethods((prev) => (prev.in"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "const handleMethodChange = (method: \"email\" | \"sms\") => {\r\n    setSelectedMethods((prev) => (prev.in"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "handleMethodChange = (method: \"email\" | \"sms\") => {\r\n    setSelectedMethods((prev) => (prev.includes"
        },
        {
          "type": "email",
          "line": 52,
          "rule": "(method: \"email\" | \"sms\") => {\r\n    setSelectedMethods((prev) => (prev.includes(method) ? prev.filte"
        },
        {
          "type": "email",
          "line": 52,
          "rule": "method: \"email\" | \"sms\""
        },
        {
          "type": "email",
          "line": 52,
          "rule": "\"email\" | \"sms\""
        },
        {
          "type": "email",
          "line": 52,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 52,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 87,
          "rule": "<Checkbox\r\n                id=\"method-email\"\r\n                checked={selectedMethods.includes(\"ema"
        },
        {
          "type": "email",
          "line": 87,
          "rule": "id=\"method-email\"\r\n                checked={selectedMethods.includes(\"email\")}\r\n                onCh"
        },
        {
          "type": "email",
          "line": 87,
          "rule": "id=\"method-email\""
        },
        {
          "type": "email",
          "line": 87,
          "rule": "\"method-email\""
        },
        {
          "type": "email",
          "line": 88,
          "rule": "checked={selectedMethods.includes(\"email\")}"
        },
        {
          "type": "email",
          "line": 88,
          "rule": "{selectedMethods.includes(\"email\")}"
        },
        {
          "type": "email",
          "line": 88,
          "rule": "selectedMethods.includes(\"email\")"
        },
        {
          "type": "email",
          "line": 89,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 89,
          "rule": "onCheckedChange={() => handleMethodChange(\"email\")}"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "{() => handleMethodChange(\"email\")}"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "() => handleMethodChange(\"email\")"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "handleMethodChange(\"email\")"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "<Label htmlFor=\"method-email\">{t(\"preferences.notifications.methodEmail\")}</Label>"
        },
        {
          "type": "email",
          "line": 92,
          "rule": "<Label htmlFor=\"method-email\">"
        },
        {
          "type": "email",
          "line": 92,
          "rule": "htmlFor=\"method-email\""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "htmlFor=\"method-email\""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "\"method-email\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\notifications\\sms-service.ts",
      "lines": 145,
      "complexity": 26,
      "conditionals": [
        {
          "type": "if",
          "line": 11,
          "condition": "process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 15,
          "condition": "this.isDevelopment && process.env.TWILIO_ACCOUNT_SID === \"your-twilio-account-sid\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 19,
          "condition": "!process.env.TWILIO_ACCOUNT_SID.startsWith(\"AC\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 20,
          "condition": "!this.isDevelopment || process.env.TWILIO_ACCOUNT_SID !== \"your-twilio-account-sid\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 26,
          "condition": "!this.isDevelopment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 36,
          "condition": "!this.client || !this.messagingServiceSid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "!cleaned.startsWith(\"+\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 65,
          "condition": "cleaned.startsWith(\"0\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 69,
          "condition": "cleaned.length === 9 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 73,
          "condition": "cleaned.length === 10 && cleaned.startsWith(\"972\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 76,
          "condition": "cleaned.length === 10 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 82,
          "condition": "cleaned.startsWith(\"+9720\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "cleaned.startsWith(\"+972\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "nationalNumber.length !== 9 || !/^[5-9]/.test(nationalNumber)",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "sendNotification",
          "line": 30,
          "parameters": [
            {
              "name": "recipient",
              "type": "PhoneRecipient"
            },
            {
              "name": "data",
              "type": "NotificationData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "formatPhoneNumber",
          "line": 57,
          "parameters": [
            {
              "name": "phoneNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "isConfigured",
          "line": 94,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 40,
          "rule": "try {\n      // Format phone number to ensure it includes country code\n      const phoneNumber = this"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "{\n      // Format phone number to ensure it includes country code\n      const phoneNumber = this.for"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "const phoneNumber = this.formatPhoneNumber(recipient.value)"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "const phoneNumber = this.formatPhoneNumber(recipient.value)"
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "phoneNumber = this.formatPhoneNumber(recipient.value)"
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 45,
          "rule": "logNotification(\"sms\", phoneNumber, messageBody)"
        },
        {
          "type": "phone",
          "line": 45,
          "rule": "logNotification(\"sms\", phoneNumber, messageBody)"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "const message = await this.client.messages.create({\n        body: messageBody,\n        messagingServ"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "const message = await this.client.messages.create({\n        body: messageBody,\n        messagingServ"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "message = await this.client.messages.create({\n        body: messageBody,\n        messagingServiceSid"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "await this.client.messages.create({\n        body: messageBody,\n        messagingServiceSid: this.mes"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "this.client.messages.create({\n        body: messageBody,\n        messagingServiceSid: this.messaging"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "{\n        body: messageBody,\n        messagingServiceSid: this.messagingServiceSid,\n        to: phon"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "to: phoneNumber"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 57,
          "rule": "private formatPhoneNumber(phoneNumber: string): string {\n    // Remove all non-digit characters exce"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "phoneNumber: string"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "{\n    // Remove all non-digit characters except the plus sign\n    let cleaned = phoneNumber.replace("
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "let cleaned = phoneNumber.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "let cleaned = phoneNumber.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 62,
          "rule": "cleaned = phoneNumber.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "phoneNumber.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "phoneNumber.replace"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "phoneNumber"
        }
      ],
      "errorHandling": [
        {
          "line": 40,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\review-actions.ts",
      "lines": 418,
      "complexity": 25,
      "conditionals": [
        {
          "type": "if",
          "line": 18,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 24,
          "condition": "!booking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 25,
          "condition": "booking.status !== \"completed\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 28,
          "condition": "booking.userId.toString() !== session.user.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 33,
          "condition": "existingReview",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "!session?.user?.roles || !session.user.roles.some(role => [\"admin\", \"professional\"].includes(role))",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "!review",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "!session?.user?.roles || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "filters.rating",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "filters.hasResponse !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "filters.hasResponse",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 93,
          "condition": "filters.search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 133,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 140,
          "condition": "filters.rating",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 142,
          "condition": "filters.search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 206,
          "condition": "!session?.user?.id",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "createReview",
          "line": 13,
          "parameters": [
            {
              "name": "data",
              "type": "CreateReviewData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateReviewResponse",
          "line": 51,
          "parameters": [
            {
              "name": "reviewId",
              "type": "string"
            },
            {
              "name": "professionalResponse",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "role",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getAllReviews",
          "line": 73,
          "parameters": [
            {
              "name": "filters",
              "type": "ReviewFilters"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getUserReviews",
          "line": 128,
          "parameters": [
            {
              "name": "filters",
              "type": "ReviewFilters"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getReviewByBookingId",
          "line": 172,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getCompletedBookingsWithoutReviews",
          "line": 201,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 217,
          "parameters": [
            {
              "name": "review",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [
            {
              "name": "booking",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { revalidatePath } from \"next/cache\"\r\nimport { getServerSession } from \"next-"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "revalidatePath(\"/dashboard/member/reviews\")"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "revalidatePath(\"/dashboard/member/reviews\")"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "revalidatePath(\"/dashboard/member/bookings\")"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "revalidatePath(\"/dashboard/admin/reviews\")"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "revalidatePath(\"/dashboard/admin/reviews\")"
        },
        {
          "type": "general",
          "line": 46,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "revalidatePath(\"/dashboard/admin/reviews\")"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "revalidatePath(\"/dashboard/admin/reviews\")"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "revalidatePath(\"/dashboard/member/reviews\")"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "revalidatePath(\"/dashboard/member/reviews\")"
        },
        {
          "type": "general",
          "line": 68,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 16,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 55,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 77,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 132,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 175,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 205,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\reviews\\review-detail-modal.tsx",
      "lines": 283,
      "complexity": 25,
      "conditionals": [
        {
          "type": "if",
          "line": 32,
          "condition": "!review",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 35,
          "condition": "!professionalResponse.trim()",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDateTime",
          "line": 22,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            },
            {
              "name": "language",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ReviewDetailModal",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "ReviewDetailModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleUpdateResponse",
          "line": 35,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "renderStars",
          "line": 47,
          "parameters": [
            {
              "name": "rating",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 226,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 127,
          "rule": "<div className=\"flex items-center space-x-2\">\r\n                    <Phone className=\"h-4 w-4 text-mu"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "<span className=\"font-medium\">{t(\"adminReviews.phone\")}:</span>"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "{t(\"adminReviews.phone\")}"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "t(\"adminReviews.phone\")"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "\"adminReviews.phone\""
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "<span>{userInfo?.phone || \"-\"}</span>"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "{userInfo?.phone || \"-\"}"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "userInfo?.phone || \"-\""
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "userInfo?.phone"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 133,
          "rule": "<div className=\"flex items-center space-x-2\">\r\n                    <Mail className=\"h-4 w-4 text-mut"
        },
        {
          "type": "email",
          "line": 136,
          "rule": "<span className=\"font-medium\">{t(\"adminReviews.email\")}:</span>"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "{t(\"adminReviews.email\")}"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "t(\"adminReviews.email\")"
        },
        {
          "type": "email",
          "line": 137,
          "rule": "\"adminReviews.email\""
        },
        {
          "type": "email",
          "line": 138,
          "rule": "<span>{userInfo?.email || \"-\"}</span>"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "{userInfo?.email || \"-\"}"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "userInfo?.email || \"-\""
        },
        {
          "type": "email",
          "line": 138,
          "rule": "userInfo?.email"
        },
        {
          "type": "email",
          "line": 138,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 184,
          "rule": "<div className=\"flex items-center space-x-2\">\r\n                <Phone className=\"h-4 w-4 text-muted-"
        },
        {
          "type": "phone",
          "line": 187,
          "rule": "<span className=\"font-medium\">{t(\"adminReviews.phone\")}:</span>"
        },
        {
          "type": "phone",
          "line": 187,
          "rule": "{t(\"adminReviews.phone\")}"
        },
        {
          "type": "phone",
          "line": 187,
          "rule": "t(\"adminReviews.phone\")"
        },
        {
          "type": "phone",
          "line": 187,
          "rule": "\"adminReviews.phone\""
        },
        {
          "type": "phone",
          "line": 188,
          "rule": "<span>{professionalInfo?.phone || \"-\"}</span>"
        },
        {
          "type": "phone",
          "line": 188,
          "rule": "{professionalInfo?.phone || \"-\"}"
        },
        {
          "type": "phone",
          "line": 188,
          "rule": "professionalInfo?.phone || \"-\""
        },
        {
          "type": "phone",
          "line": 188,
          "rule": "professionalInfo?.phone"
        },
        {
          "type": "phone",
          "line": 189,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 190,
          "rule": "<div className=\"flex items-center space-x-2\">\r\n                <Mail className=\"h-4 w-4 text-muted-f"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "<span className=\"font-medium\">{t(\"adminReviews.email\")}:</span>"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "{t(\"adminReviews.email\")}"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "t(\"adminReviews.email\")"
        },
        {
          "type": "email",
          "line": 193,
          "rule": "\"adminReviews.email\""
        },
        {
          "type": "email",
          "line": 194,
          "rule": "<span>{professionalInfo?.email || \"-\"}</span>"
        },
        {
          "type": "email",
          "line": 194,
          "rule": "{professionalInfo?.email || \"-\"}"
        },
        {
          "type": "email",
          "line": 194,
          "rule": "professionalInfo?.email || \"-\""
        },
        {
          "type": "email",
          "line": 194,
          "rule": "professionalInfo?.email"
        },
        {
          "type": "email",
          "line": 195,
          "rule": "email"
        }
      ],
      "errorHandling": [
        {
          "line": 38,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\common\\phone-input.tsx",
      "lines": 194,
      "complexity": 23,
      "conditionals": [
        {
          "type": "if",
          "line": 43,
          "condition": "typeof ref === \"function\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 44,
          "condition": "ref",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "selectedCode === \"+972\" && processedValue && !processedValue.startsWith(\"5\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "hiddenInputRef.current",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "onPhoneChange",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "phoneNumber",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "onPhoneChange",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "hiddenInputRef.current",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "typeof fullNumberValue === \"string\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 79,
          "condition": "fullNumberValue === \"\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 85,
          "condition": "matchedCountry",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 92,
          "condition": "newSelectedCode === \"+972\" && newPhoneNumber.startsWith(\"0\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 99,
          "condition": "propsDefaultValue",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [
            {
              "name": "args",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 38,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "combinedRef",
          "line": 42,
          "parameters": [
            {
              "name": "node",
              "type": "HTMLInputElement"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePhoneChange",
          "line": 46,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleCodeChange",
          "line": 76,
          "parameters": [
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 84,
          "parameters": [
            {
              "name": "cc",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [
            {
              "name": "country",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 34,
          "rule": "const [phoneNumber, setPhoneNumber] = React.useState(propsDefaultValue || \"\")"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "const [phoneNumber, setPhoneNumber] = React.useState(propsDefaultValue || \"\")"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "[phoneNumber, setPhoneNumber] = React.useState(propsDefaultValue || \"\")"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "[phoneNumber, setPhoneNumber]"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "React.useEffect(() => {\r\n    let fullNumber = \"\"\r\n\r\n    if (phoneNumber) {\r\n      // Always include "
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "React.useEffect(() => {\r\n    let fullNumber = \"\"\r\n\r\n    if (phoneNumber) {\r\n      // Always include "
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "() => {\r\n    let fullNumber = \"\"\r\n\r\n    if (phoneNumber) {\r\n      // Always include the country code"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "{\r\n    let fullNumber = \"\"\r\n\r\n    if (phoneNumber) {\r\n      // Always include the country code with "
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "if (phoneNumber) {\r\n      // Always include the country code with + sign\r\n      fullNumber = selecte"
        },
        {
          "type": "phone",
          "line": 66,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 66,
          "rule": "{\r\n      // Always include the country code with + sign\r\n      fullNumber = selectedCode + (phoneNum"
        },
        {
          "type": "phone",
          "line": 66,
          "rule": "fullNumber = selectedCode + (phoneNumber.startsWith(\"0\") ? phoneNumber.substring(1) : phoneNumber)"
        },
        {
          "type": "phone",
          "line": 66,
          "rule": "fullNumber = selectedCode + (phoneNumber.startsWith(\"0\") ? phoneNumber.substring(1) : phoneNumber)"
        },
        {
          "type": "phone",
          "line": 67,
          "rule": "selectedCode + (phoneNumber.startsWith(\"0\") ? phoneNumber.substring(1) : phoneNumber)"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "(phoneNumber.startsWith(\"0\") ? phoneNumber.substring(1) : phoneNumber)"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber.startsWith(\"0\") ? phoneNumber.substring(1) : phoneNumber"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber.startsWith(\"0\")"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber.startsWith"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber.substring(1)"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber.substring"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 75,
          "rule": "[selectedCode, phoneNumber, onPhoneChange]"
        },
        {
          "type": "phone",
          "line": 75,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "<Input\r\n        type=\"tel\"\r\n        ref={combinedRef}\r\n        value={phoneNumber}\r\n        onChange"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "type=\"tel\"\r\n        ref={combinedRef}\r\n        value={phoneNumber}\r\n        onChange={handlePhoneCha"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "value={phoneNumber}"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "{phoneNumber}"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 135,
          "rule": "<input\r\n        ref={hiddenInputRef}\r\n        type=\"hidden\"\r\n        name={props.name || \"phone\"}\r\n "
        },
        {
          "type": "phone",
          "line": 135,
          "rule": "ref={hiddenInputRef}\r\n        type=\"hidden\"\r\n        name={props.name || \"phone\"}\r\n        value={ph"
        },
        {
          "type": "phone",
          "line": 136,
          "rule": "name={props.name || \"phone\"}"
        },
        {
          "type": "phone",
          "line": 136,
          "rule": "{props.name || \"phone\"}"
        },
        {
          "type": "phone",
          "line": 136,
          "rule": "props.name || \"phone\""
        },
        {
          "type": "phone",
          "line": 136,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 136,
          "rule": "value={phoneNumber ? `${selectedCode}${phoneNumber}` : \"\"}"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "{phoneNumber ? `${selectedCode}${phoneNumber}` : \"\"}"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phoneNumber ? `${selectedCode}${phoneNumber}` : \"\""
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "`${selectedCode}${phoneNumber}`"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phoneNumber}`"
        },
        {
          "type": "phone",
          "line": 137,
          "rule": "phoneNumber"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\addresses\\address-form.tsx",
      "lines": 337,
      "complexity": 23,
      "conditionals": [
        {
          "type": "switch",
          "line": 41,
          "cases": 5,
          "expression": "data.addressType"
        },
        {
          "type": "if",
          "line": 71,
          "condition": "result.success && result.address",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 76,
          "condition": "onSuccess",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "AddressForm",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "AddressFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 26,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 71,
          "rule": "if (result.success && result.address) {\r\n        toast.success(address ? t(\"addresses.updateSuccess\""
        },
        {
          "type": "general",
          "line": 72,
          "rule": "{\r\n        toast.success(address ? t(\"addresses.updateSuccess\") : t(\"addresses.createSuccess\"))\r\n   "
        },
        {
          "type": "general",
          "line": 74,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"addresses\"] })"
        },
        {
          "type": "general",
          "line": 74,
          "rule": "queryClient.invalidateQueries({ queryKey: [\"addresses\"] })"
        },
        {
          "type": "general",
          "line": 74,
          "rule": "queryClient.invalidateQueries"
        },
        {
          "type": "general",
          "line": 75,
          "rule": "invalidateQueries"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "<div className=\"space-y-2\">\r\n          <Label htmlFor=\"city\">{t(\"addresses.fields.city\")}</Label>\r\n "
        },
        {
          "type": "required",
          "line": 93,
          "rule": "<Input id=\"city\" name=\"city\" defaultValue={address?.city} required className=\"focus:ring-turquoise-5"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "id=\"city\" name=\"city\" defaultValue={address?.city} required className=\"focus:ring-turquoise-500\""
        },
        {
          "type": "required",
          "line": 94,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 94,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 98,
          "rule": "<Input\r\n            id=\"street\"\r\n            name=\"street\"\r\n            defaultValue={address?.stree"
        },
        {
          "type": "required",
          "line": 98,
          "rule": "id=\"street\"\r\n            name=\"street\"\r\n            defaultValue={address?.street}\r\n            requ"
        },
        {
          "type": "required",
          "line": 100,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 100,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 104,
          "rule": "<Input\r\n            id=\"streetNumber\"\r\n            name=\"streetNumber\"\r\n            defaultValue={ad"
        },
        {
          "type": "required",
          "line": 105,
          "rule": "id=\"streetNumber\"\r\n            name=\"streetNumber\"\r\n            defaultValue={address?.streetNumber}"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "required"
        }
      ],
      "errorHandling": [
        {
          "line": 28,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\auth\\register\\register-form.tsx",
      "lines": 444,
      "complexity": 22,
      "conditionals": [
        {
          "type": "if",
          "line": 58,
          "condition": "confirmPassword",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "password !== confirmPassword",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "isProfessional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "!result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 78,
          "condition": "result.message === \"emailExists\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 82,
          "condition": "result.message === \"phoneExists\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 85,
          "condition": "result.message === \"weakPassword\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 89,
          "condition": "result.message === \"invalidDateOfBirth\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 93,
          "condition": "result.message === \"missingFields\"",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "RegisterForm",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentPropsWithoutRef<\"div\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePasswordChange",
          "line": 56,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleConfirmPasswordChange",
          "line": 60,
          "parameters": [
            {
              "name": "e",
              "type": "React.ChangeEvent<HTMLInputElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "togglePasswordVisibility",
          "line": 64,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "toggleConfirmPasswordVisibility",
          "line": 66,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 68,
          "parameters": [
            {
              "name": "e",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 123,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 347,
          "parameters": [
            {
              "name": "day",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 359,
          "parameters": [
            {
              "name": "month",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 370,
          "parameters": [
            {
              "name": "year",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 15,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "if (!result.success) {\r\n        if (result.message === \"emailExists\") {\r\n          setError(t(\"error"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "{\r\n        if (result.message === \"emailExists\") {\r\n          setError(t(\"errors.emailExists\"))\r\n   "
        },
        {
          "type": "email",
          "line": 78,
          "rule": "if (result.message === \"emailExists\") {\r\n          setError(t(\"errors.emailExists\"))\r\n          toas"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "result.message === \"emailExists\""
        },
        {
          "type": "email",
          "line": 79,
          "rule": "\"emailExists\""
        },
        {
          "type": "email",
          "line": 79,
          "rule": "{\r\n          setError(t(\"errors.emailExists\"))\r\n          toast({ title: t(\"errors.emailExists\"), va"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "setError(t(\"errors.emailExists\"))"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "setError(t(\"errors.emailExists\"))"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "t(\"errors.emailExists\")"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "\"errors.emailExists\""
        },
        {
          "type": "email",
          "line": 80,
          "rule": "toast({ title: t(\"errors.emailExists\"), variant: \"destructive\" })"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "toast({ title: t(\"errors.emailExists\"), variant: \"destructive\" })"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "{ title: t(\"errors.emailExists\"), variant: \"destructive\" }"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "title: t(\"errors.emailExists\")"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "t(\"errors.emailExists\")"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "\"errors.emailExists\""
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "if (result.message === \"phoneExists\") {\r\n          setError(t(\"errors.phoneExists\"))\r\n          toas"
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "result.message === \"phoneExists\""
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "\"phoneExists\""
        },
        {
          "type": "phone",
          "line": 82,
          "rule": "{\r\n          setError(t(\"errors.phoneExists\"))\r\n          toast({ title: t(\"errors.phoneExists\"), va"
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "setError(t(\"errors.phoneExists\"))"
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "setError(t(\"errors.phoneExists\"))"
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "t(\"errors.phoneExists\")"
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "\"errors.phoneExists\""
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "toast({ title: t(\"errors.phoneExists\"), variant: \"destructive\" })"
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "toast({ title: t(\"errors.phoneExists\"), variant: \"destructive\" })"
        },
        {
          "type": "phone",
          "line": 84,
          "rule": "{ title: t(\"errors.phoneExists\"), variant: \"destructive\" }"
        },
        {
          "type": "phone",
          "line": 84,
          "rule": "title: t(\"errors.phoneExists\")"
        },
        {
          "type": "phone",
          "line": 84,
          "rule": "t(\"errors.phoneExists\")"
        },
        {
          "type": "phone",
          "line": 84,
          "rule": "\"errors.phoneExists\""
        },
        {
          "type": "required",
          "line": 138,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 138,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "<div className=\"space-y-2\">\r\n              <Label htmlFor=\"email\">{t(\"register.email\")}</Label>\r\n   "
        },
        {
          "type": "email",
          "line": 141,
          "rule": "<Label htmlFor=\"email\">{t(\"register.email\")}</Label>"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "<Label htmlFor=\"email\">"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "htmlFor=\"email\""
        },
        {
          "type": "email",
          "line": 141,
          "rule": "htmlFor=\"email\""
        },
        {
          "type": "email",
          "line": 141,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 141,
          "rule": "{t(\"register.email\")}"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "t(\"register.email\")"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "\"register.email\""
        },
        {
          "type": "email",
          "line": 142,
          "rule": "<Input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n    "
        },
        {
          "type": "email",
          "line": 142,
          "rule": "id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder="
        },
        {
          "type": "email",
          "line": 142,
          "rule": "id=\"email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "name=\"email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 143,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 144,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 144,
          "rule": "placeholder={t(\"register.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "{t(\"register.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "t(\"register.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 145,
          "rule": "\"register.emailPlaceholder\""
        },
        {
          "type": "required",
          "line": 147,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 147,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 149,
          "rule": "<div className=\"space-y-2\">\r\n              <Label htmlFor=\"phone\">{t(\"register.phone\")}</Label>\r\n   "
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "<Label htmlFor=\"phone\">{t(\"register.phone\")}</Label>"
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "<Label htmlFor=\"phone\">"
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "htmlFor=\"phone\""
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "htmlFor=\"phone\""
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "{t(\"register.phone\")}"
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "t(\"register.phone\")"
        },
        {
          "type": "phone",
          "line": 150,
          "rule": "\"register.phone\""
        },
        {
          "type": "phone",
          "line": 151,
          "rule": "<PhoneInput\r\n                id=\"phone\"\r\n                name=\"phone\"\r\n                placeholder={"
        },
        {
          "type": "phone",
          "line": 151,
          "rule": "id=\"phone\"\r\n                name=\"phone\"\r\n                placeholder={t(\"register.phonePlaceholder\""
        },
        {
          "type": "phone",
          "line": 151,
          "rule": "id=\"phone\""
        },
        {
          "type": "phone",
          "line": 152,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 152,
          "rule": "name=\"phone\""
        },
        {
          "type": "phone",
          "line": 152,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "placeholder={t(\"register.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "{t(\"register.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "t(\"register.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 153,
          "rule": "\"register.phonePlaceholder\""
        },
        {
          "type": "required",
          "line": 167,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 167,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 222,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 222,
          "rule": "required"
        }
      ],
      "errorHandling": [
        {
          "line": 73,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "lines": 273,
      "complexity": 22,
      "conditionals": [
        {
          "type": "if",
          "line": 49,
          "condition": "localPaymentMethods.length > 0 && !form.getValues(\"selectedPaymentMethodId\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "defaultMethod",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 69,
          "condition": "existingIndex !== -1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "upsertedMethod.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 79,
          "condition": "isClientLoading || !calculatedPrice",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "calculatedPrice.isFullyCoveredByVoucherOrSubscription && calculatedPrice.finalAmount === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PaymentStep",
          "line": 30,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaymentStepProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "values",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handlePaymentMethodUpserted",
          "line": 64,
          "parameters": [
            {
              "name": "upsertedMethod",
              "type": "IPaymentMethod"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onSubmitValidated",
          "line": 78,
          "parameters": [
            {
              "name": "data",
              "type": "PaymentFormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 129,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 150,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 168,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 188,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 11,
          "rule": "import { PaymentDetailsSchema, type PaymentFormValues } from \"@/lib/validation/booking-schemas\""
        },
        {
          "type": "general",
          "line": 12,
          "rule": "\"@/lib/validation/booking-schemas\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\notifications\\templates\\sms-templates.ts",
      "lines": 252,
      "complexity": 22,
      "conditionals": [
        {
          "type": "switch",
          "line": 16,
          "cases": 7,
          "expression": "data.type"
        },
        {
          "type": "switch",
          "line": 50,
          "cases": 3,
          "expression": "language"
        },
        {
          "type": "switch",
          "line": 75,
          "cases": 3,
          "expression": "language"
        },
        {
          "type": "switch",
          "line": 86,
          "cases": 3,
          "expression": "language"
        },
        {
          "type": "switch",
          "line": 97,
          "cases": 3,
          "expression": "language"
        },
        {
          "type": "if",
          "line": 117,
          "condition": "data.isForSomeoneElse",
          "hasElse": true
        },
        {
          "type": "switch",
          "line": 120,
          "cases": 3,
          "expression": "language"
        },
        {
          "type": "if",
          "line": 140,
          "condition": "data.isBookerForSomeoneElse && data.actualRecipientName",
          "hasElse": true
        },
        {
          "type": "switch",
          "line": 145,
          "cases": 3,
          "expression": "language"
        },
        {
          "type": "switch",
          "line": 163,
          "cases": 3,
          "expression": "language"
        }
      ],
      "functions": [
        {
          "name": "getSMSTemplate",
          "line": 11,
          "parameters": [
            {
              "name": "data",
              "type": "NotificationData"
            },
            {
              "name": "language",
              "type": "SMSLanguage"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getProfessionalBookingNotificationSmsTemplate",
          "line": 34,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            },
            {
              "name": "language",
              "type": "SMSLanguage"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getOTPSmsTemplate",
          "line": 73,
          "parameters": [
            {
              "name": "code",
              "type": "string"
            },
            {
              "name": "expiresIn",
              "type": "number"
            },
            {
              "name": "language",
              "type": "SMSLanguage"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getWelcomeSmsTemplate",
          "line": 84,
          "parameters": [
            {
              "name": "language",
              "type": "SMSLanguage"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getPasswordResetSmsTemplate",
          "line": 93,
          "parameters": [
            {
              "name": "resetUrl",
              "type": "string"
            },
            {
              "name": "language",
              "type": "SMSLanguage"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getTreatmentBookingSuccessSmsTemplate",
          "line": 104,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            },
            {
              "name": "language",
              "type": "SMSLanguage"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 155,
          "rule": "default: // English\n          message = `Hello ${data.recipientName}, the booking you made for ${dat"
        },
        {
          "type": "email",
          "line": 155,
          "rule": "message = `Hello ${data.recipientName}, the booking you made for ${data.actualRecipientName} has bee"
        },
        {
          "type": "email",
          "line": 155,
          "rule": "message = `Hello ${data.recipientName}, the booking you made for ${data.actualRecipientName} has bee"
        },
        {
          "type": "email",
          "line": 156,
          "rule": "`Hello ${data.recipientName}, the booking you made for ${data.actualRecipientName} has been complete"
        },
        {
          "type": "email",
          "line": 157,
          "rule": "data.actualRecipientName} has been completed and a notification has been sent to them via SMS and em"
        },
        {
          "type": "email",
          "line": 157,
          "rule": "} has been completed and a notification has been sent to them via SMS and email. You can view the bo"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "lines": 394,
      "complexity": 21,
      "conditionals": [
        {
          "type": "if",
          "line": 52,
          "condition": "activeTab === \"with-reviews\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 66,
          "condition": "!review",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "ratingFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "responseFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "activeTab === \"without-reviews\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 93,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 97,
          "condition": "error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 266,
          "condition": "page > data.totalPages",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminReviewsClient",
          "line": 26,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getFiltersForTab",
          "line": 48,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRowClick",
          "line": 66,
          "parameters": [
            {
              "name": "review",
              "type": "PopulatedReview"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCloseDetailModal",
          "line": 70,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "clearAllFilters",
          "line": 81,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getActiveFiltersCount",
          "line": 83,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderContent",
          "line": 87,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 136,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 222,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 230,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 254,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 259,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 265,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 272,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 279,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 284,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 73,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 77,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "lines": 178,
      "complexity": 21,
      "conditionals": [
        {
          "type": "if",
          "line": 55,
          "condition": "guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "!guestUserId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "result.success && result.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "!selectedSubscriptionId || !selectedTreatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "result.success",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 88,
          "cases": 6,
          "expression": "currentStep"
        },
        {
          "type": "if",
          "line": 108,
          "condition": "nextState.selectedTreatmentId !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 111,
          "condition": "nextState.selectedDurationId !== undefined",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestSubscriptionWizard",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "Props"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 36,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "nextStep",
          "line": 63,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "prevStep",
          "line": 64,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleGuestInfoSubmit",
          "line": 66,
          "parameters": [
            {
              "name": "info",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handlePurchase",
          "line": 75,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "renderStep",
          "line": 88,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 103,
          "parameters": [
            {
              "name": "update",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 66,
          "rule": "{\r\n    setGuestInfo(info)\r\n    if (!guestUserId) {\r\n      const result = await createGuestUser({\r\n  "
        },
        {
          "type": "email",
          "line": 67,
          "rule": "if (!guestUserId) {\r\n      const result = await createGuestUser({\r\n        firstName: info.firstName"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "{\r\n      const result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastNam"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "const result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.l"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "const result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.l"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "result = await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.lastNam"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "await createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n     "
        },
        {
          "type": "email",
          "line": 68,
          "rule": "createGuestUser({\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n        ema"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "{\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n        email: info.email,\r"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "email: info.email"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "info.email"
        },
        {
          "type": "email",
          "line": 70,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 70,
          "rule": "phone: info.phone"
        },
        {
          "type": "phone",
          "line": 70,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 71,
          "rule": "info.phone"
        },
        {
          "type": "phone",
          "line": 71,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 82,
          "rule": "guestInfo: {\r\n        name: guestInfo.firstName + \" \" + guestInfo.lastName,\r\n        email: guestInf"
        },
        {
          "type": "email",
          "line": 83,
          "rule": "{\r\n        name: guestInfo.firstName + \" \" + guestInfo.lastName,\r\n        email: guestInfo.email,\r\n "
        },
        {
          "type": "email",
          "line": 84,
          "rule": "email: guestInfo.email"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 85,
          "rule": "phone: guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 85,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 85,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 85,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "actions\\account-actions.ts",
      "lines": 223,
      "complexity": 20,
      "conditionals": [
        {
          "type": "if",
          "line": 12,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 14,
          "condition": "newPassword !== confirmPassword",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "!passwordValidation.isValid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 26,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 28,
          "condition": "!user.password",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 32,
          "condition": "!isCurrentPasswordValid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "!validateEmail(newEmail)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "existingUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "!otpResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 70,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "!verifyResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 81,
          "condition": "existingUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "!validatePhone(newPhone)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 101,
          "condition": "existingUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 105,
          "condition": "!otpResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 116,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "!verifyResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 126,
          "condition": "existingUser",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "changePassword",
          "line": 9,
          "parameters": [
            {
              "name": "currentPassword",
              "type": "string"
            },
            {
              "name": "newPassword",
              "type": "string"
            },
            {
              "name": "confirmPassword",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "requestEmailChange",
          "line": 42,
          "parameters": [
            {
              "name": "newEmail",
              "type": "string"
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        },
        {
          "name": "confirmEmailChange",
          "line": 67,
          "parameters": [
            {
              "name": "newEmail",
              "type": "string"
            },
            {
              "name": "otpCode",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "requestPhoneChange",
          "line": 89,
          "parameters": [
            {
              "name": "newPhone",
              "type": "string"
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        },
        {
          "name": "confirmPhoneChange",
          "line": 113,
          "parameters": [
            {
              "name": "newPhone",
              "type": "string"
            },
            {
              "name": "otpCode",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { getServerSession } from \"next-auth/next\"\r\nimport { authOptions, hashPasswor"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "import { authOptions, hashPassword, verifyPassword, validateEmail, validatePhone } from \"@/lib/auth/"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "{ authOptions, hashPassword, verifyPassword, validateEmail, validatePhone }"
        },
        {
          "type": "general",
          "line": 2,
          "rule": "{ authOptions, hashPassword, verifyPassword, validateEmail, validatePhone }"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "validatePhone"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "validatePhone"
        },
        {
          "type": "general",
          "line": 17,
          "rule": "const { validatePassword } = await import(\"@/lib/auth/auth\")"
        },
        {
          "type": "general",
          "line": 17,
          "rule": "const { validatePassword } = await import(\"@/lib/auth/auth\")"
        },
        {
          "type": "general",
          "line": 18,
          "rule": "{ validatePassword } = await import(\"@/lib/auth/auth\")"
        },
        {
          "type": "general",
          "line": 18,
          "rule": "{ validatePassword }"
        },
        {
          "type": "general",
          "line": 18,
          "rule": "validatePassword"
        },
        {
          "type": "general",
          "line": 18,
          "rule": "validatePassword"
        },
        {
          "type": "general",
          "line": 19,
          "rule": "const passwordValidation = validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 19,
          "rule": "const passwordValidation = validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "passwordValidation = validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "validatePassword"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "{\r\n  try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n     "
        },
        {
          "type": "email",
          "line": 45,
          "rule": "{\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n      ret"
        },
        {
          "type": "general",
          "line": 48,
          "rule": "if (!validateEmail(newEmail)) {\r\n      return { success: false, message: \"invalidEmail\" }\r\n    }"
        },
        {
          "type": "general",
          "line": 49,
          "rule": "!validateEmail(newEmail)"
        },
        {
          "type": "general",
          "line": 49,
          "rule": "validateEmail(newEmail)"
        },
        {
          "type": "general",
          "line": 49,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "const existingUser = await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: s"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "const existingUser = await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: s"
        },
        {
          "type": "email",
          "line": 52,
          "rule": "existingUser = await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session"
        },
        {
          "type": "email",
          "line": 52,
          "rule": "await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session.user.id }, // "
        },
        {
          "type": "email",
          "line": 52,
          "rule": "User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session.user.id }, // Exclud"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "{\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session.user.id }, // Exclude current use"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "email: newEmail.toLowerCase()"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "if (existingUser) {\r\n      return { success: false, message: \"emailExists\" }\r\n    }"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "{\r\n      return { success: false, message: \"emailExists\" }\r\n    }"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "return { success: false, message: \"emailExists\" }"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "{ success: false, message: \"emailExists\" }"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "message: \"emailExists\""
        },
        {
          "type": "email",
          "line": 56,
          "rule": "\"emailExists\""
        },
        {
          "type": "email",
          "line": 57,
          "rule": "const otpResult = await generateAndSendOTP(newEmail, \"email\", language)"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "const otpResult = await generateAndSendOTP(newEmail, \"email\", language)"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "otpResult = await generateAndSendOTP(newEmail, \"email\", language)"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "await generateAndSendOTP(newEmail, \"email\", language)"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "generateAndSendOTP(newEmail, \"email\", language)"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 64,
          "rule": "catch (error) {\r\n    console.error(\"Request email change error:\", error)\r\n    return { success: fals"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "{\r\n    console.error(\"Request email change error:\", error)\r\n    return { success: false, message: \"r"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "console.error(\"Request email change error:\", error)"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "console.error(\"Request email change error:\", error)"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "\"Request email change error:\""
        },
        {
          "type": "email",
          "line": 72,
          "rule": "const verifyResult = await verifyOTP(newEmail, \"email\", otpCode)"
        },
        {
          "type": "email",
          "line": 72,
          "rule": "const verifyResult = await verifyOTP(newEmail, \"email\", otpCode)"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "verifyResult = await verifyOTP(newEmail, \"email\", otpCode)"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "await verifyOTP(newEmail, \"email\", otpCode)"
        },
        {
          "type": "email",
          "line": 73,
          "rule": "verifyOTP(newEmail, \"email\", otpCode)"
        },
        {
          "type": "email",
          "line": 74,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "const existingUser = await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: s"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "const existingUser = await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: s"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "existingUser = await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "await User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session.user.id },\r\n  "
        },
        {
          "type": "email",
          "line": 79,
          "rule": "User.findOne({\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session.user.id },\r\n    })"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "{\r\n      email: newEmail.toLowerCase(),\r\n      _id: { $ne: session.user.id },\r\n    }"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "email: newEmail.toLowerCase()"
        },
        {
          "type": "email",
          "line": 79,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "if (existingUser) {\r\n      return { success: false, message: \"emailExists\" }\r\n    }"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "{\r\n      return { success: false, message: \"emailExists\" }\r\n    }"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "return { success: false, message: \"emailExists\" }"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "{ success: false, message: \"emailExists\" }"
        },
        {
          "type": "email",
          "line": 82,
          "rule": "message: \"emailExists\""
        },
        {
          "type": "email",
          "line": 82,
          "rule": "\"emailExists\""
        },
        {
          "type": "email",
          "line": 82,
          "rule": "await User.findByIdAndUpdate(session.user.id, {\r\n      email: newEmail.toLowerCase(),\r\n    })"
        },
        {
          "type": "email",
          "line": 82,
          "rule": "await User.findByIdAndUpdate(session.user.id, {\r\n      email: newEmail.toLowerCase(),\r\n    })"
        },
        {
          "type": "email",
          "line": 83,
          "rule": "User.findByIdAndUpdate(session.user.id, {\r\n      email: newEmail.toLowerCase(),\r\n    })"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "{\r\n      email: newEmail.toLowerCase(),\r\n    }"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "email: newEmail.toLowerCase()"
        },
        {
          "type": "email",
          "line": 84,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 85,
          "rule": "return { success: true, message: \"emailChanged\" }"
        },
        {
          "type": "email",
          "line": 85,
          "rule": "{ success: true, message: \"emailChanged\" }"
        },
        {
          "type": "email",
          "line": 85,
          "rule": "message: \"emailChanged\""
        },
        {
          "type": "email",
          "line": 86,
          "rule": "\"emailChanged\""
        },
        {
          "type": "email",
          "line": 86,
          "rule": "catch (error) {\r\n    console.error(\"Confirm email change error:\", error)\r\n    return { success: fals"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "{\r\n    console.error(\"Confirm email change error:\", error)\r\n    return { success: false, message: \"c"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "console.error(\"Confirm email change error:\", error)"
        },
        {
          "type": "email",
          "line": 86,
          "rule": "console.error(\"Confirm email change error:\", error)"
        },
        {
          "type": "email",
          "line": 87,
          "rule": "\"Confirm email change error:\""
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "{\r\n  try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n"
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n     "
        },
        {
          "type": "phone",
          "line": 91,
          "rule": "{\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n      ret"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "if (!validatePhone(newPhone)) {\r\n      return { success: false, message: \"invalidPhone\" }\r\n    }"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "!validatePhone(newPhone)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatePhone(newPhone)"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "validatePhone"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "const existingUser = await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id"
        },
        {
          "type": "phone",
          "line": 97,
          "rule": "const existingUser = await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id"
        },
        {
          "type": "phone",
          "line": 98,
          "rule": "existingUser = await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id }, //"
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id }, // Exclude curren"
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id }, // Exclude current user"
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "{\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id }, // Exclude current user\r\n    }"
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "phone: newPhone"
        },
        {
          "type": "phone",
          "line": 99,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 101,
          "rule": "if (existingUser) {\r\n      return { success: false, message: \"phoneExists\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 101,
          "rule": "{\r\n      return { success: false, message: \"phoneExists\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 101,
          "rule": "return { success: false, message: \"phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 102,
          "rule": "{ success: false, message: \"phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 102,
          "rule": "message: \"phoneExists\""
        },
        {
          "type": "phone",
          "line": 102,
          "rule": "\"phoneExists\""
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "const otpResult = await generateAndSendOTP(newPhone, \"phone\", language)"
        },
        {
          "type": "phone",
          "line": 103,
          "rule": "const otpResult = await generateAndSendOTP(newPhone, \"phone\", language)"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "otpResult = await generateAndSendOTP(newPhone, \"phone\", language)"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "await generateAndSendOTP(newPhone, \"phone\", language)"
        },
        {
          "type": "phone",
          "line": 104,
          "rule": "generateAndSendOTP(newPhone, \"phone\", language)"
        },
        {
          "type": "phone",
          "line": 105,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "catch (error) {\r\n    console.error(\"Request phone change error:\", error)\r\n    return { success: fals"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "{\r\n    console.error(\"Request phone change error:\", error)\r\n    return { success: false, message: \"r"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "console.error(\"Request phone change error:\", error)"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "console.error(\"Request phone change error:\", error)"
        },
        {
          "type": "phone",
          "line": 111,
          "rule": "\"Request phone change error:\""
        },
        {
          "type": "phone",
          "line": 118,
          "rule": "const verifyResult = await verifyOTP(newPhone, \"phone\", otpCode)"
        },
        {
          "type": "phone",
          "line": 118,
          "rule": "const verifyResult = await verifyOTP(newPhone, \"phone\", otpCode)"
        },
        {
          "type": "phone",
          "line": 119,
          "rule": "verifyResult = await verifyOTP(newPhone, \"phone\", otpCode)"
        },
        {
          "type": "phone",
          "line": 119,
          "rule": "await verifyOTP(newPhone, \"phone\", otpCode)"
        },
        {
          "type": "phone",
          "line": 119,
          "rule": "verifyOTP(newPhone, \"phone\", otpCode)"
        },
        {
          "type": "phone",
          "line": 120,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "const existingUser = await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "const existingUser = await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id"
        },
        {
          "type": "phone",
          "line": 124,
          "rule": "existingUser = await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id },\r\n "
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "await User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id },\r\n    })"
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "User.findOne({\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id },\r\n    })"
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "{\r\n      phone: newPhone,\r\n      _id: { $ne: session.user.id },\r\n    }"
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "phone: newPhone"
        },
        {
          "type": "phone",
          "line": 125,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 126,
          "rule": "if (existingUser) {\r\n      return { success: false, message: \"phoneExists\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "{\r\n      return { success: false, message: \"phoneExists\" }\r\n    }"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "return { success: false, message: \"phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 127,
          "rule": "{ success: false, message: \"phoneExists\" }"
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "message: \"phoneExists\""
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "\"phoneExists\""
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "await User.findByIdAndUpdate(session.user.id, {\r\n      phone: newPhone,\r\n    })"
        },
        {
          "type": "phone",
          "line": 128,
          "rule": "await User.findByIdAndUpdate(session.user.id, {\r\n      phone: newPhone,\r\n    })"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "User.findByIdAndUpdate(session.user.id, {\r\n      phone: newPhone,\r\n    })"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "{\r\n      phone: newPhone,\r\n    }"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "phone: newPhone"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "return { success: true, message: \"phoneChanged\" }"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "{ success: true, message: \"phoneChanged\" }"
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "message: \"phoneChanged\""
        },
        {
          "type": "phone",
          "line": 131,
          "rule": "\"phoneChanged\""
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "catch (error) {\r\n    console.error(\"Confirm phone change error:\", error)\r\n    return { success: fals"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "{\r\n    console.error(\"Confirm phone change error:\", error)\r\n    return { success: false, message: \"c"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "console.error(\"Confirm phone change error:\", error)"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "console.error(\"Confirm phone change error:\", error)"
        },
        {
          "type": "phone",
          "line": 132,
          "rule": "\"Confirm phone change error:\""
        }
      ],
      "errorHandling": [
        {
          "line": 11,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 45,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 69,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 91,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 115,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\treatment-actions.ts",
      "lines": 238,
      "complexity": 20,
      "conditionals": [
        {
          "type": "if",
          "line": 14,
          "condition": "search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 15,
          "condition": "category",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 16,
          "condition": "typeof isActive === \"boolean\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "!treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 91,
          "condition": "!treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "!treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 117,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "!treatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 138,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 142,
          "condition": "!originalTreatment",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getTreatments",
          "line": 7,
          "parameters": [
            {
              "name": "options",
              "type": "{ page?: number; limit?: number; search?: string; category?: string; isActive?: boolean }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 24,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getActiveTreatmentsForPurchase",
          "line": 34,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createTreatment",
          "line": 55,
          "parameters": [
            {
              "name": "data",
              "type": "Omit<ITreatment, \"_id\" | \"createdAt\" | \"updatedAt\">"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateTreatment",
          "line": 68,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "data",
              "type": "Partial<ITreatment>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteTreatment",
          "line": 85,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getTreatmentById",
          "line": 99,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "toggleTreatmentStatus",
          "line": 114,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 130,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "duplicateTreatment",
          "line": 135,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 155,
          "parameters": [
            {
              "name": "d",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 6,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 6,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 6,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 6,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 6,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 78,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 78,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 78,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 79,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions/purchase\")"
        },
        {
          "type": "general",
          "line": 79,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions/purchase\")"
        },
        {
          "type": "general",
          "line": 79,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 93,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions/purchase\")"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions/purchase\")"
        },
        {
          "type": "general",
          "line": 94,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions/purchase\")"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "revalidatePath(\"/dashboard/member/subscriptions/purchase\")"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 150,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 150,
          "rule": "revalidatePath(\"/dashboard/admin/treatments\")"
        },
        {
          "type": "general",
          "line": 150,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 11,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 39,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 57,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 70,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 86,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 102,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 115,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 136,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "lines": 338,
      "complexity": 20,
      "conditionals": [
        {
          "type": "if",
          "line": 73,
          "condition": "statusFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "treatmentFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "dateRangeFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 86,
          "condition": "error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "!data?.bookings || data.bookings.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 246,
          "condition": "page > data.totalPages",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberBookingsClient",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ userId: string }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 68,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "clearAllFilters",
          "line": 69,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getActiveFiltersCount",
          "line": 72,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 233,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 238,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 244,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 252,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 264,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "actions\\preferences-actions.ts",
      "lines": 151,
      "complexity": 19,
      "conditionals": [
        {
          "type": "if",
          "line": 17,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 22,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 56,
          "condition": "!preferences.therapistGender || ![\"male\", \"female\", \"any\"].includes(preferences.therapistGender)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "!updatedUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 85,
          "condition": "!preferences.methods || preferences.methods.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "!preferences.methods.every((method) => [\"email\", \"sms\"].includes(method))",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "!preferences.language || ![\"he\", \"en\", \"ru\"].includes(preferences.language)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "!updatedUser",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getUserPreferences",
          "line": 11,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "updateTreatmentPreferences",
          "line": 49,
          "parameters": [
            {
              "name": "preferences",
              "type": "Partial<ITreatmentPreferences>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateNotificationPreferences",
          "line": 78,
          "parameters": [
            {
              "name": "preferences",
              "type": "Partial<INotificationPreferences>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 90,
          "parameters": [
            {
              "name": "method",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 6,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 6,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 6,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 6,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 6,
          "rule": "revalidatePath"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "const defaultNotificationPreferences: INotificationPreferences = {\r\n  methods: [\"email\", \"sms\"],\r\n  "
        },
        {
          "type": "email",
          "line": 9,
          "rule": "const defaultNotificationPreferences: INotificationPreferences = {\r\n  methods: [\"email\", \"sms\"],\r\n  "
        },
        {
          "type": "email",
          "line": 9,
          "rule": "defaultNotificationPreferences: INotificationPreferences = {\r\n  methods: [\"email\", \"sms\"],\r\n  langua"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "{\r\n  methods: [\"email\", \"sms\"],\r\n  language: \"he\",\r\n}"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "methods: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 69,
          "rule": "revalidatePath(\"/dashboard\", \"layout\")"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "revalidatePath(\"/dashboard\", \"layout\")"
        },
        {
          "type": "general",
          "line": 69,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 85,
          "rule": "if (!preferences.methods || preferences.methods.length === 0) {\r\n      return { success: false, mess"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "{\r\n      return { success: false, message: \"At least one notification method is required\" }\r\n    }"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "return { success: false, message: \"At least one notification method is required\" }"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "{ success: false, message: \"At least one notification method is required\" }"
        },
        {
          "type": "required",
          "line": 87,
          "rule": "message: \"At least one notification method is required\""
        },
        {
          "type": "required",
          "line": 88,
          "rule": "\"At least one notification method is required\""
        },
        {
          "type": "email",
          "line": 89,
          "rule": "if (!preferences.methods.every((method) => [\"email\", \"sms\"].includes(method))) {\r\n      return { suc"
        },
        {
          "type": "email",
          "line": 89,
          "rule": "!preferences.methods.every((method) => [\"email\", \"sms\"].includes(method))"
        },
        {
          "type": "email",
          "line": 89,
          "rule": "preferences.methods.every((method) => [\"email\", \"sms\"].includes(method))"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "(method) => [\"email\", \"sms\"].includes(method)"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "[\"email\", \"sms\"].includes(method)"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "[\"email\", \"sms\"].includes"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 90,
          "rule": "\"email\""
        },
        {
          "type": "general",
          "line": 106,
          "rule": "revalidatePath(\"/dashboard\", \"layout\")"
        },
        {
          "type": "general",
          "line": 106,
          "rule": "revalidatePath(\"/dashboard\", \"layout\")"
        },
        {
          "type": "general",
          "line": 106,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 15,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 53,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 82,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\tabs\\professional-basic-info-tab.tsx",
      "lines": 413,
      "complexity": 19,
      "conditionals": [
        {
          "type": "if",
          "line": 69,
          "condition": "newStatus === professional.status && adminNote === professional.adminNotes",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "!dateString",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalBasicInfoTab",
          "line": 34,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalBasicInfoTabProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusConfig",
          "line": 46,
          "parameters": [
            {
              "name": "status",
              "type": "ProfessionalStatus"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleStatusUpdate",
          "line": 69,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "formatDate",
          "line": 77,
          "parameters": [
            {
              "name": "dateString",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 167,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 175,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 181,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 243,
          "parameters": [
            {
              "name": "cert",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 20,
          "rule": "interface Professional {\r\n  _id: string\r\n  userId: {\r\n    _id: string\r\n    name: string\r\n    email: "
        },
        {
          "type": "email",
          "line": 21,
          "rule": "userId: {\r\n    _id: string\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    gender: stri"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "{\r\n    _id: string\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    gender: string\r\n    "
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 106,
          "rule": "<div className=\"flex items-center gap-2 mt-1\">\r\n                <Mail className=\"w-4 h-4 text-muted-"
        },
        {
          "type": "email",
          "line": 109,
          "rule": "<span>{professional.userId.email}</span>"
        },
        {
          "type": "email",
          "line": 109,
          "rule": "{professional.userId.email}"
        },
        {
          "type": "email",
          "line": 109,
          "rule": "professional.userId.email"
        },
        {
          "type": "email",
          "line": 110,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 113,
          "rule": "<div className=\"flex items-center gap-2 mt-1\">\r\n                <Phone className=\"w-4 h-4 text-muted"
        },
        {
          "type": "phone",
          "line": 116,
          "rule": "<span>{professional.userId.phone}</span>"
        },
        {
          "type": "phone",
          "line": 116,
          "rule": "{professional.userId.phone}"
        },
        {
          "type": "phone",
          "line": 116,
          "rule": "professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 116,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 72,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-row.tsx",
      "lines": 419,
      "complexity": 19,
      "conditionals": [
        {
          "type": "if",
          "line": 59,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 71,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 102,
          "condition": "!dateInput",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 106,
          "condition": "isNaN(date.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "!cardNumber",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "UserSubscriptionRow",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserSubscriptionRowProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCancel",
          "line": 56,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleDelete",
          "line": 68,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleEdit",
          "line": 80,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStatusBadge",
          "line": 82,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 101,
          "parameters": [
            {
              "name": "dateInput",
              "type": "Date | string | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "maskCardNumber",
          "line": 110,
          "parameters": [
            {
              "name": "cardNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 244,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 269,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 282,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 26,
          "rule": "interface PopulatedUserSubscription extends IUserSubscription {\r\n  userId?: Pick<NextAuthUser, \"name"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "userId?: Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string } | null"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string } | null"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string }"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\">"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"name\" | \"email\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 33,
          "rule": "guestInfo?: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "{\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 33,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 34,
          "rule": "phone"
        },
        {
          "type": "general",
          "line": 100,
          "rule": "const formatDate = (dateInput?: Date | string | null): string => {\r\n    if (!dateInput) {\r\n      // "
        },
        {
          "type": "general",
          "line": 100,
          "rule": "const formatDate = (dateInput?: Date | string | null): string => {\r\n    if (!dateInput) {\r\n      // "
        },
        {
          "type": "general",
          "line": 100,
          "rule": "formatDate = (dateInput?: Date | string | null): string => {\r\n    if (!dateInput) {\r\n      // Assumi"
        },
        {
          "type": "general",
          "line": 101,
          "rule": "(dateInput?: Date | string | null): string => {\r\n    if (!dateInput) {\r\n      // Assuming purchaseDa"
        },
        {
          "type": "general",
          "line": 102,
          "rule": "{\r\n    if (!dateInput) {\r\n      // Assuming purchaseDate and expiryDate are always present as per sc"
        },
        {
          "type": "general",
          "line": 102,
          "rule": "if (!dateInput) {\r\n      // Assuming purchaseDate and expiryDate are always present as per schema,\r\n"
        },
        {
          "type": "general",
          "line": 102,
          "rule": "{\r\n      // Assuming purchaseDate and expiryDate are always present as per schema,\r\n      // but thi"
        },
        {
          "type": "email",
          "line": 130,
          "rule": "<span className=\"text-xs text-gray-500 dark:text-gray-400\">{userSubscription.userId.email}</span>"
        },
        {
          "type": "email",
          "line": 131,
          "rule": "{userSubscription.userId.email}"
        },
        {
          "type": "email",
          "line": 131,
          "rule": "userSubscription.userId.email"
        },
        {
          "type": "email",
          "line": 131,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "<span className=\"text-xs text-gray-500 dark:text-gray-400\">{userSubscription.guestInfo.email}</span>"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "{userSubscription.guestInfo.email}"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "userSubscription.guestInfo.email"
        },
        {
          "type": "email",
          "line": 142,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 143,
          "rule": "<span className=\"text-xs text-gray-500 dark:text-gray-400\">{userSubscription.guestInfo.phone}</span>"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "{userSubscription.guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "userSubscription.guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 144,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 57,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 69,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "actions\\address-actions.ts",
      "lines": 228,
      "complexity": 18,
      "conditionals": [
        {
          "type": "if",
          "line": 58,
          "condition": "!address",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 75,
          "condition": "typeof plainObj.country !== \"string\" && plainObj.country !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 96,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 111,
          "condition": "error instanceof z.ZodError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 120,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 134,
          "condition": "error instanceof z.ZodError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 142,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 152,
          "condition": "!session?.user?.id",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "addressToPlain",
          "line": 55,
          "parameters": [
            {
              "name": "address",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getUserAddresses",
          "line": 81,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "createAddress",
          "line": 93,
          "parameters": [
            {
              "name": "data",
              "type": "z.infer<typeof addressSchema>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 113,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateAddress",
          "line": 117,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "data",
              "type": "z.infer<typeof addressSchema>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 135,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "deleteAddress",
          "line": 139,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "setDefaultAddress",
          "line": 149,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { getServerSession } from \"next-auth\"\r\nimport { authOptions } from \"@/lib/aut"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 3,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 3,
          "rule": "revalidatePath"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "const addressBaseSchema = z.object({\r\n  street: z.string().min(1, \"Street is required\"),\r\n  streetNu"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "const addressBaseSchema = z.object({\r\n  street: z.string().min(1, \"Street is required\"),\r\n  streetNu"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "addressBaseSchema = z.object({\r\n  street: z.string().min(1, \"Street is required\"),\r\n  streetNumber: "
        },
        {
          "type": "required",
          "line": 11,
          "rule": "z.object({\r\n  street: z.string().min(1, \"Street is required\"),\r\n  streetNumber: z.string().min(1, \"S"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "{\r\n  street: z.string().min(1, \"Street is required\"),\r\n  streetNumber: z.string().min(1, \"Street num"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "street: z.string().min(1, \"Street is required\")"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "z.string().min(1, \"Street is required\")"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "\"Street is required\""
        },
        {
          "type": "required",
          "line": 12,
          "rule": "streetNumber: z.string().min(1, \"Street number is required\")"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "z.string().min(1, \"Street number is required\")"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "\"Street number is required\""
        },
        {
          "type": "required",
          "line": 13,
          "rule": "city: z.string().min(1, \"City is required\")"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "z.string().min(1, \"City is required\")"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "\"City is required\""
        },
        {
          "type": "required",
          "line": 22,
          "rule": "z.object({\r\n    floor: z.number().min(0, \"Floor cannot be negative\").optional(), // Made optional to"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "{\r\n    floor: z.number().min(0, \"Floor cannot be negative\").optional(), // Made optional to align wi"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "apartmentNumber: z.string().min(1, \"Apartment number is required\")"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z.string().min(1, \"Apartment number is required\")"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "\"Apartment number is required\""
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{\r\n  addressType: z.literal(\"house\"), // Assuming 'private' might also use this or have its own\r\n  h"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "houseDetails: z.object({\r\n    doorName: z.string().min(1, \"Door/House name is required\"),\r\n    entra"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "z.object({\r\n    doorName: z.string().min(1, \"Door/House name is required\"),\r\n    entrance: z.string("
        },
        {
          "type": "required",
          "line": 30,
          "rule": "{\r\n    doorName: z.string().min(1, \"Door/House name is required\"),\r\n    entrance: z.string().optiona"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "doorName: z.string().min(1, \"Door/House name is required\")"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "z.string().min(1, \"Door/House name is required\")"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "\"Door/House name is required\""
        },
        {
          "type": "required",
          "line": 34,
          "rule": "{\r\n  addressType: z.literal(\"private\"),\r\n  houseDetails: z.object({\r\n    // Re-using houseDetails fo"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "houseDetails: z.object({\r\n    // Re-using houseDetails for 'private' type\r\n    doorName: z.string()."
        },
        {
          "type": "required",
          "line": 35,
          "rule": "z.object({\r\n    // Re-using houseDetails for 'private' type\r\n    doorName: z.string().min(1, \"Door/H"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "{\r\n    // Re-using houseDetails for 'private' type\r\n    doorName: z.string().min(1, \"Door/House name"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "doorName: z.string().min(1, \"Door/House name is required\")"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "z.string().min(1, \"Door/House name is required\")"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "\"Door/House name is required\""
        },
        {
          "type": "required",
          "line": 43,
          "rule": "const hotelSchema = addressBaseSchema.extend({\r\n  addressType: z.literal(\"hotel\"),\r\n  hotelDetails: "
        },
        {
          "type": "required",
          "line": 43,
          "rule": "const hotelSchema = addressBaseSchema.extend({\r\n  addressType: z.literal(\"hotel\"),\r\n  hotelDetails: "
        },
        {
          "type": "required",
          "line": 43,
          "rule": "hotelSchema = addressBaseSchema.extend({\r\n  addressType: z.literal(\"hotel\"),\r\n  hotelDetails: z.obje"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "addressBaseSchema.extend({\r\n  addressType: z.literal(\"hotel\"),\r\n  hotelDetails: z.object({\r\n    hote"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "{\r\n  addressType: z.literal(\"hotel\"),\r\n  hotelDetails: z.object({\r\n    hotelName: z.string().min(1, "
        },
        {
          "type": "required",
          "line": 45,
          "rule": "hotelDetails: z.object({\r\n    hotelName: z.string().min(1, \"Hotel name is required\"),\r\n    roomNumbe"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "z.object({\r\n    hotelName: z.string().min(1, \"Hotel name is required\"),\r\n    roomNumber: z.string()."
        },
        {
          "type": "required",
          "line": 46,
          "rule": "{\r\n    hotelName: z.string().min(1, \"Hotel name is required\"),\r\n    roomNumber: z.string().min(1, \"R"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "hotelName: z.string().min(1, \"Hotel name is required\")"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "z.string().min(1, \"Hotel name is required\")"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "\"Hotel name is required\""
        },
        {
          "type": "required",
          "line": 47,
          "rule": "roomNumber: z.string().min(1, \"Room number is required\")"
        },
        {
          "type": "required",
          "line": 47,
          "rule": "z.string().min(1, \"Room number is required\")"
        },
        {
          "type": "required",
          "line": 47,
          "rule": "\"Room number is required\""
        },
        {
          "type": "general",
          "line": 95,
          "rule": "{\r\n  try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n"
        },
        {
          "type": "general",
          "line": 95,
          "rule": "try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n     "
        },
        {
          "type": "general",
          "line": 95,
          "rule": "{\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n      thr"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "const validatedData = addressSchema.parse(data)"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "const validatedData = addressSchema.parse(data)"
        },
        {
          "type": "general",
          "line": 98,
          "rule": "validatedData = addressSchema.parse(data)"
        },
        {
          "type": "general",
          "line": 98,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 99,
          "rule": "const fullAddress = constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 99,
          "rule": "const fullAddress = constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 99,
          "rule": "fullAddress = constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 99,
          "rule": "constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 99,
          "rule": "validatedData as Partial<IAddress>"
        },
        {
          "type": "general",
          "line": 99,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 100,
          "rule": "const addressDataWithUserAndFullAddress = {\r\n      ...validatedData,\r\n      userId: session.user.id,"
        },
        {
          "type": "general",
          "line": 100,
          "rule": "const addressDataWithUserAndFullAddress = {\r\n      ...validatedData,\r\n      userId: session.user.id,"
        },
        {
          "type": "general",
          "line": 100,
          "rule": "addressDataWithUserAndFullAddress = {\r\n      ...validatedData,\r\n      userId: session.user.id,\r\n    "
        },
        {
          "type": "general",
          "line": 101,
          "rule": "{\r\n      ...validatedData,\r\n      userId: session.user.id,\r\n      country: \"ישראל\", // Default count"
        },
        {
          "type": "general",
          "line": 101,
          "rule": "...validatedData"
        },
        {
          "type": "general",
          "line": 101,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 107,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 107,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 107,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 119,
          "rule": "{\r\n  try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n"
        },
        {
          "type": "general",
          "line": 119,
          "rule": "try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n     "
        },
        {
          "type": "general",
          "line": 119,
          "rule": "{\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.id) {\r\n      thr"
        },
        {
          "type": "general",
          "line": 122,
          "rule": "const validatedData = addressSchema.parse(data)"
        },
        {
          "type": "general",
          "line": 122,
          "rule": "const validatedData = addressSchema.parse(data)"
        },
        {
          "type": "general",
          "line": 122,
          "rule": "validatedData = addressSchema.parse(data)"
        },
        {
          "type": "general",
          "line": 122,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 123,
          "rule": "const fullAddress = constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 123,
          "rule": "const fullAddress = constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 123,
          "rule": "fullAddress = constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "constructFullAddress(validatedData as Partial<IAddress>)"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "validatedData as Partial<IAddress>"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "const addressDataWithFullAddress = {\r\n      ...validatedData,\r\n      fullAddress: fullAddress, // Ad"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "const addressDataWithFullAddress = {\r\n      ...validatedData,\r\n      fullAddress: fullAddress, // Ad"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "addressDataWithFullAddress = {\r\n      ...validatedData,\r\n      fullAddress: fullAddress, // Add the "
        },
        {
          "type": "general",
          "line": 126,
          "rule": "{\r\n      ...validatedData,\r\n      fullAddress: fullAddress, // Add the constructed fullAddress\r\n    "
        },
        {
          "type": "general",
          "line": 126,
          "rule": "...validatedData"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 130,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 130,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 130,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 156,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 156,
          "rule": "revalidatePath(\"/dashboard/member/addresses\")"
        },
        {
          "type": "general",
          "line": 156,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 82,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 95,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 119,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 141,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 151,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\role-actions.ts",
      "lines": 182,
      "complexity": 18,
      "conditionals": [
        {
          "type": "if",
          "line": 15,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 17,
          "condition": "!session.user.roles.includes(role)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 35,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 37,
          "condition": "!session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "!availableRoles.includes(role)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "!user.roles.includes(role)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 59,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 61,
          "condition": "!session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 68,
          "condition": "user.roles.length <= 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "user.roles.includes(role)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 88,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "!user.roles.includes(role)",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getAvailableRoles",
          "line": 5,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "switchActiveRole",
          "line": 10,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "addRoleToUser",
          "line": 30,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "removeRoleFromUser",
          "line": 54,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "setActiveRole",
          "line": 79,
          "parameters": [
            {
              "name": "role",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 4,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 5,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 5,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 5,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 5,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "revalidatePath(\"/dashboard\")"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "revalidatePath(\"/dashboard\")"
        },
        {
          "type": "general",
          "line": 20,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 24,
          "rule": "revalidatePath(\"/dashboard/admin\")"
        },
        {
          "type": "general",
          "line": 24,
          "rule": "revalidatePath(\"/dashboard/admin\")"
        },
        {
          "type": "general",
          "line": 24,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 24,
          "rule": "revalidatePath(\"/dashboard/profile\")"
        },
        {
          "type": "general",
          "line": 24,
          "rule": "revalidatePath(\"/dashboard/profile\")"
        },
        {
          "type": "general",
          "line": 24,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 25,
          "rule": "revalidatePath(\"/dashboard/account\")"
        },
        {
          "type": "general",
          "line": 25,
          "rule": "revalidatePath(\"/dashboard/account\")"
        },
        {
          "type": "general",
          "line": 25,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 14,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 34,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 58,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 83,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\bookings\\professional-responses-dialog.tsx",
      "lines": 292,
      "complexity": 18,
      "conditionals": [
        {
          "type": "if",
          "line": 35,
          "condition": "!open || !bookingId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "result.success && result.responses",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 48,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "switch",
          "line": 59,
          "cases": 5,
          "expression": "status"
        },
        {
          "type": "switch",
          "line": 78,
          "cases": 4,
          "expression": "method"
        }
      ],
      "functions": [
        {
          "name": "ProfessionalResponsesDialog",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalResponsesDialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "fetchResponses",
          "line": 35,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleResendNotifications",
          "line": 46,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStatusBadge",
          "line": 58,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getResponseMethodIcon",
          "line": 78,
          "parameters": [
            {
              "name": "method",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 86,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [
            {
              "name": "response",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 194,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 200,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 205,
          "parameters": [
            {
              "name": "r",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 9,
          "rule": "import { \r\n  MessageSquare, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle,\r\n  Phone,\r\n "
        },
        {
          "type": "phone",
          "line": 9,
          "rule": "{ \r\n  MessageSquare, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle,\r\n  Phone,\r\n  Smartp"
        },
        {
          "type": "phone",
          "line": 9,
          "rule": "{ \r\n  MessageSquare, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle,\r\n  Phone,\r\n  Smartp"
        },
        {
          "type": "phone",
          "line": 11,
          "rule": "Smartphone"
        },
        {
          "type": "phone",
          "line": 11,
          "rule": "Smartphone"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "interface ProfessionalResponse {\r\n  _id: string\r\n  professionalId: {\r\n    _id: string\r\n    name: str"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "professionalId: {\r\n    _id: string\r\n    name: string\r\n    phone: string\r\n    email: string\r\n  }"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "{\r\n    _id: string\r\n    name: string\r\n    phone: string\r\n    email: string\r\n  }"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phoneNumber: string"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "responseMethod?: \"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "\"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "const getResponseMethodIcon = (method?: string) => {\r\n    switch (method) {\r\n      case \"sms\":\r\n    "
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "const getResponseMethodIcon = (method?: string) => {\r\n    switch (method) {\r\n      case \"sms\":\r\n    "
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "getResponseMethodIcon = (method?: string) => {\r\n    switch (method) {\r\n      case \"sms\":\r\n        re"
        },
        {
          "type": "phone",
          "line": 78,
          "rule": "(method?: string) => {\r\n    switch (method) {\r\n      case \"sms\":\r\n        return <MessageSquare clas"
        },
        {
          "type": "phone",
          "line": 78,
          "rule": "{\r\n    switch (method) {\r\n      case \"sms\":\r\n        return <MessageSquare className=\"h-4 w-4\" />\r\n "
        },
        {
          "type": "phone",
          "line": 78,
          "rule": "switch (method) {\r\n      case \"sms\":\r\n        return <MessageSquare className=\"h-4 w-4\" />\r\n      ca"
        },
        {
          "type": "phone",
          "line": 79,
          "rule": "{\r\n      case \"sms\":\r\n        return <MessageSquare className=\"h-4 w-4\" />\r\n      case \"phone\":\r\n   "
        },
        {
          "type": "phone",
          "line": 80,
          "rule": "case \"phone\":\r\n        return <Phone className=\"h-4 w-4\" />"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "default:\r\n        return <Smartphone className=\"h-4 w-4\" />"
        },
        {
          "type": "phone",
          "line": 83,
          "rule": "return <Smartphone className=\"h-4 w-4\" />"
        },
        {
          "type": "phone",
          "line": 84,
          "rule": "<Smartphone className=\"h-4 w-4\" />"
        },
        {
          "type": "phone",
          "line": 84,
          "rule": "Smartphone"
        },
        {
          "type": "phone",
          "line": 139,
          "rule": "<div className=\"flex items-center gap-1\">\r\n                          <Phone className=\"h-4 w-4\" />\r\n"
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "{response.phoneNumber}"
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "response.phoneNumber"
        },
        {
          "type": "phone",
          "line": 141,
          "rule": "phoneNumber"
        }
      ],
      "errorHandling": [
        {
          "line": 36,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 46,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-details-modal.tsx",
      "lines": 262,
      "complexity": 18,
      "conditionals": [
        {
          "type": "if",
          "line": 35,
          "condition": "!userSubscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "!dateInput",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 40,
          "condition": "isNaN(date.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "!dateInput",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "isNaN(date.getTime())",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "UserSubscriptionDetailsModal",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserSubscriptionDetailsModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 37,
          "parameters": [
            {
              "name": "dateInput",
              "type": "Date | string | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateTime",
          "line": 43,
          "parameters": [
            {
              "name": "dateInput",
              "type": "Date | string | null"
            }
          ],
          "isAsync": false
        },
        {
          "name": "maskCardNumber",
          "line": 50,
          "parameters": [
            {
              "name": "cardNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusInfo",
          "line": 52,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DetailItem",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ label: string; value: React.ReactNode }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 218,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 17,
          "rule": "interface PopulatedUserSubscription extends IUserSubscription {\r\n  userId?: Pick<NextAuthUser, \"name"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "userId?: Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string } | null"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string } | null"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string }"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\">"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "\"name\" | \"email\""
        },
        {
          "type": "email",
          "line": 20,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 20,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "guestInfo?: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "{\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "<DetailItem\r\n                      label={t(\"common.email\")}\r\n                      value={userSubsc"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "label={t(\"common.email\")}\r\n                      value={userSubscription.userId.email}"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "label={t(\"common.email\")}"
        },
        {
          "type": "email",
          "line": 102,
          "rule": "{t(\"common.email\")}"
        },
        {
          "type": "email",
          "line": 102,
          "rule": "t(\"common.email\")"
        },
        {
          "type": "email",
          "line": 102,
          "rule": "\"common.email\""
        },
        {
          "type": "email",
          "line": 102,
          "rule": "value={userSubscription.userId.email}"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "{userSubscription.userId.email}"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "userSubscription.userId.email"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "<DetailItem\r\n                      label={t(\"common.email\")}\r\n                      value={userSubsc"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "label={t(\"common.email\")}\r\n                      value={userSubscription.guestInfo.email}"
        },
        {
          "type": "email",
          "line": 118,
          "rule": "label={t(\"common.email\")}"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "{t(\"common.email\")}"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "t(\"common.email\")"
        },
        {
          "type": "email",
          "line": 119,
          "rule": "\"common.email\""
        },
        {
          "type": "email",
          "line": 119,
          "rule": "value={userSubscription.guestInfo.email}"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "{userSubscription.guestInfo.email}"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "userSubscription.guestInfo.email"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "<DetailItem\r\n                      label={t(\"common.phone\")}\r\n                      value={userSubsc"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "label={t(\"common.phone\")}\r\n                      value={userSubscription.guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "label={t(\"common.phone\")}"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "{t(\"common.phone\")}"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "t(\"common.phone\")"
        },
        {
          "type": "phone",
          "line": 122,
          "rule": "\"common.phone\""
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "value={userSubscription.guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "{userSubscription.guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "userSubscription.guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 124,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\preferences\\treatment-preferences-modal.tsx",
      "lines": 109,
      "complexity": 18,
      "conditionals": [
        {
          "type": "if",
          "line": 30,
          "condition": "isOpen && currentPreferences",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 33,
          "condition": "isOpen && !currentPreferences && session?.user?.treatmentPreferences",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 37,
          "condition": "isOpen",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "result.success && result.treatmentPreferences",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "TreatmentPreferencesModal",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "TreatmentPreferencesModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 30,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSave",
          "line": 40,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [
            {
              "name": "value",
              "type": "ITreatmentPreferences[\"therapistGender\"]"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\translations\\i18n.tsx",
      "lines": 173,
      "complexity": 18,
      "conditionals": [
        {
          "type": "if",
          "line": 32,
          "condition": "typeof window !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 34,
          "condition": "stored === \"he\" || stored === \"en\" || stored === \"ru\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "typeof window !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "missingKeys.size === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "window.getMissingTranslations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 67,
          "condition": "typeof document !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "newDir === \"rtl\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 83,
          "condition": "current && typeof current === \"object\" && k in current",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 88,
          "condition": "!keyFound || typeof current !== \"string\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 99,
          "condition": "!context",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getDirection",
          "line": 11,
          "parameters": [
            {
              "name": "lang",
              "type": "Language"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 18,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 19,
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "I18nProvider",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "I18nProviderProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getInitialLanguage",
          "line": 32,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "setLanguage",
          "line": 41,
          "parameters": [
            {
              "name": "lang",
              "type": "Language"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [
            {
              "name": "err",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "t",
          "line": 76,
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useTranslation",
          "line": 98,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\treatments\\treatment-form.tsx",
      "lines": 417,
      "complexity": 17,
      "conditionals": [
        {
          "type": "if",
          "line": 80,
          "condition": "durations.length > 1",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 92,
          "condition": "treatment",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "TreatmentForm",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "TreatmentFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "val",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "addDuration",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "removeDuration",
          "line": 79,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateDuration",
          "line": 83,
          "parameters": [
            {
              "name": "index",
              "type": "number"
            },
            {
              "name": "field",
              "type": "string"
            },
            {
              "name": "value",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onSubmit",
          "line": 87,
          "parameters": [
            {
              "name": "values",
              "type": "TreatmentFormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 114,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 148,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 161,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 179,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 203,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 244,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 252,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 262,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 270,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 289,
          "parameters": [
            {
              "name": "duration",
              "type": "{ minutes: number; price: number; professionalPrice: number; isActive: boolean }"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 302,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 316,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 338,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 350,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 361,
          "parameters": [
            {
              "name": "checked",
              "type": "boolean"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 38,
          "rule": "const formSchema = z.object({\r\n    name: z.string().min(2, { message: t(\"treatments.errors.nameRequi"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "const formSchema = z.object({\r\n    name: z.string().min(2, { message: t(\"treatments.errors.nameRequi"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "formSchema = z.object({\r\n    name: z.string().min(2, { message: t(\"treatments.errors.nameRequired\") "
        },
        {
          "type": "required",
          "line": 39,
          "rule": "z.object({\r\n    name: z.string().min(2, { message: t(\"treatments.errors.nameRequired\") }),\r\n    cate"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "z.object({\r\n    name: z.string().min(2, { message: t(\"treatments.errors.nameRequired\") }),\r\n    cate"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "{\r\n    name: z.string().min(2, { message: t(\"treatments.errors.nameRequired\") }),\r\n    category: z.e"
        },
        {
          "type": "required",
          "line": 41,
          "rule": "category: z.enum([\"massages\", \"facial_treatments\"], { \r\n      required_error: t(\"treatments.errors.c"
        },
        {
          "type": "required",
          "line": 41,
          "rule": "z.enum([\"massages\", \"facial_treatments\"], { \r\n      required_error: t(\"treatments.errors.categoryReq"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "{ \r\n      required_error: t(\"treatments.errors.categoryRequired\") \r\n    }"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "required_error: t(\"treatments.errors.categoryRequired\")"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "required_error"
        }
      ],
      "errorHandling": [
        {
          "line": 88,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "lib\\db\\models\\working-hours.ts",
      "lines": 386,
      "complexity": 17,
      "conditionals": [
        {
          "type": "if",
          "line": 82,
          "condition": "this.isActive && !this.priceAddition",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "!this.hasPriceAddition",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 86,
          "condition": "this.hasPriceAddition && this.priceAddition && this.priceAddition.amount === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 158,
          "condition": "this.isNew && this.fixedHours.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 174,
          "condition": "!existingDay",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 189,
          "condition": "dates.length !== uniqueDates.length",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 192,
          "condition": "this.specialDateEvents",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 196,
          "condition": "eventNames.length !== uniqueEventNames.length",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 102,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [
            {
              "name": "v",
              "type": "Date[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 123,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 127,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 137,
          "parameters": [
            {
              "name": "v",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 146,
          "parameters": [
            {
              "name": "v",
              "type": "IFixedHours[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 174,
          "parameters": [
            {
              "name": "day",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 185,
          "parameters": [
            {
              "name": "a",
              "type": "any"
            },
            {
              "name": "b",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 188,
          "parameters": [
            {
              "name": "sd",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 194,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 52,
          "rule": "description: {\n      // Added description to schema\n      type: String,\n      maxlength: 100,\n    }"
        },
        {
          "type": "general",
          "line": 53,
          "rule": "{\n      // Added description to schema\n      type: String,\n      maxlength: 100,\n    }"
        },
        {
          "type": "required",
          "line": 55,
          "rule": "const FixedHoursSchema = new Schema<IFixedHours>({\n  dayOfWeek: {\n    type: Number,\n    required: tr"
        },
        {
          "type": "required",
          "line": 55,
          "rule": "const FixedHoursSchema = new Schema<IFixedHours>({\n  dayOfWeek: {\n    type: Number,\n    required: tr"
        },
        {
          "type": "required",
          "line": 55,
          "rule": "FixedHoursSchema = new Schema<IFixedHours>({\n  dayOfWeek: {\n    type: Number,\n    required: true,\n  "
        },
        {
          "type": "required",
          "line": 55,
          "rule": "new Schema<IFixedHours>({\n  dayOfWeek: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: "
        },
        {
          "type": "required",
          "line": 56,
          "rule": "{\n  dayOfWeek: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 6,\n  },\n  isActive: {\n  "
        },
        {
          "type": "required",
          "line": 56,
          "rule": "dayOfWeek: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 6,\n  }"
        },
        {
          "type": "required",
          "line": 56,
          "rule": "{\n    type: Number,\n    required: true,\n    min: 0,\n    max: 6,\n  }"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "required"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "startTime: {\n    type: String,\n    default: \"09:00\",\n    validate: {\n      validator: (v: string) =>"
        },
        {
          "type": "general",
          "line": 59,
          "rule": "{\n    type: String,\n    default: \"09:00\",\n    validate: {\n      validator: (v: string) => /^([0-1]?["
        },
        {
          "type": "general",
          "line": 60,
          "rule": "validate: {\n      validator: (v: string) => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n      messa"
        },
        {
          "type": "general",
          "line": 60,
          "rule": "validate"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "endTime: {\n    type: String,\n    default: \"17:00\",\n    validate: {\n      validator: (v: string) => /"
        },
        {
          "type": "general",
          "line": 63,
          "rule": "{\n    type: String,\n    default: \"17:00\",\n    validate: {\n      validator: (v: string) => /^([0-1]?["
        },
        {
          "type": "general",
          "line": 64,
          "rule": "validate: {\n      validator: (v: string) => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n      messa"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "validate"
        },
        {
          "type": "general",
          "line": 74,
          "rule": "cutoffTime: {\n    type: String,\n    validate: {\n      validator: (v: string) => !v || /^([0-1]?[0-9]"
        },
        {
          "type": "general",
          "line": 75,
          "rule": "{\n    type: String,\n    validate: {\n      validator: (v: string) => !v || /^([0-1]?[0-9]|2[0-3]):[0-"
        },
        {
          "type": "general",
          "line": 75,
          "rule": "validate: {\n      validator: (v: string) => !v || /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n     "
        },
        {
          "type": "general",
          "line": 75,
          "rule": "validate"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "const SpecialDateSchema = new Schema<ISpecialDate>({\n  name: {\n    type: String,\n    required: true,"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "const SpecialDateSchema = new Schema<ISpecialDate>({\n  name: {\n    type: String,\n    required: true,"
        },
        {
          "type": "required",
          "line": 91,
          "rule": "SpecialDateSchema = new Schema<ISpecialDate>({\n  name: {\n    type: String,\n    required: true,\n    m"
        },
        {
          "type": "required",
          "line": 92,
          "rule": "new Schema<ISpecialDate>({\n  name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n  },\n"
        },
        {
          "type": "required",
          "line": 92,
          "rule": "{\n  name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n  },\n  date: {\n    type: Date,"
        },
        {
          "type": "required",
          "line": 92,
          "rule": "name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n  }"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "{\n    type: String,\n    required: true,\n    maxlength: 100,\n  }"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 93,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 94,
          "rule": "date: {\n    type: Date,\n    required: true,\n  }"
        },
        {
          "type": "required",
          "line": 94,
          "rule": "{\n    type: Date,\n    required: true,\n  }"
        },
        {
          "type": "required",
          "line": 94,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 94,
          "rule": "required"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "startTime: {\n    type: String,\n    default: \"09:00\",\n    validate: {\n      validator: (v: string) =>"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "{\n    type: String,\n    default: \"09:00\",\n    validate: {\n      validator: (v: string) => /^([0-1]?["
        },
        {
          "type": "general",
          "line": 97,
          "rule": "validate: {\n      validator: (v: string) => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n      messa"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "validate"
        },
        {
          "type": "general",
          "line": 100,
          "rule": "endTime: {\n    type: String,\n    default: \"17:00\",\n    validate: {\n      validator: (v: string) => /"
        },
        {
          "type": "general",
          "line": 100,
          "rule": "{\n    type: String,\n    default: \"17:00\",\n    validate: {\n      validator: (v: string) => /^([0-1]?["
        },
        {
          "type": "general",
          "line": 101,
          "rule": "validate: {\n      validator: (v: string) => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n      messa"
        },
        {
          "type": "general",
          "line": 101,
          "rule": "validate"
        },
        {
          "type": "required",
          "line": 108,
          "rule": "const SpecialDateEventSchema = new Schema<ISpecialDateEvent>({\n  name: {\n    type: String,\n    requi"
        },
        {
          "type": "required",
          "line": 108,
          "rule": "const SpecialDateEventSchema = new Schema<ISpecialDateEvent>({\n  name: {\n    type: String,\n    requi"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "SpecialDateEventSchema = new Schema<ISpecialDateEvent>({\n  name: {\n    type: String,\n    required: t"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "new Schema<ISpecialDateEvent>({\n  name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "{\n  name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n  },\n  description: {\n    type"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n  }"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "{\n    type: String,\n    required: true,\n    maxlength: 100,\n  }"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 117,
          "rule": "dates: {\n    type: [Date],\n    required: true,\n    validate: {\n      validator: (v: Date[]) => v.len"
        },
        {
          "type": "required",
          "line": 117,
          "rule": "{\n    type: [Date],\n    required: true,\n    validate: {\n      validator: (v: Date[]) => v.length > 0"
        },
        {
          "type": "required",
          "line": 117,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 117,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 118,
          "rule": "validate: {\n      validator: (v: Date[]) => v.length > 0,\n      message: \"At least one date is requi"
        },
        {
          "type": "general",
          "line": 118,
          "rule": "validate"
        },
        {
          "type": "required",
          "line": 118,
          "rule": "{\n      validator: (v: Date[]) => v.length > 0,\n      message: \"At least one date is required\",\n    "
        },
        {
          "type": "required",
          "line": 119,
          "rule": "message: \"At least one date is required\""
        },
        {
          "type": "required",
          "line": 119,
          "rule": "\"At least one date is required\""
        },
        {
          "type": "general",
          "line": 121,
          "rule": "startTime: {\n    type: String,\n    default: \"09:00\",\n    validate: {\n      validator: (v: string) =>"
        },
        {
          "type": "general",
          "line": 122,
          "rule": "{\n    type: String,\n    default: \"09:00\",\n    validate: {\n      validator: (v: string) => /^([0-1]?["
        },
        {
          "type": "general",
          "line": 123,
          "rule": "validate: {\n      validator: (v: string) => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n      messa"
        },
        {
          "type": "general",
          "line": 123,
          "rule": "validate"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "endTime: {\n    type: String,\n    default: \"17:00\",\n    validate: {\n      validator: (v: string) => /"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "{\n    type: String,\n    default: \"17:00\",\n    validate: {\n      validator: (v: string) => /^([0-1]?["
        },
        {
          "type": "general",
          "line": 127,
          "rule": "validate: {\n      validator: (v: string) => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n      messa"
        },
        {
          "type": "general",
          "line": 127,
          "rule": "validate"
        },
        {
          "type": "general",
          "line": 136,
          "rule": "cutoffTime: {\n    type: String,\n    validate: {\n      validator: (v: string) => !v || /^([0-1]?[0-9]"
        },
        {
          "type": "general",
          "line": 136,
          "rule": "{\n    type: String,\n    validate: {\n      validator: (v: string) => !v || /^([0-1]?[0-9]|2[0-3]):[0-"
        },
        {
          "type": "general",
          "line": 137,
          "rule": "validate: {\n      validator: (v: string) => !v || /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),\n     "
        },
        {
          "type": "general",
          "line": 137,
          "rule": "validate"
        },
        {
          "type": "general",
          "line": 143,
          "rule": "const WorkingHoursSettingsSchema = new Schema<IWorkingHoursSettings>(\n  {\n    fixedHours: {\n      ty"
        },
        {
          "type": "general",
          "line": 143,
          "rule": "const WorkingHoursSettingsSchema = new Schema<IWorkingHoursSettings>(\n  {\n    fixedHours: {\n      ty"
        },
        {
          "type": "general",
          "line": 143,
          "rule": "WorkingHoursSettingsSchema = new Schema<IWorkingHoursSettings>(\n  {\n    fixedHours: {\n      type: [F"
        },
        {
          "type": "general",
          "line": 143,
          "rule": "new Schema<IWorkingHoursSettings>(\n  {\n    fixedHours: {\n      type: [FixedHoursSchema],\n      defau"
        },
        {
          "type": "general",
          "line": 144,
          "rule": "{\n    fixedHours: {\n      type: [FixedHoursSchema],\n      default: [],\n      validate: {\n        val"
        },
        {
          "type": "general",
          "line": 144,
          "rule": "fixedHours: {\n      type: [FixedHoursSchema],\n      default: [],\n      validate: {\n        validator"
        },
        {
          "type": "general",
          "line": 144,
          "rule": "{\n      type: [FixedHoursSchema],\n      default: [],\n      validate: {\n        validator: (v: IFixed"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "validate: {\n        validator: (v: IFixedHours[]) => v.length === 7,\n        message: \"Fixed hours m"
        },
        {
          "type": "general",
          "line": 145,
          "rule": "validate"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\utils\\utils.ts",
      "lines": 106,
      "complexity": 17,
      "conditionals": [
        {
          "type": "if",
          "line": 12,
          "condition": "!date",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 14,
          "condition": "isNaN(d.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 35,
          "condition": "amount === undefined || amount === null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 40,
          "condition": "isNaN(numericAmount)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "language === \"he\" && currency === \"ILS\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 47,
          "condition": "language === \"en\" && currency === \"USD\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 49,
          "condition": "language === \"en\" && currency === \"EUR\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 64,
          "condition": "isNaN(d.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "isNaN(d.getTime())",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "cn",
          "line": 2,
          "parameters": [
            {
              "name": "inputs",
              "type": "ClassValue[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 4,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            },
            {
              "name": "language",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatCurrency",
          "line": 25,
          "parameters": [
            {
              "name": "amount",
              "type": "number | undefined | null"
            },
            {
              "name": "currency",
              "type": "any"
            },
            {
              "name": "language",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateIsraeli",
          "line": 62,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatTimeIsraeli",
          "line": 70,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDateTimeIsraeli",
          "line": 76,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 16,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 51,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\professional-booking-view-actions.ts",
      "lines": 148,
      "complexity": 16,
      "conditionals": [
        {
          "type": "if",
          "line": 33,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"professional\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 34,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 39,
          "condition": "!mongoose.Types.ObjectId.isValid(bookingId)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 58,
          "condition": "!rawBooking",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "rawBooking.treatmentId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "treatmentDoc.pricingType === \"duration_based\" && rawBooking.selectedDurationId && treatmentDoc.durations",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "selectedDuration",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 98,
          "condition": "rawBooking.userId &&\r\n      (isAssignedToCurrentPro || isAdmin || rawBooking.status === \"in_process\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getBookingByIdForProfessional",
          "line": 28,
          "parameters": [
            {
              "name": "bookingId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 93,
          "parameters": [
            {
              "name": "d",
              "type": "ITreatmentDuration"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 20,
          "rule": "userId?: {\r\n    // Client details - only show if professional is assigned or admin\r\n    _id: Types.O"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "{\r\n    // Client details - only show if professional is assigned or admin\r\n    _id: Types.ObjectId\r\n"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "{\r\n    // Client details - only show if professional is assigned or admin\r\n    _id: Types.ObjectId\r\n"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email?: string"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone?: string"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "{ userId: Pick<IUser, \"_id\" | \"name\" | \"email\" | \"phone\"> | null }"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "userId: Pick<IUser, \"_id\" | \"name\" | \"email\" | \"phone\"> | null"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "Pick<IUser, \"_id\" | \"name\" | \"email\" | \"phone\"> | null"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "Pick<IUser, \"_id\" | \"name\" | \"email\" | \"phone\">"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "\"_id\" | \"name\" | \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 55,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 55,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 55,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 55,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 56,
          "rule": "{\r\n        // Populate client details\r\n        path: \"userId\",\r\n        select: \"name email phone\",\r"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "select: \"name email phone\""
        },
        {
          "type": "email",
          "line": 57,
          "rule": "\"name email phone\""
        },
        {
          "type": "email",
          "line": 101,
          "rule": "bookingForPro.userId = {\r\n        _id: rawBooking.userId._id as Types.ObjectId,\r\n        name: rawBo"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "bookingForPro.userId = {\r\n        _id: rawBooking.userId._id as Types.ObjectId,\r\n        name: rawBo"
        },
        {
          "type": "email",
          "line": 105,
          "rule": "{\r\n        _id: rawBooking.userId._id as Types.ObjectId,\r\n        name: rawBooking.userId.name,\r\n   "
        },
        {
          "type": "email",
          "line": 107,
          "rule": "email: rawBooking.userId.email"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 107,
          "rule": "rawBooking.userId.email"
        },
        {
          "type": "email",
          "line": 108,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "phone: rawBooking.userId.phone"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "rawBooking.userId.phone"
        },
        {
          "type": "phone",
          "line": 108,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 38,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\subscription-actions.ts",
      "lines": 327,
      "complexity": 16,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "error instanceof z.ZodError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 49,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 68,
          "condition": "!subscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "error instanceof z.ZodError",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 80,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "!subscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 96,
          "condition": "options.isActive !== undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 97,
          "condition": "options.search",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 104,
          "condition": "options.sort",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 126,
          "condition": "!subscription",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 138,
          "condition": "!session?.user?.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 142,
          "condition": "!subscription",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "createSubscription",
          "line": 19,
          "parameters": [
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateSubscription",
          "line": 46,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteSubscription",
          "line": 77,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getSubscriptions",
          "line": 90,
          "parameters": [
            {
              "name": "options",
              "type": "{\n    isActive?: boolean\n    search?: string\n    sort?: string\n    page?: number\n    limit?: number\n  }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 114,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getSubscriptionById",
          "line": 122,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "toggleSubscriptionStatus",
          "line": 135,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getAllTreatments",
          "line": 152,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 159,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getActiveSubscriptions",
          "line": 165,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 172,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getActiveSubscriptionsForPurchase",
          "line": 178,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 186,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport { getServerSession } from \"next-aut"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { revalidatePath } from \"next/cache\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ revalidatePath }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 33,
          "rule": "const validatedData = subscriptionSchema.parse({\n      name,\n      description,\n      quantity,\n    "
        },
        {
          "type": "general",
          "line": 33,
          "rule": "const validatedData = subscriptionSchema.parse({\n      name,\n      description,\n      quantity,\n    "
        },
        {
          "type": "general",
          "line": 34,
          "rule": "validatedData = subscriptionSchema.parse({\n      name,\n      description,\n      quantity,\n      bonu"
        },
        {
          "type": "general",
          "line": 34,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 37,
          "rule": "const subscription = new Subscription(validatedData)"
        },
        {
          "type": "general",
          "line": 37,
          "rule": "const subscription = new Subscription(validatedData)"
        },
        {
          "type": "general",
          "line": 37,
          "rule": "subscription = new Subscription(validatedData)"
        },
        {
          "type": "general",
          "line": 38,
          "rule": "new Subscription(validatedData)"
        },
        {
          "type": "general",
          "line": 38,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 39,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 39,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 39,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "const validatedData = subscriptionSchema.parse({\n      name,\n      description,\n      quantity,\n    "
        },
        {
          "type": "general",
          "line": 61,
          "rule": "const validatedData = subscriptionSchema.parse({\n      name,\n      description,\n      quantity,\n    "
        },
        {
          "type": "general",
          "line": 61,
          "rule": "validatedData = subscriptionSchema.parse({\n      name,\n      description,\n      quantity,\n      bonu"
        },
        {
          "type": "general",
          "line": 61,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "const subscription = await Subscription.findByIdAndUpdate(\n      id,\n      { ...validatedData, updat"
        },
        {
          "type": "general",
          "line": 64,
          "rule": "const subscription = await Subscription.findByIdAndUpdate(\n      id,\n      { ...validatedData, updat"
        },
        {
          "type": "general",
          "line": 65,
          "rule": "subscription = await Subscription.findByIdAndUpdate(\n      id,\n      { ...validatedData, updatedAt: "
        },
        {
          "type": "general",
          "line": 65,
          "rule": "await Subscription.findByIdAndUpdate(\n      id,\n      { ...validatedData, updatedAt: new Date() },\n "
        },
        {
          "type": "general",
          "line": 66,
          "rule": "Subscription.findByIdAndUpdate(\n      id,\n      { ...validatedData, updatedAt: new Date() },\n      {"
        },
        {
          "type": "general",
          "line": 66,
          "rule": "{ ...validatedData, updatedAt: new Date() }"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "...validatedData"
        },
        {
          "type": "general",
          "line": 67,
          "rule": "validatedData"
        },
        {
          "type": "general",
          "line": 70,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 70,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 70,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 86,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 86,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 86,
          "rule": "revalidatePath"
        },
        {
          "type": "general",
          "line": 146,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 146,
          "rule": "revalidatePath(\"/dashboard/admin/subscriptions\")"
        },
        {
          "type": "general",
          "line": 146,
          "rule": "revalidatePath"
        }
      ],
      "errorHandling": [
        {
          "line": 20,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 48,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 78,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 94,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 124,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 137,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 153,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 167,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 179,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\professionals-management.tsx",
      "lines": 448,
      "complexity": 16,
      "conditionals": [
        {
          "type": "if",
          "line": 53,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 69,
          "condition": "pagination.page !== 1",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 99,
          "condition": "!dateString",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 109,
          "condition": "loading && professionals.length === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalsManagement",
          "line": 30,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "fetchProfessionals",
          "line": 47,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 68,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 69,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRowClick",
          "line": 76,
          "parameters": [
            {
              "name": "professional",
              "type": "Professional"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleModalClose",
          "line": 79,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStatusBadge",
          "line": 82,
          "parameters": [
            {
              "name": "status",
              "type": "ProfessionalStatus"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 98,
          "parameters": [
            {
              "name": "dateString",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatCurrency",
          "line": 101,
          "parameters": [
            {
              "name": "amount",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "p",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 106,
          "parameters": [
            {
              "name": "p",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [
            {
              "name": "p",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 113,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 179,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 183,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 200,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 233,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 255,
          "parameters": [
            {
              "name": "professional",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 258,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 305,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 309,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 315,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 321,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 21,
          "rule": "interface Professional {\r\n  _id: string\r\n  userId: {\r\n    _id: string\r\n    name: string\r\n    email: "
        },
        {
          "type": "email",
          "line": 22,
          "rule": "userId: {\r\n    _id: string\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    gender: stri"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "{\r\n    _id: string\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    gender: string\r\n  }"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 267,
          "rule": "<TableCell>\r\n                      <div className=\"space-y-1\">\r\n                        <div classNa"
        },
        {
          "type": "email",
          "line": 268,
          "rule": "<div className=\"space-y-1\">\r\n                        <div className=\"text-sm\">{professional.userId.e"
        },
        {
          "type": "email",
          "line": 269,
          "rule": "<div className=\"text-sm\">{professional.userId.email}</div>"
        },
        {
          "type": "email",
          "line": 269,
          "rule": "{professional.userId.email}"
        },
        {
          "type": "email",
          "line": 269,
          "rule": "professional.userId.email"
        },
        {
          "type": "email",
          "line": 270,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 270,
          "rule": "<div className=\"text-sm text-muted-foreground\">{professional.userId.phone}</div>"
        },
        {
          "type": "phone",
          "line": 271,
          "rule": "{professional.userId.phone}"
        },
        {
          "type": "phone",
          "line": 271,
          "rule": "professional.userId.phone"
        },
        {
          "type": "phone",
          "line": 272,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 48,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\landing\\hero.tsx",
      "lines": 231,
      "complexity": 16,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 9,
          "cases": 5,
          "expression": "action"
        },
        {
          "type": "switch",
          "line": 21,
          "cases": 8,
          "expression": "action"
        },
        {
          "type": "if",
          "line": 23,
          "condition": "isMember",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 25,
          "condition": "isMember",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 28,
          "condition": "isMember",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 40,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "isMember",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "isProfessional",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 102,
          "condition": "isPartner",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 110,
          "condition": "isAdmin",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "LandingHero",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleButtonClick",
          "line": 8,
          "parameters": [
            {
              "name": "action",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderButtons",
          "line": 39,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 84,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 107,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 114,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\coupons-columns.tsx",
      "lines": 147,
      "complexity": 15,
      "conditionals": [
        {
          "type": "if",
          "line": 21,
          "condition": "!partner",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 22,
          "condition": "typeof partner === \"string\"",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 29,
          "cases": 5,
          "expression": "status"
        }
      ],
      "functions": [
        {
          "name": "getPartnerName",
          "line": 20,
          "parameters": [
            {
              "name": "partner",
              "type": "any"
            },
            {
              "name": "t",
              "type": "TFunction"
            }
          ],
          "isAsync": false
        },
        {
          "name": "StatusBadge",
          "line": 27,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ status: string; t: TFunction; dir: \"ltr\" | \"rtl\" }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "columns",
          "line": 53,
          "parameters": [
            {
              "name": "unknown",
              "type": "CouponColumnsProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 87,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 89,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 24,
          "rule": "return partner.name || partner.email || t(\"adminCoupons.columns.partnerUnnamed\")"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "partner.name || partner.email || t(\"adminCoupons.columns.partnerUnnamed\")"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "partner.name || partner.email"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "partner.email"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-columns.tsx",
      "lines": 163,
      "complexity": 15,
      "conditionals": [
        {
          "type": "if",
          "line": 23,
          "condition": "!partner",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 25,
          "condition": "typeof partner === \"string\"",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 31,
          "cases": 5,
          "expression": "status"
        }
      ],
      "functions": [
        {
          "name": "getPartnerName",
          "line": 22,
          "parameters": [
            {
              "name": "partner",
              "type": "any"
            },
            {
              "name": "t",
              "type": "TFunction"
            }
          ],
          "isAsync": false
        },
        {
          "name": "StatusBadge",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ status: string; t: TFunction; dir: \"ltr\" | \"rtl\" }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "columns",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "PartnerCouponBatchColumnsProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 69,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 87,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 94,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 111,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 115,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 27,
          "rule": "return partner.name || partner.email || t(\"adminPartnerCouponBatches.columns.partnerUnnamed\")"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "partner.name || partner.email || t(\"adminPartnerCouponBatches.columns.partnerUnnamed\")"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "partner.name || partner.email"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "partner.email"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\treatments\\treatments-client.tsx",
      "lines": 165,
      "complexity": 15,
      "conditionals": [
        {
          "type": "if",
          "line": 26,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 48,
          "condition": "isAddingTreatment",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "editingTreatment",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "TreatmentsClient",
          "line": 15,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 25,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleAddSuccess",
          "line": 31,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleEditSuccess",
          "line": 34,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleCancel",
          "line": 38,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 83,
          "parameters": [
            {
              "name": "category",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 91,
          "parameters": [
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 116,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 118,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\notifications\\notification-utils.ts",
      "lines": 151,
      "complexity": 15,
      "conditionals": [
        {
          "type": "if",
          "line": 23,
          "condition": "cleaned.startsWith(\"972\") || cleaned.startsWith(\"+972\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 27,
          "condition": "withoutCountry.length === 10",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "cleaned.startsWith(\"1\") || cleaned.startsWith(\"+1\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 32,
          "condition": "withoutCountry.length === 10",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 41,
          "condition": "!email || !email.includes(\"@\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "username.length <= 2",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "digits.length <= 4",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 62,
          "condition": "!notification",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 66,
          "condition": "now - notification.timestamp > 10 * 60 * 1000",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 83,
          "condition": "process.env.NODE_ENV === \"development\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "content.code",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "generateOTPCode",
          "line": 2,
          "parameters": [
            {
              "name": "length",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "calculateOTPExpiry",
          "line": 10,
          "parameters": [
            {
              "name": "minutes",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatPhoneNumber",
          "line": 17,
          "parameters": [
            {
              "name": "phoneNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "obscureEmail",
          "line": 37,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "obscurePhone",
          "line": 46,
          "parameters": [
            {
              "name": "phone",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getDevOTP",
          "line": 58,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "type",
              "type": "\"email\" | \"phone\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "storeDevOTP",
          "line": 71,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "type",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "clearDevOTP",
          "line": 76,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "type",
              "type": "\"email\" | \"phone\""
            }
          ],
          "isAsync": false
        },
        {
          "name": "logNotification",
          "line": 80,
          "parameters": [
            {
              "name": "type",
              "type": "\"email\" | \"sms\""
            },
            {
              "name": "recipient",
              "type": "string"
            },
            {
              "name": "content",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 17,
          "rule": "export function formatPhoneNumber(phoneNumber: string): string {\r\n  // Remove all non-digit characte"
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "phoneNumber: string"
        },
        {
          "type": "phone",
          "line": 20,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 21,
          "rule": "{\r\n  // Remove all non-digit characters\r\n  const cleaned = phoneNumber.replace(/\\D/g, \"\")\r\n\r\n  // Fo"
        },
        {
          "type": "phone",
          "line": 21,
          "rule": "const cleaned = phoneNumber.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 21,
          "rule": "const cleaned = phoneNumber.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "cleaned = phoneNumber.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "phoneNumber.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "phoneNumber.replace"
        },
        {
          "type": "phone",
          "line": 22,
          "rule": "phoneNumber"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "export function obscureEmail(email: string): string {\r\n  if (!email || !email.includes(\"@\")) return "
        },
        {
          "type": "email",
          "line": 41,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "{\r\n  if (!email || !email.includes(\"@\")) return email\r\n\r\n  const [username, domain] = email.split(\"@"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "if (!email || !email.includes(\"@\")) return email"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "!email || !email.includes(\"@\")"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "!email"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "!email.includes(\"@\")"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "email.includes(\"@\")"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "email.includes"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "return email"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "const [username, domain] = email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "const [username, domain] = email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "[username, domain] = email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "email.split(\"@\")"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "email.split"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "export function obscurePhone(phone: string): string {\r\n  const digits = phone.replace(/\\D/g, \"\")\r\n  "
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "{\r\n  const digits = phone.replace(/\\D/g, \"\")\r\n  if (digits.length <= 4) return phone\r\n\r\n  const last"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "const digits = phone.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "const digits = phone.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "digits = phone.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "phone.replace(/\\D/g, \"\")"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "phone.replace"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "if (digits.length <= 4) return phone"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "return phone"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "let devNotifications: {\r\n  email: { [key: string]: { code: string; timestamp: number } };\r\n  phone: "
        },
        {
          "type": "email",
          "line": 53,
          "rule": "let devNotifications: {\r\n  email: { [key: string]: { code: string; timestamp: number } };\r\n  phone: "
        },
        {
          "type": "email",
          "line": 54,
          "rule": "devNotifications: {\r\n  email: { [key: string]: { code: string; timestamp: number } };\r\n  phone: { [k"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "{\r\n  email: { [key: string]: { code: string; timestamp: number } };\r\n  phone: { [key: string]: { cod"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "email: { [key: string]: { code: string; timestamp: number } };"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "phone: { [key: string]: { code: string; timestamp: number } };"
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "{\r\n  email: {},\r\n  phone: {},\r\n}"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "email: {}"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "phone: {}"
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "export function getDevOTP(identifier: string, type: \"email\" | \"phone\"): string | null {\r\n  const not"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "type: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 59,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 59,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 59,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 71,
          "rule": "export function storeDevOTP(identifier: string, type: \"email\" | \"phone\", code: string): void {\r\n  de"
        },
        {
          "type": "email",
          "line": 72,
          "rule": "type: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 72,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 72,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 72,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 72,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 72,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 76,
          "rule": "export function clearDevOTP(identifier: string, type: \"email\" | \"phone\"): void {\r\n  delete devNotifi"
        },
        {
          "type": "email",
          "line": 77,
          "rule": "type: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 77,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 77,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 80,
          "rule": "export function logNotification(type: \"email\" | \"sms\", recipient: string, content: any): void {\r\n  i"
        },
        {
          "type": "email",
          "line": 81,
          "rule": "type: \"email\" | \"sms\""
        },
        {
          "type": "email",
          "line": 81,
          "rule": "\"email\" | \"sms\""
        },
        {
          "type": "email",
          "line": 81,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 81,
          "rule": "\"email\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\carousel.tsx",
      "lines": 263,
      "complexity": 14,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "!context",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "!api",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "event.key === \"ArrowLeft\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 49,
          "condition": "event.key === \"ArrowRight\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 52,
          "condition": "!api || !setApi",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "!api",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useCarousel",
          "line": 21,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "api",
              "type": "CarouselApi"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "event",
              "type": "React.KeyboardEvent<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 87,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 114,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\partner-coupon-batches\\batch-coupons-modal.tsx",
      "lines": 281,
      "complexity": 14,
      "conditionals": [
        {
          "type": "if",
          "line": 37,
          "condition": "open && batch",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 57,
          "condition": "selected",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 61,
          "condition": "selectedCoupons.length === coupons.length",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 66,
          "condition": "selectedCoupons.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "result.success",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "BatchCouponsModal",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "BatchCouponsModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 36,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "loadCoupons",
          "line": 39,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleCopyCode",
          "line": 47,
          "parameters": [
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleSelectCoupon",
          "line": 56,
          "parameters": [
            {
              "name": "couponId",
              "type": "string"
            },
            {
              "name": "selected",
              "type": "boolean"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "id",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSelectAll",
          "line": 61,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleBulkToggleActive",
          "line": 65,
          "parameters": [
            {
              "name": "isActive",
              "type": "boolean"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 89,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 94,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "checked",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 103,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 115,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 171,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 181,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 209,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 39,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 47,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 67,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\ui\\carousel.tsx",
      "lines": 263,
      "complexity": 14,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "!context",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 37,
          "condition": "!api",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "event.key === \"ArrowLeft\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 48,
          "condition": "event.key === \"ArrowRight\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 52,
          "condition": "!api || !setApi",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "!api",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useCarousel",
          "line": 20,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "api",
              "type": "CarouselApi"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "event",
              "type": "React.KeyboardEvent<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 58,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 86,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 97,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 113,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "actions\\payment-method-actions.ts",
      "lines": 204,
      "complexity": 13,
      "conditionals": [
        {
          "type": "if",
          "line": 11,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 23,
          "condition": "data.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "!cardName",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "data.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "!paymentMethod",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 71,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 76,
          "condition": "!paymentMethod",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 87,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 95,
          "condition": "!paymentMethod",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 107,
          "condition": "!session?.user?.id",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getPaymentMethods",
          "line": 9,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "createPaymentMethod",
          "line": 19,
          "parameters": [
            {
              "name": "data",
              "type": "PaymentMethodFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updatePaymentMethod",
          "line": 48,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "data",
              "type": "PaymentMethodFormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deletePaymentMethod",
          "line": 69,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "setDefaultPaymentMethod",
          "line": 84,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getActivePaymentMethods",
          "line": 105,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 116,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 10,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 20,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 50,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 70,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 85,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 106,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\users\\page.tsx",
      "lines": 96,
      "complexity": 13,
      "conditionals": [
        {
          "type": "if",
          "line": 26,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminUsersPage",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "AdminUsersPageProps"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "u",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 7,
          "rule": "export interface PageUserData {\r\n  id: string\r\n  name: string | null\r\n  email: string | null\r\n  imag"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "email: string | null"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "phone?: string | null"
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "const users: PageUserData[] = usersResult.success\r\n    ? usersResult.users.map((u) => ({\r\n        .."
        },
        {
          "type": "email",
          "line": 39,
          "rule": "const users: PageUserData[] = usersResult.success\r\n    ? usersResult.users.map((u) => ({\r\n        .."
        },
        {
          "type": "email",
          "line": 40,
          "rule": "users: PageUserData[] = usersResult.success\r\n    ? usersResult.users.map((u) => ({\r\n        ...u,\r\n "
        },
        {
          "type": "email",
          "line": 40,
          "rule": "usersResult.success\r\n    ? usersResult.users.map((u) => ({\r\n        ...u,\r\n        name: u.name || n"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "usersResult.users.map((u) => ({\r\n        ...u,\r\n        name: u.name || null,\r\n        email: u.emai"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "(u) => ({\r\n        ...u,\r\n        name: u.name || null,\r\n        email: u.email || null,\r\n        im"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "({\r\n        ...u,\r\n        name: u.name || null,\r\n        email: u.email || null,\r\n        image: u."
        },
        {
          "type": "email",
          "line": 41,
          "rule": "{\r\n        ...u,\r\n        name: u.name || null,\r\n        email: u.email || null,\r\n        image: u.i"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "email: u.email || null"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "u.email || null"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "u.email"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "phone: u.phone || null"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 44,
          "rule": "u.phone || null"
        },
        {
          "type": "phone",
          "line": 44,
          "rule": "u.phone"
        },
        {
          "type": "phone",
          "line": 44,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-admin-card.tsx",
      "lines": 359,
      "complexity": 13,
      "conditionals": [
        {
          "type": "if",
          "line": 56,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 68,
          "condition": "result.success",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "UserSubscriptionAdminCard",
          "line": 43,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserSubscriptionAdminCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCancel",
          "line": 53,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleDelete",
          "line": 65,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleEdit",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStatusInfo",
          "line": 78,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 104,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 190,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 214,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 226,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 29,
          "rule": "interface PopulatedUserSubscription extends IUserSubscription {\r\n  userId?: Pick<NextAuthUser, \"name"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "userId?: Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string } | null"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string } | null"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\"> & { _id: string }"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "Pick<NextAuthUser, \"name\" | \"email\">"
        },
        {
          "type": "email",
          "line": 31,
          "rule": "\"name\" | \"email\""
        },
        {
          "type": "email",
          "line": 31,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 31,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 36,
          "rule": "guestInfo?: {\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "{\r\n    name: string\r\n    email: string\r\n    phone: string\r\n  }"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 36,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 116,
          "rule": "<p className=\"text-xs text-gray-500 dark:text-gray-400\">{userSubscription.userId.email}</p>"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "{userSubscription.userId.email}"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "userSubscription.userId.email"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 126,
          "rule": "<p className=\"text-xs text-gray-500 dark:text-gray-400\">{userSubscription.guestInfo.email}</p>"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "{userSubscription.guestInfo.email}"
        },
        {
          "type": "email",
          "line": 127,
          "rule": "userSubscription.guestInfo.email"
        },
        {
          "type": "email",
          "line": 128,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 129,
          "rule": "<p className=\"text-xs text-gray-500 dark:text-gray-400\">{userSubscription.guestInfo.phone}</p>"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "{userSubscription.guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "userSubscription.guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 130,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 54,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 66,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\common\\purchase\\purchase-navigation.tsx",
      "lines": 78,
      "complexity": 12,
      "conditionals": [],
      "functions": [
        {
          "name": "PurchaseNavigation",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseNavigationProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\gift-vouchers\\member-gift-vouchers-client.tsx",
      "lines": 306,
      "complexity": 12,
      "conditionals": [
        {
          "type": "if",
          "line": 41,
          "condition": "ownedResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 43,
          "condition": "purchasedResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 50,
          "condition": "initialOwnedVouchers.length === 0 && initialPurchasedVouchers.length === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberGiftVouchersClient",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "MemberGiftVouchersClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "refreshVouchers",
          "line": 37,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleUseVoucher",
          "line": 54,
          "parameters": [
            {
              "name": "voucher",
              "type": "GiftVoucherPlain"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleViewDetails",
          "line": 58,
          "parameters": [
            {
              "name": "voucher",
              "type": "GiftVoucherPlain"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getVoucherStats",
          "line": 61,
          "parameters": [
            {
              "name": "vouchers",
              "type": "GiftVoucherPlain[]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "StatCard",
          "line": 71,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n    icon: React.ElementType\r\n    value: number\r\n    label: string\r\n    color?: \"green\" | \"yellow\" | \"red\" | \"blue\" | \"gray\"\r\n  }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "EmptyState",
          "line": 92,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n    icon: React.ElementType\r\n    title: string\r\n    description: string\r\n    actionLabel?: string\r\n    onAction?: () => void\r\n  }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 177,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 181,
          "parameters": [
            {
              "name": "voucher",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 216,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 220,
          "parameters": [
            {
              "name": "voucher",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 228,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 38,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\reviews\\member-reviews-client.tsx",
      "lines": 241,
      "complexity": 12,
      "conditionals": [
        {
          "type": "switch",
          "line": 28,
          "cases": 4,
          "expression": "locale"
        },
        {
          "type": "if",
          "line": 70,
          "condition": "ratingFilter !== \"all\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 73,
          "condition": "isLoading",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 80,
          "condition": "error",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDate",
          "line": 26,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getLocale",
          "line": 28,
          "parameters": [
            {
              "name": "locale",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "MemberReviewsClient",
          "line": 31,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRowClick",
          "line": 59,
          "parameters": [
            {
              "name": "review",
              "type": "PopulatedReview"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCloseDetailModal",
          "line": 62,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleRefresh",
          "line": 67,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "clearAllFilters",
          "line": 68,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getActiveFiltersCount",
          "line": 70,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 100,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\validation\\booking-schemas.ts",
      "lines": 271,
      "complexity": 12,
      "conditionals": [
        {
          "type": "if",
          "line": 60,
          "condition": "data.isBookingForSomeoneElse",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "data.isBookingForSomeoneElse",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "data.isBookingForSomeoneElse",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "data.isBookingForSomeoneElse && data.recipientBirthDate",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getTodayInTimezone",
          "line": 6,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [
            {
              "name": "date",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 65,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "val",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 8,
          "rule": "export const BookingSourceSchema = z.object({\n  source: z.enum([\"new_purchase\", \"subscription_redemp"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "const BookingSourceSchema = z.object({\n  source: z.enum([\"new_purchase\", \"subscription_redemption\", "
        },
        {
          "type": "required",
          "line": 10,
          "rule": "BookingSourceSchema = z.object({\n  source: z.enum([\"new_purchase\", \"subscription_redemption\", \"gift_"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "z.object({\n  source: z.enum([\"new_purchase\", \"subscription_redemption\", \"gift_voucher_redemption\"], "
        },
        {
          "type": "required",
          "line": 10,
          "rule": "{\n  source: z.enum([\"new_purchase\", \"subscription_redemption\", \"gift_voucher_redemption\"], {\n    req"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "source: z.enum([\"new_purchase\", \"subscription_redemption\", \"gift_voucher_redemption\"], {\n    require"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "z.enum([\"new_purchase\", \"subscription_redemption\", \"gift_voucher_redemption\"], {\n    required_error:"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{\n    required_error: \"bookings.validation.sourceRequired\",\n  }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required_error: \"bookings.validation.sourceRequired\""
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "export const TreatmentSelectionSchema = z.object({\n  selectedUserSubscriptionId: z.string().optional"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "const TreatmentSelectionSchema = z.object({\n  selectedUserSubscriptionId: z.string().optional(),\n  s"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "TreatmentSelectionSchema = z.object({\n  selectedUserSubscriptionId: z.string().optional(),\n  selecte"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "z.object({\n  selectedUserSubscriptionId: z.string().optional(),\n  selectedGiftVoucherId: z.string()."
        },
        {
          "type": "required",
          "line": 15,
          "rule": "{\n  selectedUserSubscriptionId: z.string().optional(),\n  selectedGiftVoucherId: z.string().optional("
        },
        {
          "type": "required",
          "line": 17,
          "rule": "selectedTreatmentId: z.string({ required_error: \"bookings.validation.treatmentRequired\" })"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "z.string({ required_error: \"bookings.validation.treatmentRequired\" })"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{ required_error: \"bookings.validation.treatmentRequired\" }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required_error: \"bookings.validation.treatmentRequired\""
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "export const SchedulingDetailsSchema = z\n  .object({\n    bookingDate: z\n      .date({ required_error"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "const SchedulingDetailsSchema = z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"book"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "SchedulingDetailsSchema = z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.v"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n  .object({\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "{\n    bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })\n      .refi"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "bookingDate: z\n      .date({ required_error: \"bookings.validation.dateRequired\" })\n      .refine((da"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n      .date({ required_error: \"bookings.validation.dateRequired\" })\n      .refine((date) => {\n    "
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n      .date({ required_error: \"bookings.validation.dateRequired\" })\n      .refine"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\n      .date({ required_error: \"bookings.validation.dateRequired\" })"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{ required_error: \"bookings.validation.dateRequired\" }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required_error: \"bookings.validation.dateRequired\""
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "bookingTime: z.string({ required_error: \"bookings.validation.timeRequired\" })"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "z.string({ required_error: \"bookings.validation.timeRequired\" })"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "{ required_error: \"bookings.validation.timeRequired\" }"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required_error: \"bookings.validation.timeRequired\""
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "customAddressDetails: z // New: for one-time address\n      .object({\n        fullAddress: z.string({"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "z // New: for one-time address\n      .object({\n        fullAddress: z.string({ required_error: \"book"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "z // New: for one-time address\n      .object({\n        fullAddress: z.string({ required_error: \"book"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "z // New: for one-time address\n      .object({\n        fullAddress: z.string({ required_error: \"book"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "{\n        fullAddress: z.string({ required_error: \"bookings.validation.address.fullAddressRequired\" "
        },
        {
          "type": "required",
          "line": 36,
          "rule": "fullAddress: z.string({ required_error: \"bookings.validation.address.fullAddressRequired\" })"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "z.string({ required_error: \"bookings.validation.address.fullAddressRequired\" })"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "{ required_error: \"bookings.validation.address.fullAddressRequired\" }"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "required_error: \"bookings.validation.address.fullAddressRequired\""
        },
        {
          "type": "required",
          "line": 37,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "city: z.string({ required_error: \"bookings.validation.address.cityRequired\" })"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "z.string({ required_error: \"bookings.validation.address.cityRequired\" })"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "{ required_error: \"bookings.validation.address.cityRequired\" }"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "required_error: \"bookings.validation.address.cityRequired\""
        },
        {
          "type": "required",
          "line": 38,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "street: z.string({ required_error: \"bookings.validation.address.streetRequired\" })"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "z.string({ required_error: \"bookings.validation.address.streetRequired\" })"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "{ required_error: \"bookings.validation.address.streetRequired\" }"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "required_error: \"bookings.validation.address.streetRequired\""
        },
        {
          "type": "required",
          "line": 40,
          "rule": "required_error"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "recipientEmail: z.string().email(\"bookings.validation.recipientEmailInvalid\").optional()"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "z.string().email(\"bookings.validation.recipientEmailInvalid\").optional()"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "z.string().email(\"bookings.validation.recipientEmailInvalid\").optional"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "z.string().email(\"bookings.validation.recipientEmailInvalid\")"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "z.string().email"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "(data) => {\n      if (data.isBookingForSomeoneElse) {\n        // Basic phone validation, can be enha"
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "{\n      if (data.isBookingForSomeoneElse) {\n        // Basic phone validation, can be enhanced\n     "
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "if (data.isBookingForSomeoneElse) {\n        // Basic phone validation, can be enhanced\n        retur"
        },
        {
          "type": "phone",
          "line": 66,
          "rule": "{\n        // Basic phone validation, can be enhanced\n        return !!data.recipientPhone && data.re"
        },
        {
          "type": "general",
          "line": 96,
          "rule": "export const SummarySchema = z.object({\n  // This schema is now effectively empty but kept for struc"
        },
        {
          "type": "general",
          "line": 97,
          "rule": "const SummarySchema = z.object({\n  // This schema is now effectively empty but kept for structure.\n}"
        },
        {
          "type": "general",
          "line": 98,
          "rule": "SummarySchema = z.object({\n  // This schema is now effectively empty but kept for structure.\n})"
        },
        {
          "type": "general",
          "line": 98,
          "rule": "z.object({\n  // This schema is now effectively empty but kept for structure.\n})"
        },
        {
          "type": "general",
          "line": 98,
          "rule": "{\n  // This schema is now effectively empty but kept for structure.\n}"
        },
        {
          "type": "required",
          "line": 99,
          "rule": "export const PaymentDetailsSchema = z.object({\n  selectedPaymentMethodId: z.string({\n    required_er"
        },
        {
          "type": "required",
          "line": 100,
          "rule": "const PaymentDetailsSchema = z.object({\n  selectedPaymentMethodId: z.string({\n    required_error: \"b"
        },
        {
          "type": "required",
          "line": 100,
          "rule": "PaymentDetailsSchema = z.object({\n  selectedPaymentMethodId: z.string({\n    required_error: \"booking"
        },
        {
          "type": "required",
          "line": 101,
          "rule": "z.object({\n  selectedPaymentMethodId: z.string({\n    required_error: \"bookings.validation.paymentMet"
        },
        {
          "type": "required",
          "line": 101,
          "rule": "{\n  selectedPaymentMethodId: z.string({\n    required_error: \"bookings.validation.paymentMethodRequir"
        },
        {
          "type": "required",
          "line": 101,
          "rule": "selectedPaymentMethodId: z.string({\n    required_error: \"bookings.validation.paymentMethodRequired\","
        },
        {
          "type": "required",
          "line": 102,
          "rule": "z.string({\n    required_error: \"bookings.validation.paymentMethodRequired\",\n  })"
        },
        {
          "type": "required",
          "line": 102,
          "rule": "{\n    required_error: \"bookings.validation.paymentMethodRequired\",\n  }"
        },
        {
          "type": "required",
          "line": 102,
          "rule": "required_error: \"bookings.validation.paymentMethodRequired\""
        },
        {
          "type": "required",
          "line": 102,
          "rule": "required_error"
        },
        {
          "type": "required",
          "line": 143,
          "rule": "paymentDetails: z.object({\n    paymentMethodId: z.string().optional(), // Optional if fully covered\n"
        },
        {
          "type": "required",
          "line": 144,
          "rule": "z.object({\n    paymentMethodId: z.string().optional(), // Optional if fully covered\n    paymentStatu"
        },
        {
          "type": "required",
          "line": 144,
          "rule": "{\n    paymentMethodId: z.string().optional(), // Optional if fully covered\n    paymentStatus: z.enum"
        },
        {
          "type": "required",
          "line": 145,
          "rule": "paymentStatus: z.enum([\"paid\", \"pending\", \"failed\", \"not_required\", \"refunded\"])"
        },
        {
          "type": "required",
          "line": 146,
          "rule": "z.enum([\"paid\", \"pending\", \"failed\", \"not_required\", \"refunded\"])"
        },
        {
          "type": "required",
          "line": 146,
          "rule": "[\"paid\", \"pending\", \"failed\", \"not_required\", \"refunded\"]"
        },
        {
          "type": "required",
          "line": 147,
          "rule": "\"not_required\""
        },
        {
          "type": "email",
          "line": 161,
          "rule": "guestInfo: z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  "
        },
        {
          "type": "email",
          "line": 161,
          "rule": "z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  }).optional"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  }).optional"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  })"
        },
        {
          "type": "email",
          "line": 161,
          "rule": "{\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  }"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "email: z.string().email()"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "z.string().email()"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "z.string().email"
        },
        {
          "type": "email",
          "line": 162,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 162,
          "rule": "phone: z.string()"
        },
        {
          "type": "phone",
          "line": 162,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 191,
          "rule": "paymentDetails: z.object({\n    paymentMethodId: z.string().optional(), // Optional if fully covered\n"
        },
        {
          "type": "required",
          "line": 192,
          "rule": "z.object({\n    paymentMethodId: z.string().optional(), // Optional if fully covered\n    paymentStatu"
        },
        {
          "type": "required",
          "line": 192,
          "rule": "{\n    paymentMethodId: z.string().optional(), // Optional if fully covered\n    paymentStatus: z.enum"
        },
        {
          "type": "required",
          "line": 193,
          "rule": "paymentStatus: z.enum([\"paid\", \"pending\", \"failed\", \"not_required\", \"refunded\"])"
        },
        {
          "type": "required",
          "line": 194,
          "rule": "z.enum([\"paid\", \"pending\", \"failed\", \"not_required\", \"refunded\"])"
        },
        {
          "type": "required",
          "line": 194,
          "rule": "[\"paid\", \"pending\", \"failed\", \"not_required\", \"refunded\"]"
        },
        {
          "type": "required",
          "line": 195,
          "rule": "\"not_required\""
        },
        {
          "type": "email",
          "line": 209,
          "rule": "guestInfo: z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  "
        },
        {
          "type": "email",
          "line": 209,
          "rule": "z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  }).required"
        },
        {
          "type": "email",
          "line": 209,
          "rule": "z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  }).required"
        },
        {
          "type": "email",
          "line": 209,
          "rule": "z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  })"
        },
        {
          "type": "email",
          "line": 209,
          "rule": "{\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n  }"
        },
        {
          "type": "email",
          "line": 209,
          "rule": "email: z.string().email()"
        },
        {
          "type": "email",
          "line": 209,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 210,
          "rule": "z.string().email()"
        },
        {
          "type": "email",
          "line": 210,
          "rule": "z.string().email"
        },
        {
          "type": "email",
          "line": 210,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 210,
          "rule": "phone: z.string()"
        },
        {
          "type": "phone",
          "line": 210,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 211,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "actions\\password-reset-actions.ts",
      "lines": 287,
      "complexity": 11,
      "conditionals": [
        {
          "type": "if",
          "line": 16,
          "condition": "!validateEmail(email)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 23,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 52,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 74,
          "condition": "!tokenData",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 84,
          "condition": "now > tokenData.expiryDate",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 89,
          "condition": "tokenData.used",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 97,
          "condition": "!user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 117,
          "condition": "!tokenVerification.success || !tokenVerification.userId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 126,
          "condition": "!passwordValidation.isValid",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 136,
          "condition": "!updateResult",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "sendPasswordResetEmail",
          "line": 9,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            },
            {
              "name": "language",
              "type": "NotificationLanguage"
            }
          ],
          "isAsync": true
        },
        {
          "name": "verifyResetToken",
          "line": 65,
          "parameters": [
            {
              "name": "token",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "resetPasswordWithToken",
          "line": 110,
          "parameters": [
            {
              "name": "token",
              "type": "string"
            },
            {
              "name": "newPassword",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "cleanupExpiredTokens",
          "line": 151,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 1,
          "rule": "\"use server\"\r\n\r\nimport { validateEmail } from \"@/lib/auth/auth\"\r\nimport { notificationManager } from"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "import { validateEmail } from \"@/lib/auth/auth\""
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ validateEmail }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "{ validateEmail }"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validateEmail"
        },
        {
          "type": "general",
          "line": 1,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "export async function sendPasswordResetEmail(\r\n  email: string,\r\n  language: NotificationLanguage = "
        },
        {
          "type": "email",
          "line": 11,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 11,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "{\r\n  try {\r\n    console.log(`Sending password reset email to: ${email}, language: ${language}`)\r\n\r\n "
        },
        {
          "type": "email",
          "line": 14,
          "rule": "try {\r\n    console.log(`Sending password reset email to: ${email}, language: ${language}`)\r\n\r\n    //"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "{\r\n    console.log(`Sending password reset email to: ${email}, language: ${language}`)\r\n\r\n    // Val"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "console.log(`Sending password reset email to: ${email}, language: ${language}`)"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "console.log(`Sending password reset email to: ${email}, language: ${language}`)"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "`Sending password reset email to: ${email}, language: ${language}`"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "`Sending password reset email to: ${"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "email}, language: ${"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 16,
          "rule": "if (!validateEmail(email)) {\r\n      return {\r\n        success: false,\r\n        message: \"Invalid ema"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "!validateEmail(email)"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "validateEmail(email)"
        },
        {
          "type": "general",
          "line": 17,
          "rule": "validateEmail"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "{\r\n      return {\r\n        success: false,\r\n        message: \"Invalid email address\",\r\n        error"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "return {\r\n        success: false,\r\n        message: \"Invalid email address\",\r\n        error: \"INVALI"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "{\r\n        success: false,\r\n        message: \"Invalid email address\",\r\n        error: \"INVALID_EMAIL"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "message: \"Invalid email address\""
        },
        {
          "type": "email",
          "line": 18,
          "rule": "\"Invalid email address\""
        },
        {
          "type": "email",
          "line": 21,
          "rule": "const user = await User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "const user = await User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "user = await User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "await User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "{ email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "if (!user) {\r\n      // For security, don't reveal if email exists or not\r\n      return {\r\n        su"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "{\r\n      // For security, don't reveal if email exists or not\r\n      return {\r\n        success: true"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "return {\r\n        success: true,\r\n        message: \"If an account with this email exists, you will r"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "{\r\n        success: true,\r\n        message: \"If an account with this email exists, you will receive "
        },
        {
          "type": "email",
          "line": 25,
          "rule": "message: \"If an account with this email exists, you will receive a password reset link\""
        },
        {
          "type": "email",
          "line": 26,
          "rule": "\"If an account with this email exists, you will receive a password reset link\""
        },
        {
          "type": "email",
          "line": 27,
          "rule": "console.log(\"User found for password reset:\", user.name, user.email)"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "console.log(\"User found for password reset:\", user.name, user.email)"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "const recipient: EmailRecipient = {\r\n      type: \"email\",\r\n      value: email,\r\n      language,\r\n   "
        },
        {
          "type": "email",
          "line": 43,
          "rule": "const recipient: EmailRecipient = {\r\n      type: \"email\",\r\n      value: email,\r\n      language,\r\n   "
        },
        {
          "type": "email",
          "line": 44,
          "rule": "recipient: EmailRecipient = {\r\n      type: \"email\",\r\n      value: email,\r\n      language,\r\n      nam"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "{\r\n      type: \"email\",\r\n      value: email,\r\n      language,\r\n      name: user.name,\r\n    }"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 45,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 45,
          "rule": "value: email"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "console.log(\"Sending password reset email to recipient:\", recipient)"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "console.log(\"Sending password reset email to recipient:\", recipient)"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "\"Sending password reset email to recipient:\""
        },
        {
          "type": "email",
          "line": 51,
          "rule": "console.log(\"Password reset email send result:\", result)"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "console.log(\"Password reset email send result:\", result)"
        },
        {
          "type": "email",
          "line": 51,
          "rule": "\"Password reset email send result:\""
        },
        {
          "type": "email",
          "line": 52,
          "rule": "if (!result.success) {\r\n      console.error(\"Failed to send password reset email:\", result.error)\r\n "
        },
        {
          "type": "email",
          "line": 53,
          "rule": "{\r\n      console.error(\"Failed to send password reset email:\", result.error)\r\n      return {\r\n      "
        },
        {
          "type": "email",
          "line": 53,
          "rule": "console.error(\"Failed to send password reset email:\", result.error)"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "console.error(\"Failed to send password reset email:\", result.error)"
        },
        {
          "type": "email",
          "line": 53,
          "rule": "\"Failed to send password reset email:\""
        },
        {
          "type": "email",
          "line": 54,
          "rule": "return {\r\n        success: false,\r\n        message: \"Failed to send password reset email\",\r\n        "
        },
        {
          "type": "email",
          "line": 54,
          "rule": "{\r\n        success: false,\r\n        message: \"Failed to send password reset email\",\r\n        error: "
        },
        {
          "type": "email",
          "line": 55,
          "rule": "message: \"Failed to send password reset email\""
        },
        {
          "type": "email",
          "line": 55,
          "rule": "\"Failed to send password reset email\""
        },
        {
          "type": "email",
          "line": 57,
          "rule": "console.log(\"Password reset email sent successfully\")"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "console.log(\"Password reset email sent successfully\")"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "\"Password reset email sent successfully\""
        },
        {
          "type": "email",
          "line": 58,
          "rule": "return {\r\n      success: true,\r\n      message: \"If an account with this email exists, you will recei"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "{\r\n      success: true,\r\n      message: \"If an account with this email exists, you will receive a pa"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "message: \"If an account with this email exists, you will receive a password reset link\""
        },
        {
          "type": "email",
          "line": 59,
          "rule": "\"If an account with this email exists, you will receive a password reset link\""
        },
        {
          "type": "email",
          "line": 61,
          "rule": "catch (error) {\r\n    console.error(\"Error sending password reset email:\", error)\r\n    return {\r\n    "
        },
        {
          "type": "email",
          "line": 61,
          "rule": "{\r\n    console.error(\"Error sending password reset email:\", error)\r\n    return {\r\n      success: fal"
        },
        {
          "type": "email",
          "line": 61,
          "rule": "console.error(\"Error sending password reset email:\", error)"
        },
        {
          "type": "email",
          "line": 61,
          "rule": "console.error(\"Error sending password reset email:\", error)"
        },
        {
          "type": "email",
          "line": 62,
          "rule": "\"Error sending password reset email:\""
        },
        {
          "type": "general",
          "line": 123,
          "rule": "const { validatePassword, hashPassword } = await import(\"@/lib/auth/auth\")"
        },
        {
          "type": "general",
          "line": 123,
          "rule": "const { validatePassword, hashPassword } = await import(\"@/lib/auth/auth\")"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "{ validatePassword, hashPassword } = await import(\"@/lib/auth/auth\")"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "{ validatePassword, hashPassword }"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "validatePassword"
        },
        {
          "type": "general",
          "line": 124,
          "rule": "validatePassword"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "const passwordValidation = validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "const passwordValidation = validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 125,
          "rule": "passwordValidation = validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "validatePassword(newPassword)"
        },
        {
          "type": "general",
          "line": 126,
          "rule": "validatePassword"
        }
      ],
      "errorHandling": [
        {
          "line": 14,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 69,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 114,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 154,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "actions\\profile-actions.ts",
      "lines": 108,
      "complexity": 11,
      "conditionals": [
        {
          "type": "if",
          "line": 7,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 15,
          "condition": "!name",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 19,
          "condition": "day && month && year",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "isNaN(dateOfBirth.getTime())",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 26,
          "condition": "gender",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "dateOfBirth",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 30,
          "condition": "!updatedUser",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "!user",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "updateProfile",
          "line": 4,
          "parameters": [
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getUserProfile",
          "line": 36,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 40,
          "rule": "const user = await User.findById(session.user.id).select(\"-password\") as {\n      _id: { toString(): "
        },
        {
          "type": "email",
          "line": 40,
          "rule": "const user = await User.findById(session.user.id).select(\"-password\") as {\n      _id: { toString(): "
        },
        {
          "type": "email",
          "line": 41,
          "rule": "user = await User.findById(session.user.id).select(\"-password\") as {\n      _id: { toString(): string"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "await User.findById(session.user.id).select(\"-password\") as {\n      _id: { toString(): string };\n   "
        },
        {
          "type": "email",
          "line": 42,
          "rule": "{\n      _id: { toString(): string };\n      name: string;\n      email: string;\n      phone: string;\n "
        },
        {
          "type": "email",
          "line": 43,
          "rule": "email: string;"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "phone: string;"
        },
        {
          "type": "phone",
          "line": 43,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "return {\n      success: true,\n      user: {\n        id: user._id.toString(),\n        name: user.name"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "{\n      success: true,\n      user: {\n        id: user._id.toString(),\n        name: user.name,\n     "
        },
        {
          "type": "email",
          "line": 48,
          "rule": "user: {\n        id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n       "
        },
        {
          "type": "email",
          "line": 48,
          "rule": "{\n        id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n        phone"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "email: user.email"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 50,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "phone: user.phone"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 6,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 37,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\admin\\treatments\\treatment-card.tsx",
      "lines": 212,
      "complexity": 11,
      "conditionals": [],
      "functions": [
        {
          "name": "TreatmentCard",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "TreatmentCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleToggleStatus",
          "line": 28,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleDuplicate",
          "line": 39,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleDelete",
          "line": 48,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "formatPrice",
          "line": 58,
          "parameters": [
            {
              "name": "price",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 104,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 126,
          "parameters": [
            {
              "name": "duration",
              "type": "{ minutes: number; price: number; professionalPrice: number; isActive: boolean }"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 28,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 39,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 48,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\reviews\\create-review-modal.tsx",
      "lines": 222,
      "complexity": 11,
      "conditionals": [
        {
          "type": "if",
          "line": 34,
          "condition": "rating === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDateTime",
          "line": 21,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            },
            {
              "name": "language",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CreateReviewModal",
          "line": 25,
          "parameters": [
            {
              "name": "unknown",
              "type": "CreateReviewModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 33,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleClose",
          "line": 46,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "renderStars",
          "line": 48,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 141,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 36,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "lib\\db\\models\\treatment.ts",
      "lines": 139,
      "complexity": 11,
      "conditionals": [
        {
          "type": "if",
          "line": 58,
          "condition": "this.pricingType === \"fixed\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 58,
          "condition": "this.fixedPrice == null || this.fixedProfessionalPrice == null",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 64,
          "condition": "this.pricingType === \"duration_based\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 65,
          "condition": "!this.durations || this.durations.length === 0",
          "hasElse": false
        }
      ],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 17,
          "rule": "const TreatmentDurationSchema = new Schema<ITreatmentDuration>(\n  {\n    minutes: {\n      type: Numbe"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "const TreatmentDurationSchema = new Schema<ITreatmentDuration>(\n  {\n    minutes: {\n      type: Numbe"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "TreatmentDurationSchema = new Schema<ITreatmentDuration>(\n  {\n    minutes: {\n      type: Number,\n   "
        },
        {
          "type": "required",
          "line": 18,
          "rule": "new Schema<ITreatmentDuration>(\n  {\n    minutes: {\n      type: Number,\n      required: true,\n      e"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{\n    minutes: {\n      type: Number,\n      required: true,\n      enum: [60, 75, 90, 120],\n    },\n   "
        },
        {
          "type": "required",
          "line": 18,
          "rule": "minutes: {\n      type: Number,\n      required: true,\n      enum: [60, 75, 90, 120],\n    }"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "{\n      type: Number,\n      required: true,\n      enum: [60, 75, 90, 120],\n    }"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "price: {\n      type: Number,\n      required: true,\n      min: 0,\n    }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "{\n      type: Number,\n      required: true,\n      min: 0,\n    }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "professionalPrice: {\n      type: Number,\n      required: true,\n      min: 0,\n    }"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "{\n      type: Number,\n      required: true,\n      min: 0,\n    }"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "const TreatmentSchema = new Schema<ITreatment>(\n  {\n    name: {\n      type: String,\n      required: "
        },
        {
          "type": "required",
          "line": 27,
          "rule": "const TreatmentSchema = new Schema<ITreatment>(\n  {\n    name: {\n      type: String,\n      required: "
        },
        {
          "type": "required",
          "line": 27,
          "rule": "TreatmentSchema = new Schema<ITreatment>(\n  {\n    name: {\n      type: String,\n      required: true,\n"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "new Schema<ITreatment>(\n  {\n    name: {\n      type: String,\n      required: true,\n      trim: true,\n"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{\n    name: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    category: {\n   "
        },
        {
          "type": "required",
          "line": 28,
          "rule": "name: {\n      type: String,\n      required: true,\n      trim: true,\n    }"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{\n      type: String,\n      required: true,\n      trim: true,\n    }"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "category: {\n      type: String,\n      required: true,\n      enum: [\"massages\", \"facial_treatments\"],"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "{\n      type: String,\n      required: true,\n      enum: [\"massages\", \"facial_treatments\"],\n    }"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "pricingType: {\n      type: String,\n      required: true,\n      enum: [\"fixed\", \"duration_based\"],\n  "
        },
        {
          "type": "required",
          "line": 35,
          "rule": "{\n      type: String,\n      required: true,\n      enum: [\"fixed\", \"duration_based\"],\n    }"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "required"
        },
        {
          "type": "general",
          "line": 36,
          "rule": "fixedPrice: {\n      // Price for a single session if fixed\n      type: Number,\n      min: 0,\n      v"
        },
        {
          "type": "general",
          "line": 37,
          "rule": "{\n      // Price for a single session if fixed\n      type: Number,\n      min: 0,\n      validate: {\n "
        },
        {
          "type": "general",
          "line": 38,
          "rule": "validate: {\n        validator: function (this: ITreatment, value: number | undefined) {\n          re"
        },
        {
          "type": "general",
          "line": 38,
          "rule": "validate"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "message: \"Fixed price is required for fixed pricing type.\""
        },
        {
          "type": "required",
          "line": 42,
          "rule": "\"Fixed price is required for fixed pricing type.\""
        },
        {
          "type": "general",
          "line": 44,
          "rule": "fixedProfessionalPrice: {\n      type: Number,\n      min: 0,\n      validate: {\n        validator: fun"
        },
        {
          "type": "general",
          "line": 44,
          "rule": "{\n      type: Number,\n      min: 0,\n      validate: {\n        validator: function (this: ITreatment,"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validate: {\n        validator: function (this: ITreatment, value: number | undefined) {\n          re"
        },
        {
          "type": "general",
          "line": 45,
          "rule": "validate"
        },
        {
          "type": "required",
          "line": 49,
          "rule": "message: \"Fixed professional price is required for fixed pricing type.\""
        },
        {
          "type": "required",
          "line": 49,
          "rule": "\"Fixed professional price is required for fixed pricing type.\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\user.ts",
      "lines": 156,
      "complexity": 11,
      "conditionals": [
        {
          "type": "if",
          "line": 55,
          "condition": "this.isNew || !this.treatmentPreferences",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 57,
          "condition": "this.isNew || !this.notificationPreferences",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 60,
          "condition": "this.treatmentPreferences && this.treatmentPreferences.therapistGender === undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 63,
          "condition": "this.notificationPreferences && this.notificationPreferences.methods === undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 66,
          "condition": "this.notificationPreferences && this.notificationPreferences.language === undefined",
          "hasElse": false
        }
      ],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 7,
          "rule": "export interface INotificationPreferences {\n  methods: (\"email\" | \"sms\")[]\n  language: \"he\" | \"en\" |"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "methods: (\"email\" | \"sms\")[]"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "(\"email\" | \"sms\")[]"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "(\"email\" | \"sms\")"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "\"email\" | \"sms\""
        },
        {
          "type": "email",
          "line": 8,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 8,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 9,
          "rule": "export interface IUser extends Document {\n  _id: mongoose.Types.ObjectId\n  name: string\n  email: str"
        },
        {
          "type": "email",
          "line": 11,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 11,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 12,
          "rule": "phone?: string"
        },
        {
          "type": "phone",
          "line": 12,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "emailVerified?: Date"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "emailVerified"
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "phoneVerified?: Date"
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "phoneVerified"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "const UserSchema: Schema = new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, \"N"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "const UserSchema: Schema = new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, \"N"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "UserSchema: Schema = new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, \"Name is"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, \"Name is required\"],\n      tr"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "{\n    name: {\n      type: String,\n      required: [true, \"Name is required\"],\n      trim: true,\n    "
        },
        {
          "type": "required",
          "line": 20,
          "rule": "name: {\n      type: String,\n      required: [true, \"Name is required\"],\n      trim: true,\n    }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "{\n      type: String,\n      required: [true, \"Name is required\"],\n      trim: true,\n    }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required: [true, \"Name is required\"]"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "[true, \"Name is required\"]"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "\"Name is required\""
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email: {\n      type: String,\n      required: [true, \"Email is required\"],\n      unique: true,\n      "
        },
        {
          "type": "email",
          "line": 22,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "{\n      type: String,\n      required: [true, \"Email is required\"],\n      unique: true,\n      lowerca"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required: [true, \"Email is required\"]"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "[true, \"Email is required\"]"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "\"Email is required\""
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phone: {\n      type: String,\n      required: [true, \"Phone is required\"],\n      unique: true,\n      "
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{\n      type: String,\n      required: [true, \"Phone is required\"],\n      unique: true,\n      trim: t"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required: [true, \"Phone is required\"]"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "[true, \"Phone is required\"]"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "\"Phone is required\""
        },
        {
          "type": "required",
          "line": 28,
          "rule": "password: {\n      type: String,\n      required: true,\n      select: false, // Don't include password"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{\n      type: String,\n      required: true,\n      select: false, // Don't include password by defaul"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "gender: {\n      type: String,\n      enum: [\"male\", \"female\", \"other\"],\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "{\n      type: String,\n      enum: [\"male\", \"female\", \"other\"],\n      required: true,\n    }"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "dateOfBirth: {\n      type: Date,\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "{\n      type: Date,\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "image: {\n      type: String,\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "{\n      type: String,\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 37,
          "rule": "activeRole: {\n      type: String,\n      enum: Object.values(UserRole),\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "{\n      type: String,\n      enum: Object.values(UserRole),\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 40,
          "rule": "emailVerified: {\n      type: Date,\n      required: false,\n    }"
        },
        {
          "type": "email",
          "line": 40,
          "rule": "emailVerified"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "{\n      type: Date,\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "phoneVerified: {\n      type: Date,\n      required: false,\n    }"
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "phoneVerified"
        },
        {
          "type": "required",
          "line": 41,
          "rule": "{\n      type: Date,\n      required: false,\n    }"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "notificationPreferences: {\n      // New field definition\n      methods: {\n        type: [String],\n  "
        },
        {
          "type": "email",
          "line": 47,
          "rule": "{\n      // New field definition\n      methods: {\n        type: [String],\n        enum: [\"email\", \"sm"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "methods: {\n        type: [String],\n        enum: [\"email\", \"sms\"],\n        default: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "{\n        type: [String],\n        enum: [\"email\", \"sms\"],\n        default: [\"email\", \"sms\"],\n      }"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "enum: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 48,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 49,
          "rule": "default: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 49,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 49,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 57,
          "rule": "if (this.isNew || !this.notificationPreferences) {\n    this.notificationPreferences = { methods: [\"e"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "{\n    this.notificationPreferences = { methods: [\"email\", \"sms\"], language: \"he\" }\n  }"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "this.notificationPreferences = { methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "this.notificationPreferences = { methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "{ methods: [\"email\", \"sms\"], language: \"he\" }"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "methods: [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 63,
          "rule": "if (this.notificationPreferences && this.notificationPreferences.methods === undefined) {\n    this.n"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "{\n    this.notificationPreferences.methods = [\"email\", \"sms\"]\n  }"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "this.notificationPreferences.methods = [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "this.notificationPreferences.methods = [\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "[\"email\", \"sms\"]"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 71,
          "rule": "UserSchema.index({\n  name: \"text\",\n  email: \"text\",\n})"
        },
        {
          "type": "email",
          "line": 71,
          "rule": "UserSchema.index({\n  name: \"text\",\n  email: \"text\",\n})"
        },
        {
          "type": "email",
          "line": 72,
          "rule": "{\n  name: \"text\",\n  email: \"text\",\n}"
        },
        {
          "type": "email",
          "line": 72,
          "rule": "email: \"text\""
        },
        {
          "type": "email",
          "line": 72,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\addresses\\page.tsx",
      "lines": 125,
      "complexity": 10,
      "conditionals": [
        {
          "type": "if",
          "line": 23,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 34,
          "condition": "error",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AddressesPage",
          "line": 15,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleEdit",
          "line": 27,
          "parameters": [
            {
              "name": "address",
              "type": "IAddress"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleAddNew",
          "line": 29,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleModalClose",
          "line": 32,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "address",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\account\\account-form.tsx",
      "lines": 71,
      "complexity": 10,
      "conditionals": [],
      "functions": [
        {
          "name": "AccountForm",
          "line": 14,
          "parameters": [
            {
              "name": "unknown",
              "type": "AccountFormProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 7,
          "rule": "import { EmailChangeForm } from \"./email-change-form\""
        },
        {
          "type": "email",
          "line": 8,
          "rule": "\"./email-change-form\""
        },
        {
          "type": "phone",
          "line": 8,
          "rule": "import { PhoneChangeForm } from \"./phone-change-form\""
        },
        {
          "type": "phone",
          "line": 9,
          "rule": "\"./phone-change-form\""
        },
        {
          "type": "email",
          "line": 9,
          "rule": "interface User {\r\n  id: string\r\n  name: string\r\n  email: string\r\n  phone?: string\r\n  gender?: string"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 11,
          "rule": "phone?: string"
        },
        {
          "type": "phone",
          "line": 11,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "<TabsTrigger value=\"email\">\r\n              {language === \"he\" ? \"אימייל\" : language === \"ru\" ? \"Эл. "
        },
        {
          "type": "email",
          "line": 34,
          "rule": "<TabsTrigger value=\"email\">"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 34,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 34,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "<TabsTrigger value=\"phone\">\r\n              {language === \"he\" ? \"טלפון\" : language === \"ru\" ? \"Телеф"
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "<TabsTrigger value=\"phone\">"
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "value=\"phone\""
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "value=\"phone\""
        },
        {
          "type": "phone",
          "line": 38,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 43,
          "rule": "<TabsContent value=\"email\">\r\n            <EmailChangeForm currentEmail={user.email} />\r\n          </"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "<TabsContent value=\"email\">"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 43,
          "rule": "value=\"email\""
        },
        {
          "type": "email",
          "line": 43,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "<EmailChangeForm currentEmail={user.email} />"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "currentEmail={user.email}"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "currentEmail={user.email}"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "{user.email}"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "user.email"
        },
        {
          "type": "email",
          "line": 45,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "<TabsContent value=\"phone\">\r\n            <PhoneChangeForm currentPhone={user.phone} />\r\n          </"
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "<TabsContent value=\"phone\">"
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "value=\"phone\""
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "value=\"phone\""
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 46,
          "rule": "<PhoneChangeForm currentPhone={user.phone} />"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "currentPhone={user.phone}"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "currentPhone={user.phone}"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "{user.phone}"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "user.phone"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\professional-edit-modal.tsx",
      "lines": 334,
      "complexity": 10,
      "conditionals": [
        {
          "type": "if",
          "line": 76,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 98,
          "condition": "!dateString",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalEditModal",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalEditModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getStatusBadge",
          "line": 52,
          "parameters": [
            {
              "name": "status",
              "type": "ProfessionalStatus"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleStatusChange",
          "line": 71,
          "parameters": [
            {
              "name": "newStatus",
              "type": "ProfessionalStatus"
            },
            {
              "name": "adminNote",
              "type": "string"
            },
            {
              "name": "rejectionReason",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 97,
          "parameters": [
            {
              "name": "dateString",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatCurrency",
          "line": 103,
          "parameters": [
            {
              "name": "amount",
              "type": "number"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 27,
          "rule": "interface Professional {\r\n  _id: string\r\n  userId: {\r\n    _id: string\r\n    name: string\r\n    email: "
        },
        {
          "type": "email",
          "line": 28,
          "rule": "userId: {\r\n    _id: string\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    gender: stri"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "{\r\n    _id: string\r\n    name: string\r\n    email: string\r\n    phone: string\r\n    gender: string\r\n    "
        },
        {
          "type": "email",
          "line": 29,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 29,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 117,
          "rule": "<div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n              <Mail classNa"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "{professionalData.userId.email}"
        },
        {
          "type": "email",
          "line": 120,
          "rule": "professionalData.userId.email"
        },
        {
          "type": "email",
          "line": 121,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "{professionalData.userId.phone}"
        },
        {
          "type": "phone",
          "line": 123,
          "rule": "professionalData.userId.phone"
        },
        {
          "type": "phone",
          "line": 124,
          "rule": "phone"
        }
      ],
      "errorHandling": [
        {
          "line": 73,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\payment-methods\\payment-method-card.tsx",
      "lines": 198,
      "complexity": 10,
      "conditionals": [
        {
          "type": "if",
          "line": 33,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 41,
          "condition": "paymentMethod.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 53,
          "condition": "firstDigit === \"4\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 54,
          "condition": "firstDigit === \"5\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "firstDigit === \"3\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PaymentMethodCard",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaymentMethodCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleDelete",
          "line": 31,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "handleSetDefault",
          "line": 41,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "getCardType",
          "line": 52,
          "parameters": [
            {
              "name": "cardNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "maskCardNumber",
          "line": 58,
          "parameters": [
            {
              "name": "cardNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 127,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 137,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 31,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 43,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "components\\dashboard\\member\\subscriptions\\user-subscription-card.tsx",
      "lines": 184,
      "complexity": 10,
      "conditionals": [
        {
          "type": "switch",
          "line": 29,
          "cases": 5,
          "expression": "status"
        },
        {
          "type": "if",
          "line": 47,
          "condition": "!cardNumber",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "UserSubscriptionCard",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserSubscriptionCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusBadge",
          "line": 28,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "maskCardNumber",
          "line": 47,
          "parameters": [
            {
              "name": "cardNumber",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "formatDate",
          "line": 50,
          "parameters": [
            {
              "name": "date",
              "type": "Date | string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 153,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\subscriptions\\user-subscriptions-client.tsx",
      "lines": 177,
      "complexity": 10,
      "conditionals": [
        {
          "type": "switch",
          "line": 23,
          "cases": 5,
          "expression": "status"
        },
        {
          "type": "if",
          "line": 37,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 47,
          "condition": "!subscriptionToCancel",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 50,
          "condition": "result.success",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "UserSubscriptionsClient",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserSubscriptionsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getStatusBadge",
          "line": 23,
          "parameters": [
            {
              "name": "status",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleUseSubscription",
          "line": 35,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "handleCancelClick",
          "line": 45,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCancelSubscription",
          "line": 47,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 78,
          "parameters": [
            {
              "name": "subscription",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 135,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 36,
          "hasCatch": true,
          "hasFinally": true
        },
        {
          "line": 49,
          "hasCatch": true,
          "hasFinally": true
        }
      ]
    },
    {
      "path": "lib\\db\\query-builders.ts",
      "lines": 278,
      "complexity": 10,
      "conditionals": [
        {
          "type": "if",
          "line": 21,
          "condition": "excludeId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 26,
          "condition": "!phone",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "!cleaned.startsWith(\"+\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 31,
          "condition": "cleaned.startsWith(\"0\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 35,
          "condition": "cleaned.length === 9 && /^[5-9]/.test(cleaned)",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 38,
          "condition": "cleaned.length === 10 && cleaned.startsWith(\"972\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 44,
          "condition": "cleaned.startsWith(\"+9720\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "findForLogin",
          "line": 6,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "findById",
          "line": 11,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "findForProfile",
          "line": 13,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "emailExists",
          "line": 18,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            },
            {
              "name": "excludeId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "phoneExists",
          "line": 23,
          "parameters": [
            {
              "name": "phone",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "findForAdmin",
          "line": 63,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "filter",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "searchUsers",
          "line": 74,
          "parameters": [
            {
              "name": "searchTerm",
              "type": "string"
            },
            {
              "name": "limit",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "bulkUpdateRoles",
          "line": 81,
          "parameters": [
            {
              "name": "userIds",
              "type": "string[]"
            },
            {
              "name": "roles",
              "type": "string[]"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getRoleStats",
          "line": 85,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "findValidToken",
          "line": 92,
          "parameters": [
            {
              "name": "token",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "createToken",
          "line": 97,
          "parameters": [
            {
              "name": "email",
              "type": "string"
            },
            {
              "name": "token",
              "type": "string"
            },
            {
              "name": "expiresInMinutes",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "cleanupExpired",
          "line": 105,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "findValidOTP",
          "line": 110,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "type",
              "type": "string"
            },
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "createOTP",
          "line": 118,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "type",
              "type": "string"
            },
            {
              "name": "code",
              "type": "string"
            },
            {
              "name": "expiresInMinutes",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "incrementAttempts",
          "line": 128,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getRegistrationTrends",
          "line": 133,
          "parameters": [
            {
              "name": "days",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getUserDemographics",
          "line": 144,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 4,
          "rule": "export const UserQueries = {\r\n  // Find user by email for login (only required fields)\r\n  async find"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "const UserQueries = {\r\n  // Find user by email for login (only required fields)\r\n  async findForLogi"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "UserQueries = {\r\n  // Find user by email for login (only required fields)\r\n  async findForLogin(emai"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "{\r\n  // Find user by email for login (only required fields)\r\n  async findForLogin(email: string) {\r\n"
        },
        {
          "type": "email",
          "line": 6,
          "rule": "async findForLogin(email: string) {\r\n    return User.findOne({ email: email.toLowerCase() }).select("
        },
        {
          "type": "email",
          "line": 8,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "{\r\n    return User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\""
        },
        {
          "type": "email",
          "line": 8,
          "rule": "return User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\").lean("
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\").lean().exec("
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\").lean().exec"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\").lean()"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\").lean"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() }).select(\"+password email name image roles\")"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() }).select"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "User.findOne({ email: email.toLowerCase() })"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "{ email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "\"+password email name image roles\""
        },
        {
          "type": "email",
          "line": 13,
          "rule": "async findForProfile(id: string) {\r\n    return User.findById(id).select(\"name email phone gender dat"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "{\r\n    return User.findById(id).select(\"name email phone gender dateOfBirth image\").exec() // Not le"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "return User.findById(id).select(\"name email phone gender dateOfBirth image\").exec()"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "User.findById(id).select(\"name email phone gender dateOfBirth image\").exec()"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "User.findById(id).select(\"name email phone gender dateOfBirth image\").exec"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "User.findById(id).select(\"name email phone gender dateOfBirth image\")"
        },
        {
          "type": "email",
          "line": 16,
          "rule": "\"name email phone gender dateOfBirth image\""
        },
        {
          "type": "email",
          "line": 18,
          "rule": "async emailExists(email: string, excludeId?: string) {\r\n    const query: any = { email: email.toLowe"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "emailExists"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 19,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "{\r\n    const query: any = { email: email.toLowerCase() }\r\n    if (excludeId) {\r\n      query._id = { "
        },
        {
          "type": "email",
          "line": 20,
          "rule": "const query: any = { email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "const query: any = { email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "query: any = { email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "{ email: email.toLowerCase() }"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email: email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email.toLowerCase()"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email.toLowerCase"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 23,
          "rule": "async phoneExists(phone: string): Promise<boolean> {\r\n    if (!phone) return false\r\n\r\n    // Clean a"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phoneExists"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "{\r\n    if (!phone) return false\r\n\r\n    // Clean and normalize the phone number\r\n    let cleaned = ph"
        },
        {
          "type": "phone",
          "line": 26,
          "rule": "if (!phone) return false"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "!phone"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "let cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 27,
          "rule": "let cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "cleaned = phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "phone.replace(/[^\\d+]/g, \"\")"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "phone.replace"
        },
        {
          "type": "phone",
          "line": 28,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 57,
          "rule": "const user = await User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: with"
        },
        {
          "type": "phone",
          "line": 57,
          "rule": "const user = await User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: with"
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "user = await User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: withoutZer"
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "await User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n "
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n       "
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n       "
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "User.findOne({\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n       "
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "{\r\n      $or: [\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n        { phone: cle"
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "$or: [\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n        { phone: cleaned } //"
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "[\r\n        { phone: withZero },\r\n        { phone: withoutZero },\r\n        { phone: cleaned } // The "
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "{ phone: withZero }"
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "phone: withZero"
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "{ phone: withoutZero }"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "phone: withoutZero"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "{ phone: cleaned }"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "phone: cleaned"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "{\r\n    const skip = (page - 1) * limit\r\n\r\n    const query = filter || {}\r\n\r\n    const [users, total]"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "const [users, total] = await Promise.all([\r\n      User.find(query)\r\n        .select(\"name email phon"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "const [users, total] = await Promise.all([\r\n      User.find(query)\r\n        .select(\"name email phon"
        },
        {
          "type": "email",
          "line": 66,
          "rule": "[users, total] = await Promise.all([\r\n      User.find(query)\r\n        .select(\"name email phone role"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "await Promise.all([\r\n      User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n  "
        },
        {
          "type": "email",
          "line": 67,
          "rule": "Promise.all([\r\n      User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        "
        },
        {
          "type": "email",
          "line": 67,
          "rule": "[\r\n      User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ crea"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort({ createdAt: -1"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")\r\n        .sort"
        },
        {
          "type": "email",
          "line": 67,
          "rule": "User.find(query)\r\n        .select(\"name email phone roles createdAt\")"
        },
        {
          "type": "email",
          "line": 68,
          "rule": "\"name email phone roles createdAt\""
        },
        {
          "type": "email",
          "line": 74,
          "rule": "async searchUsers(searchTerm: string, limit = 10) {\r\n    return User.find({ $text: { $search: search"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "{\r\n    return User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n    "
        },
        {
          "type": "email",
          "line": 76,
          "rule": "return User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .sele"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 76,
          "rule": "User.find({ $text: { $search: searchTerm } }, { score: { $meta: \"textScore\" } })\r\n      .select(\"nam"
        },
        {
          "type": "email",
          "line": 78,
          "rule": "\"name email phone roles\""
        },
        {
          "type": "email",
          "line": 92,
          "rule": "{\r\n  // Find valid token\r\n  async findValidToken(token: string) {\r\n    return PasswordResetToken.fin"
        },
        {
          "type": "email",
          "line": 92,
          "rule": "async findValidToken(token: string) {\r\n    return PasswordResetToken.findOne({\r\n      token,\r\n      "
        },
        {
          "type": "email",
          "line": 94,
          "rule": "{\r\n    return PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n   "
        },
        {
          "type": "email",
          "line": 94,
          "rule": "return PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n    })\r\n  "
        },
        {
          "type": "email",
          "line": 94,
          "rule": "PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n    })\r\n      .se"
        },
        {
          "type": "email",
          "line": 94,
          "rule": "PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n    })\r\n      .se"
        },
        {
          "type": "email",
          "line": 94,
          "rule": "PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n    })\r\n      .se"
        },
        {
          "type": "email",
          "line": 94,
          "rule": "PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n    })\r\n      .se"
        },
        {
          "type": "email",
          "line": 94,
          "rule": "PasswordResetToken.findOne({\r\n      token,\r\n      expiresAt: { $gt: new Date() },\r\n    })\r\n      .se"
        },
        {
          "type": "email",
          "line": 96,
          "rule": "\"email expiresAt\""
        },
        {
          "type": "email",
          "line": 97,
          "rule": "async createToken(email: string, token: string, expiresInMinutes = 60) {\r\n    // Delete any existing"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 99,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "{\r\n    // Delete any existing tokens for this email\r\n    await PasswordResetToken.deleteMany({ email"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "await PasswordResetToken.deleteMany({ email }).exec()"
        },
        {
          "type": "email",
          "line": 100,
          "rule": "await PasswordResetToken.deleteMany({ email }).exec()"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "PasswordResetToken.deleteMany({ email }).exec()"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "PasswordResetToken.deleteMany({ email }).exec"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "PasswordResetToken.deleteMany({ email })"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "{ email }"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 101,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 102,
          "rule": "return PasswordResetToken.create({\r\n      email,\r\n      token,\r\n      expiresAt: new Date(Date.now()"
        },
        {
          "type": "email",
          "line": 102,
          "rule": "PasswordResetToken.create({\r\n      email,\r\n      token,\r\n      expiresAt: new Date(Date.now() + expi"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "{\r\n      email,\r\n      token,\r\n      expiresAt: new Date(Date.now() + expiresInMinutes * 60 * 1000),"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 103,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "actions\\city-actions.ts",
      "lines": 71,
      "complexity": 9,
      "conditionals": [
        {
          "type": "if",
          "line": 7,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 11,
          "condition": "searchTerm",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 25,
          "condition": "!session?.user?.id || !session.user.roles.includes(\"admin\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 33,
          "condition": "!name || isNaN(lat) || isNaN(lng)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 36,
          "condition": "existing",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getCities",
          "line": 4,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            },
            {
              "name": "limit",
              "type": "any"
            },
            {
              "name": "searchTerm",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 18,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "createCity",
          "line": 22,
          "parameters": [
            {
              "name": "formData",
              "type": "FormData"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 6,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 24,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\common\\purchase\\payment-method-selector.tsx",
      "lines": 86,
      "complexity": 9,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "paymentMethods.length === 0 && !showAddButton",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PaymentMethodSelector",
          "line": 17,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaymentMethodSelectorProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handlePaymentMethodAdded",
          "line": 24,
          "parameters": [
            {
              "name": "method",
              "type": "IPaymentMethod"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "pm",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\purchase\\purchase-card.tsx",
      "lines": 81,
      "complexity": 9,
      "conditionals": [],
      "functions": [
        {
          "name": "PurchaseCard",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseCardProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\heading.tsx",
      "lines": 42,
      "complexity": 9,
      "conditionals": [],
      "functions": [
        {
          "name": "Heading",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\use-toast.ts",
      "lines": 195,
      "complexity": 9,
      "conditionals": [
        {
          "type": "if",
          "line": 26,
          "condition": "toastTimeouts.has(toastId)",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 32,
          "cases": 4,
          "expression": "action.type"
        },
        {
          "type": "if",
          "line": 41,
          "condition": "toastId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 53,
          "condition": "action.toastId === undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "!open",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "index > -1",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "genId",
          "line": 12,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "addToRemoveQueue",
          "line": 25,
          "parameters": [
            {
              "name": "toastId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "reducer",
          "line": 32,
          "parameters": [
            {
              "name": "state",
              "type": "State"
            },
            {
              "name": "action",
              "type": "Action"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 38,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "toast",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "dispatch",
          "line": 60,
          "parameters": [
            {
              "name": "action",
              "type": "Action"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "listener",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "toast",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "Toast"
            }
          ],
          "isAsync": false
        },
        {
          "name": "update",
          "line": 65,
          "parameters": [
            {
              "name": "props",
              "type": "ToasterToast"
            }
          ],
          "isAsync": false
        },
        {
          "name": "dismiss",
          "line": 68,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useToast",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "toastId",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\reviews\\member-reviews-columns.tsx",
      "lines": 175,
      "complexity": 9,
      "conditionals": [
        {
          "type": "switch",
          "line": 12,
          "cases": 4,
          "expression": "locale"
        },
        {
          "type": "if",
          "line": 77,
          "condition": "!createdAt",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "formatDate",
          "line": 10,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getLocale",
          "line": 12,
          "parameters": [
            {
              "name": "locale",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "StarRating",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ rating: number }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 19,
          "parameters": [
            {
              "name": "star",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getMemberReviewColumns",
          "line": 26,
          "parameters": [
            {
              "name": "t",
              "type": "TFunction"
            },
            {
              "name": "locale",
              "type": "string"
            },
            {
              "name": "onViewDetails",
              "type": "(review: PopulatedReview) => void"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 30,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 68,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 75,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 93,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 95,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\reviews\\review-detail-modal.tsx",
      "lines": 146,
      "complexity": 9,
      "conditionals": [],
      "functions": [
        {
          "name": "formatDateTime",
          "line": 16,
          "parameters": [
            {
              "name": "date",
              "type": "string | Date"
            },
            {
              "name": "language",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ReviewDetailModal",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "ReviewDetailModalProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "renderStars",
          "line": 24,
          "parameters": [
            {
              "name": "rating",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\use-toast.ts",
      "lines": 195,
      "complexity": 9,
      "conditionals": [
        {
          "type": "if",
          "line": 25,
          "condition": "toastTimeouts.has(toastId)",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 32,
          "cases": 4,
          "expression": "action.type"
        },
        {
          "type": "if",
          "line": 41,
          "condition": "toastId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 53,
          "condition": "action.toastId === undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "!open",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "index > -1",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "genId",
          "line": 12,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "addToRemoveQueue",
          "line": 25,
          "parameters": [
            {
              "name": "toastId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "reducer",
          "line": 31,
          "parameters": [
            {
              "name": "state",
              "type": "State"
            },
            {
              "name": "action",
              "type": "Action"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 38,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "toast",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "dispatch",
          "line": 60,
          "parameters": [
            {
              "name": "action",
              "type": "Action"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "listener",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "toast",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "Toast"
            }
          ],
          "isAsync": false
        },
        {
          "name": "update",
          "line": 65,
          "parameters": [
            {
              "name": "props",
              "type": "ToasterToast"
            }
          ],
          "isAsync": false
        },
        {
          "name": "dismiss",
          "line": 68,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useToast",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "toastId",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "hooks\\use-toast.ts",
      "lines": 195,
      "complexity": 9,
      "conditionals": [
        {
          "type": "if",
          "line": 25,
          "condition": "toastTimeouts.has(toastId)",
          "hasElse": false
        },
        {
          "type": "switch",
          "line": 32,
          "cases": 4,
          "expression": "action.type"
        },
        {
          "type": "if",
          "line": 41,
          "condition": "toastId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 53,
          "condition": "action.toastId === undefined",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 72,
          "condition": "!open",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "index > -1",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "genId",
          "line": 12,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "addToRemoveQueue",
          "line": 25,
          "parameters": [
            {
              "name": "toastId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "reducer",
          "line": 31,
          "parameters": [
            {
              "name": "state",
              "type": "State"
            },
            {
              "name": "action",
              "type": "Action"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 38,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "toast",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "dispatch",
          "line": 60,
          "parameters": [
            {
              "name": "action",
              "type": "Action"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "listener",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "toast",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "Toast"
            }
          ],
          "isAsync": false
        },
        {
          "name": "update",
          "line": 65,
          "parameters": [
            {
              "name": "props",
              "type": "ToasterToast"
            }
          ],
          "isAsync": false
        },
        {
          "name": "dismiss",
          "line": 68,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "open",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useToast",
          "line": 74,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 76,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 77,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "toastId",
              "type": "string"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\cache\\client-cache.ts",
      "lines": 120,
      "complexity": 9,
      "conditionals": [
        {
          "type": "if",
          "line": 19,
          "condition": "typeof window === \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "typeof window === \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "!itemStr",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 31,
          "condition": "Date.now() > item.expiry",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 38,
          "condition": "typeof window === \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 44,
          "condition": "typeof window === \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 46,
          "condition": "key.startsWith(\"masu_\")",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "typeof window === \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 55,
          "condition": "!itemStr",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "setCacheItem",
          "line": 15,
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "value",
              "type": "T"
            },
            {
              "name": "expiryTime",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getCacheItem",
          "line": 24,
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "removeCacheItem",
          "line": 36,
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "clearAllCache",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "key",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateCacheExpiry",
          "line": 50,
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "newExpiryTime",
              "type": "number"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 20,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 28,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 39,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 45,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 54,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\subscriptions\\page.tsx",
      "lines": 90,
      "complexity": 8,
      "conditionals": [
        {
          "type": "if",
          "line": 28,
          "condition": "!subscriptionsResult.success || !treatmentsResult.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 53,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "SubscriptionsLoading",
          "line": 10,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "SubscriptionsData",
          "line": 25,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "obj",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SubscriptionsPage",
          "line": 51,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\data-table.tsx",
      "lines": 170,
      "complexity": 8,
      "conditionals": [],
      "functions": [
        {
          "name": "DataTable",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "DataTableProps<TData, TValue>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "column",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [
            {
              "name": "column",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "headerGroup",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [
            {
              "name": "header",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 84,
          "parameters": [
            {
              "name": "row",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 92,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 95,
          "parameters": [
            {
              "name": "cell",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 119,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 123,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\coupon-card.tsx",
      "lines": 106,
      "complexity": 8,
      "conditionals": [],
      "functions": [
        {
          "name": "CouponCard",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "CouponCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\partner\\coupons\\assigned-coupon-card.tsx",
      "lines": 151,
      "complexity": 8,
      "conditionals": [
        {
          "type": "switch",
          "line": 18,
          "cases": 5,
          "expression": "status"
        }
      ],
      "functions": [
        {
          "name": "StatusBadge",
          "line": 17,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ status: string }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AssignedCouponCard",
          "line": 42,
          "parameters": [
            {
              "name": "unknown",
              "type": "AssignedCouponCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCopyCode",
          "line": 45,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "_err",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\layout\\guest-layout.tsx",
      "lines": 162,
      "complexity": 8,
      "conditionals": [
        {
          "type": "switch",
          "line": 25,
          "cases": 3,
          "expression": "language"
        }
      ],
      "functions": [
        {
          "name": "GuestLayout",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "GuestLayoutProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getFooterText",
          "line": 25,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSignOut",
          "line": 31,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 44,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 94,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\professional-profile.ts",
      "lines": 238,
      "complexity": 8,
      "conditionals": [
        {
          "type": "if",
          "line": 111,
          "condition": "transaction.type === 'booking_payment' || transaction.type === 'bonus'",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 114,
          "condition": "transaction.type === 'penalty'",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "anonymous",
          "line": 122,
          "parameters": [
            {
              "name": "t",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 128,
          "parameters": [
            {
              "name": "area",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 37,
          "rule": "const TreatmentPricingSchema = new Schema<ITreatmentPricing>({\r\n  treatmentId: { type: Schema.Types."
        },
        {
          "type": "required",
          "line": 37,
          "rule": "const TreatmentPricingSchema = new Schema<ITreatmentPricing>({\r\n  treatmentId: { type: Schema.Types."
        },
        {
          "type": "required",
          "line": 38,
          "rule": "TreatmentPricingSchema = new Schema<ITreatmentPricing>({\r\n  treatmentId: { type: Schema.Types.Object"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "new Schema<ITreatmentPricing>({\r\n  treatmentId: { type: Schema.Types.ObjectId, ref: \"Treatment\", req"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "{\r\n  treatmentId: { type: Schema.Types.ObjectId, ref: \"Treatment\", required: true },\r\n  durationId: "
        },
        {
          "type": "required",
          "line": 39,
          "rule": "treatmentId: { type: Schema.Types.ObjectId, ref: \"Treatment\", required: true }"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"Treatment\", required: true }"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "professionalPrice: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "const WorkAreaSchema = new Schema<IWorkArea>({\r\n  cityId: { type: Schema.Types.ObjectId, ref: \"City\""
        },
        {
          "type": "required",
          "line": 44,
          "rule": "const WorkAreaSchema = new Schema<IWorkArea>({\r\n  cityId: { type: Schema.Types.ObjectId, ref: \"City\""
        },
        {
          "type": "required",
          "line": 44,
          "rule": "WorkAreaSchema = new Schema<IWorkArea>({\r\n  cityId: { type: Schema.Types.ObjectId, ref: \"City\", requ"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "new Schema<IWorkArea>({\r\n  cityId: { type: Schema.Types.ObjectId, ref: \"City\", required: true },\r\n  "
        },
        {
          "type": "required",
          "line": 45,
          "rule": "{\r\n  cityId: { type: Schema.Types.ObjectId, ref: \"City\", required: true },\r\n  cityName: { type: Stri"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "cityId: { type: Schema.Types.ObjectId, ref: \"City\", required: true }"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"City\", required: true }"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 47,
          "rule": "cityName: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 47,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 47,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 47,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 48,
          "rule": "distanceRadius: { \r\n    type: String, \r\n    enum: [\"20km\", \"40km\", \"60km\", \"80km\", \"unlimited\"], \r\n "
        },
        {
          "type": "required",
          "line": 48,
          "rule": "{ \r\n    type: String, \r\n    enum: [\"20km\", \"40km\", \"60km\", \"80km\", \"unlimited\"], \r\n    required: tru"
        },
        {
          "type": "required",
          "line": 50,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 50,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 51,
          "rule": "const FinancialTransactionSchema = new Schema<IFinancialTransaction>({\r\n  date: { type: Date, requir"
        },
        {
          "type": "required",
          "line": 51,
          "rule": "const FinancialTransactionSchema = new Schema<IFinancialTransaction>({\r\n  date: { type: Date, requir"
        },
        {
          "type": "required",
          "line": 52,
          "rule": "FinancialTransactionSchema = new Schema<IFinancialTransaction>({\r\n  date: { type: Date, required: tr"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "new Schema<IFinancialTransaction>({\r\n  date: { type: Date, required: true, default: Date.now },\r\n  t"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "{\r\n  date: { type: Date, required: true, default: Date.now },\r\n  type: { \r\n    type: String, \r\n    e"
        },
        {
          "type": "required",
          "line": 53,
          "rule": "date: { type: Date, required: true, default: Date.now }"
        },
        {
          "type": "required",
          "line": 54,
          "rule": "{ type: Date, required: true, default: Date.now }"
        },
        {
          "type": "required",
          "line": 54,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 54,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 55,
          "rule": "type: { \r\n    type: String, \r\n    enum: [\"booking_payment\", \"bonus\", \"penalty\", \"adjustment\"], \r\n   "
        },
        {
          "type": "required",
          "line": 55,
          "rule": "{ \r\n    type: String, \r\n    enum: [\"booking_payment\", \"bonus\", \"penalty\", \"adjustment\"], \r\n    requi"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "amount: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 58,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 58,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 58,
          "rule": "description: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 58,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 59,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 59,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 61,
          "rule": "const ProfessionalProfileSchema = new Schema<IProfessionalProfile>({\r\n  userId: { \r\n    type: Schema"
        },
        {
          "type": "required",
          "line": 61,
          "rule": "const ProfessionalProfileSchema = new Schema<IProfessionalProfile>({\r\n  userId: { \r\n    type: Schema"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "ProfessionalProfileSchema = new Schema<IProfessionalProfile>({\r\n  userId: { \r\n    type: Schema.Types"
        },
        {
          "type": "required",
          "line": 63,
          "rule": "new Schema<IProfessionalProfile>({\r\n  userId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\""
        },
        {
          "type": "required",
          "line": 63,
          "rule": "{\r\n  userId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\", \r\n    required: true, \r\n    uni"
        },
        {
          "type": "required",
          "line": 63,
          "rule": "userId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\", \r\n    required: true, \r\n    unique: "
        },
        {
          "type": "required",
          "line": 64,
          "rule": "{ \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\", \r\n    required: true, \r\n    unique: true,\r\n "
        },
        {
          "type": "required",
          "line": 65,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 65,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 66,
          "rule": "status: { \r\n    type: String, \r\n    enum: [\"active\", \"pending_admin_approval\", \"pending_user_action\""
        },
        {
          "type": "required",
          "line": 66,
          "rule": "{ \r\n    type: String, \r\n    enum: [\"active\", \"pending_admin_approval\", \"pending_user_action\", \"rejec"
        },
        {
          "type": "required",
          "line": 69,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 69,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 84,
          "rule": "appliedAt: { type: Date, default: Date.now, required: true }"
        },
        {
          "type": "required",
          "line": 84,
          "rule": "{ type: Date, default: Date.now, required: true }"
        },
        {
          "type": "required",
          "line": 85,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 85,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "return this.find(query)\r\n    .populate('userId', 'name email phone gender')\r\n    .populate('treatmen"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "this.find(query)\r\n    .populate('userId', 'name email phone gender')\r\n    .populate('treatments.trea"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "this.find(query)\r\n    .populate('userId', 'name email phone gender')\r\n    .populate('treatments.trea"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "this.find(query)\r\n    .populate('userId', 'name email phone gender')\r\n    .populate('treatments.trea"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "this.find(query)\r\n    .populate('userId', 'name email phone gender')\r\n    .populate"
        },
        {
          "type": "email",
          "line": 140,
          "rule": "this.find(query)\r\n    .populate('userId', 'name email phone gender')"
        },
        {
          "type": "email",
          "line": 141,
          "rule": "'name email phone gender'"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\notifications\\email-service.ts",
      "lines": 102,
      "complexity": 8,
      "conditionals": [],
      "functions": [
        {
          "name": "sendNotification",
          "line": 17,
          "parameters": [
            {
              "name": "recipient",
              "type": "EmailRecipient"
            },
            {
              "name": "data",
              "type": "NotificationData"
            }
          ],
          "isAsync": true
        },
        {
          "name": "isConfigured",
          "line": 48,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "verifyConnection",
          "line": 57,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 1,
          "rule": "import nodemailer from \"nodemailer\"\r\nimport type { NotificationResult, EmailRecipient, NotificationD"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "import nodemailer from \"nodemailer\""
        },
        {
          "type": "email",
          "line": 1,
          "rule": "nodemailer"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "nodemailer"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "\"nodemailer\""
        },
        {
          "type": "email",
          "line": 3,
          "rule": "import { getEmailTemplate } from \"./templates/email-templates\""
        },
        {
          "type": "email",
          "line": 4,
          "rule": "\"./templates/email-templates\""
        },
        {
          "type": "email",
          "line": 6,
          "rule": "export class EmailService {\r\n  private transporter: nodemailer.Transporter\r\n\r\n  constructor() {\r\n   "
        },
        {
          "type": "email",
          "line": 7,
          "rule": "private transporter: nodemailer.Transporter"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "nodemailer.Transporter"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "nodemailer.Transporter"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "nodemailer"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "constructor() {\r\n    // Create reusable transporter object using SMTP transport\r\n    this.transporte"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "{\r\n    // Create reusable transporter object using SMTP transport\r\n    this.transporter = nodemailer"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "this.transporter = nodemailer.createTransport({\r\n      host: process.env.EMAIL_SERVER_HOST,\r\n      p"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "this.transporter = nodemailer.createTransport({\r\n      host: process.env.EMAIL_SERVER_HOST,\r\n      p"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "nodemailer.createTransport({\r\n      host: process.env.EMAIL_SERVER_HOST,\r\n      port: Number(process"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "nodemailer.createTransport"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "nodemailer"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "logNotification(\"email\", recipient.value, { subject, text })"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "logNotification(\"email\", recipient.value, { subject, text })"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 44,
          "rule": "catch (error) {\r\n      console.error(\"Email send error:\", error)\r\n      return {\r\n        success: f"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "{\r\n      console.error(\"Email send error:\", error)\r\n      return {\r\n        success: false,\r\n       "
        },
        {
          "type": "email",
          "line": 45,
          "rule": "return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown "
        },
        {
          "type": "email",
          "line": 46,
          "rule": "{\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error s"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "error: error instanceof Error ? error.message : \"Unknown error sending email\""
        },
        {
          "type": "email",
          "line": 47,
          "rule": "error instanceof Error ? error.message : \"Unknown error sending email\""
        },
        {
          "type": "email",
          "line": 47,
          "rule": "\"Unknown error sending email\""
        },
        {
          "type": "email",
          "line": 64,
          "rule": "export const emailService = new EmailService()"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "const emailService = new EmailService()"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "emailService = new EmailService()"
        },
        {
          "type": "email",
          "line": 65,
          "rule": "emailService"
        }
      ],
      "errorHandling": [
        {
          "line": 23,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 59,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\subscriptions\\purchase\\page.tsx",
      "lines": 48,
      "complexity": 7,
      "conditionals": [
        {
          "type": "if",
          "line": 17,
          "condition": "!subscriptionsData.success || !treatmentsData.success || !paymentMethodsData.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseSubscriptionPage",
          "line": 12,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\page.tsx",
      "lines": 32,
      "complexity": 7,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 9,
          "condition": "!roles.includes(activeRole)",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 10,
          "condition": "roles.includes(\"admin\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 12,
          "condition": "roles.includes(\"professional\")",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 14,
          "condition": "roles.includes(\"partner\")",
          "hasElse": true
        }
      ],
      "functions": [
        {
          "name": "DashboardPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batch-card.tsx",
      "lines": 110,
      "complexity": 7,
      "conditionals": [],
      "functions": [
        {
          "name": "PartnerCouponBatchCard",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "PartnerCouponBatchCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 57,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professional-management\\professional-profile-dialog.tsx",
      "lines": 113,
      "complexity": 7,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "open && professionalId",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 29,
          "condition": "res.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 34,
          "condition": "!professionalId",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 37,
          "condition": "result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalProfileDialog",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalProfileDialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "res",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSave",
          "line": 33,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "v",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 16,
          "rule": "interface ProfessionalDetails {\r\n  id: string\r\n  name: string | null\r\n  email: string | null\r\n  phon"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "email: string | null"
        },
        {
          "type": "email",
          "line": 17,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 18,
          "rule": "phone?: string | null"
        },
        {
          "type": "phone",
          "line": 18,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "(\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <p className=\"font-medium"
        },
        {
          "type": "email",
          "line": 43,
          "rule": "<div className=\"space-y-4\">\r\n            <div>\r\n              <p className=\"font-medium\">{profile.na"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "<div>\r\n              <p className=\"font-medium\">{profile.name}</p>\r\n              <p className=\"text"
        },
        {
          "type": "email",
          "line": 46,
          "rule": "<p className=\"text-sm text-muted-foreground\">{profile.email}</p>"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "{profile.email}"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "profile.email"
        },
        {
          "type": "email",
          "line": 47,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "{profile.phone && <p className=\"text-sm text-muted-foreground\">{profile.phone}</p>}"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "profile.phone && <p className=\"text-sm text-muted-foreground\">{profile.phone}</p>"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "profile.phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "phone"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "<p className=\"text-sm text-muted-foreground\">{profile.phone}</p>"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "{profile.phone}"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "profile.phone"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\subscriptions\\subscription-form.tsx",
      "lines": 191,
      "complexity": 7,
      "conditionals": [],
      "functions": [
        {
          "name": "SubscriptionForm",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "SubscriptionFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 45,
          "parameters": [
            {
              "name": "values",
              "type": "FormValues"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 74,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 84,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 93,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 98,
          "parameters": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 106,
          "parameters": [
            {
              "name": "months",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 115,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 46,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "components\\dashboard\\partner\\coupons\\assigned-coupons-client.tsx",
      "lines": 77,
      "complexity": 7,
      "conditionals": [
        {
          "type": "if",
          "line": 24,
          "condition": "loading && coupons.length === 0",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 29,
          "condition": "!loading && coupons.length === 0",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AssignedCouponsClient",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "AssignedCouponsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\landing\\header.tsx",
      "lines": 129,
      "complexity": 7,
      "conditionals": [],
      "functions": [
        {
          "name": "LandingHeader",
          "line": 11,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "handleSignOut",
          "line": 22,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 80,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 90,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\coupon.ts",
      "lines": 67,
      "complexity": 7,
      "conditionals": [
        {
          "type": "if",
          "line": 34,
          "condition": "this.validFrom && this.validUntil && this.validFrom > this.validUntil",
          "hasElse": true
        }
      ],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 12,
          "rule": "const CouponSchema: Schema<ICoupon> = new Schema(\r\n  {\r\n    code: { type: String, required: true, un"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "const CouponSchema: Schema<ICoupon> = new Schema(\r\n  {\r\n    code: { type: String, required: true, un"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "CouponSchema: Schema<ICoupon> = new Schema(\r\n  {\r\n    code: { type: String, required: true, unique: "
        },
        {
          "type": "required",
          "line": 13,
          "rule": "new Schema(\r\n  {\r\n    code: { type: String, required: true, unique: true, trim: true, index: true },"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "{\r\n    code: { type: String, required: true, unique: true, trim: true, index: true },\r\n    descripti"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "code: { type: String, required: true, unique: true, trim: true, index: true }"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "{ type: String, required: true, unique: true, trim: true, index: true }"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "discountType: { type: String, enum: [\"percentage\", \"fixedAmount\"], required: true }"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "{ type: String, enum: [\"percentage\", \"fixedAmount\"], required: true }"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "discountValue: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "validFrom: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "validUntil: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "createdBy: { type: Schema.Types.ObjectId, ref: \"User\", required: true }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: true }"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\gift-vouchers\\page.tsx",
      "lines": 73,
      "complexity": 6,
      "conditionals": [
        {
          "type": "if",
          "line": 37,
          "condition": "!ownedResult.success && !purchasedResult.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberGiftVouchersLoading",
          "line": 9,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 17,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "MemberGiftVouchersData",
          "line": 33,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "MemberGiftVouchersPage",
          "line": 46,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\purchase\\purchase-success.tsx",
      "lines": 58,
      "complexity": 6,
      "conditionals": [],
      "functions": [
        {
          "name": "PurchaseSuccess",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseSuccessProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\purchase\\step-indicator.tsx",
      "lines": 92,
      "complexity": 6,
      "conditionals": [],
      "functions": [
        {
          "name": "StepIndicator",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "StepIndicatorProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "s",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 14,
          "parameters": [
            {
              "name": "stepItem",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\subscriptions\\subscription-card.tsx",
      "lines": 94,
      "complexity": 6,
      "conditionals": [],
      "functions": [
        {
          "name": "SubscriptionCard",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "SubscriptionCardProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "treatment",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "hooks\\use-cached-user.ts",
      "lines": 62,
      "complexity": 6,
      "conditionals": [
        {
          "type": "if",
          "line": 16,
          "condition": "typeof window !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 18,
          "condition": "cached",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "status === \"authenticated\" && session?.user",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useCachedUser",
          "line": 10,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 5,
          "rule": "export interface CachedUserProfile {\r\n  id: string\r\n  name: string | null\r\n  email: string | null\r\n "
        },
        {
          "type": "email",
          "line": 8,
          "rule": "email: string | null"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "useEffect(() => {\r\n    if (status === \"authenticated\" && session?.user) {\r\n      const userProfile: "
        },
        {
          "type": "email",
          "line": 20,
          "rule": "useEffect(() => {\r\n    if (status === \"authenticated\" && session?.user) {\r\n      const userProfile: "
        },
        {
          "type": "email",
          "line": 21,
          "rule": "() => {\r\n    if (status === \"authenticated\" && session?.user) {\r\n      const userProfile: CachedUser"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "{\r\n    if (status === \"authenticated\" && session?.user) {\r\n      const userProfile: CachedUserProfil"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "if (status === \"authenticated\" && session?.user) {\r\n      const userProfile: CachedUserProfile = {\r\n"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "{\r\n      const userProfile: CachedUserProfile = {\r\n        id: session.user.id,\r\n        name: sessi"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "const userProfile: CachedUserProfile = {\r\n        id: session.user.id,\r\n        name: session.user.n"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "const userProfile: CachedUserProfile = {\r\n        id: session.user.id,\r\n        name: session.user.n"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "userProfile: CachedUserProfile = {\r\n        id: session.user.id,\r\n        name: session.user.name,\r\n"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "{\r\n        id: session.user.id,\r\n        name: session.user.name,\r\n        email: session.user.email"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email: session.user.email"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "session.user.email"
        },
        {
          "type": "email",
          "line": 25,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\city-distance.ts",
      "lines": 177,
      "complexity": 6,
      "conditionals": [
        {
          "type": "switch",
          "line": 48,
          "cases": 6,
          "expression": "distanceRadius"
        },
        {
          "type": "if",
          "line": 54,
          "condition": "maxDistance === Infinity",
          "hasElse": false
        }
      ],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 13,
          "rule": "const CitySchema = new Schema<ICity>({\r\n  name: { \r\n    type: String, \r\n    required: true, \r\n    un"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "const CitySchema = new Schema<ICity>({\r\n  name: { \r\n    type: String, \r\n    required: true, \r\n    un"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "CitySchema = new Schema<ICity>({\r\n  name: { \r\n    type: String, \r\n    required: true, \r\n    unique: "
        },
        {
          "type": "required",
          "line": 13,
          "rule": "new Schema<ICity>({\r\n  name: { \r\n    type: String, \r\n    required: true, \r\n    unique: true, \r\n    t"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "{\r\n  name: { \r\n    type: String, \r\n    required: true, \r\n    unique: true, \r\n    trim: true,\r\n    in"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "name: { \r\n    type: String, \r\n    required: true, \r\n    unique: true, \r\n    trim: true,\r\n    index: "
        },
        {
          "type": "required",
          "line": 14,
          "rule": "{ \r\n    type: String, \r\n    required: true, \r\n    unique: true, \r\n    trim: true,\r\n    index: true \r"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "coordinates: {\r\n    latitude: { type: Number, required: true },\r\n    longitude: { type: Number, requ"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "{\r\n    latitude: { type: Number, required: true },\r\n    longitude: { type: Number, required: true }\r"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "latitude: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "longitude: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "const CityDistanceSchema = new Schema<ICityDistance>({\r\n  fromCityId: { \r\n    type: Schema.Types.Obj"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "const CityDistanceSchema = new Schema<ICityDistance>({\r\n  fromCityId: { \r\n    type: Schema.Types.Obj"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "CityDistanceSchema = new Schema<ICityDistance>({\r\n  fromCityId: { \r\n    type: Schema.Types.ObjectId,"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "new Schema<ICityDistance>({\r\n  fromCityId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"City\", \r"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "{\r\n  fromCityId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"City\", \r\n    required: true,\r\n    "
        },
        {
          "type": "required",
          "line": 23,
          "rule": "fromCityId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"City\", \r\n    required: true,\r\n    index"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "{ \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"City\", \r\n    required: true,\r\n    index: true \r\n  }"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "toCityId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"City\", \r\n    required: true,\r\n    index: "
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{ \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"City\", \r\n    required: true,\r\n    index: true \r\n  }"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "fromCityName: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "toCityName: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "distanceKm: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\partner-coupon-batch.ts",
      "lines": 66,
      "complexity": 6,
      "conditionals": [
        {
          "type": "if",
          "line": 40,
          "condition": "this.validFrom && this.validUntil && this.validFrom > this.validUntil",
          "hasElse": true
        }
      ],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 15,
          "rule": "const PartnerCouponBatchSchema: Schema<IPartnerCouponBatch> = new Schema(\r\n  {\r\n    name: { type: St"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "const PartnerCouponBatchSchema: Schema<IPartnerCouponBatch> = new Schema(\r\n  {\r\n    name: { type: St"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "PartnerCouponBatchSchema: Schema<IPartnerCouponBatch> = new Schema(\r\n  {\r\n    name: { type: String, "
        },
        {
          "type": "required",
          "line": 16,
          "rule": "new Schema(\r\n  {\r\n    name: { type: String, required: true, trim: true },\r\n    description: { type: "
        },
        {
          "type": "required",
          "line": 16,
          "rule": "{\r\n    name: { type: String, required: true, trim: true },\r\n    description: { type: String, trim: t"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "name: { type: String, required: true, trim: true }"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "{ type: String, required: true, trim: true }"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "couponCount: { type: Number, required: true, min: 1 }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "{ type: Number, required: true, min: 1 }"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "discountType: { type: String, enum: [\"percentage\", \"fixedAmount\"], required: true }"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "{ type: String, enum: [\"percentage\", \"fixedAmount\"], required: true }"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "discountValue: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "validFrom: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "validUntil: { type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{ type: Date, required: true }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "codePrefix: { type: String, required: true, trim: true }"
        },
        {
          "type": "required",
          "line": 32,
          "rule": "{ type: String, required: true, trim: true }"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "createdBy: { type: Schema.Types.ObjectId, ref: \"User\", required: true }"
        },
        {
          "type": "required",
          "line": 33,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: true }"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\mongoose.ts",
      "lines": 105,
      "complexity": 6,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!MONGODB_URI",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 8,
          "condition": "!cached",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 27,
          "condition": "cached.conn",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 28,
          "condition": "!cached.promise",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 42,
          "condition": "!conn.connection.db",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 51,
          "condition": "process.env.NODE_ENV === \"development\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "loadModels",
          "line": 10,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "dbConnect",
          "line": 26,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "mongoose",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "getConnectionStats",
          "line": 40,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [
            {
              "name": "collectionName",
              "type": "any"
            },
            {
              "name": "method",
              "type": "any"
            },
            {
              "name": "query",
              "type": "any"
            },
            {
              "name": "doc",
              "type": "any"
            },
            {
              "name": "options",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 37,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 45,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\logs\\logger.ts",
      "lines": 65,
      "complexity": 6,
      "conditionals": [
        {
          "type": "if",
          "line": 12,
          "condition": "this.isDevelopment",
          "hasElse": true
        },
        {
          "type": "switch",
          "line": 12,
          "cases": 4,
          "expression": "level"
        }
      ],
      "functions": [
        {
          "name": "formatMessage",
          "line": 5,
          "parameters": [
            {
              "name": "level",
              "type": "LogLevel"
            },
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "log",
          "line": 9,
          "parameters": [
            {
              "name": "level",
              "type": "LogLevel"
            },
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "debug",
          "line": 26,
          "parameters": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "info",
          "line": 28,
          "parameters": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "warn",
          "line": 29,
          "parameters": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "error",
          "line": 31,
          "parameters": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\user-subscriptions\\page.tsx",
      "lines": 90,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 49,
          "condition": "!result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 66,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "DataFetchError",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ error?: string }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "UserSubscriptionsData",
          "line": 45,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "AdminUserSubscriptionsPage",
          "line": 63,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 46,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\gift-vouchers\\purchase\\page.tsx",
      "lines": 39,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 15,
          "condition": "!session?.user",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 19,
          "condition": "!treatmentsResult.success || !paymentMethodsResult.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseGiftVoucherPage",
          "line": 13,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\professional\\booking-response\\[responseId]\\page.tsx",
      "lines": 147,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "!action",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 45,
          "condition": "result.success",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 82,
          "condition": "!responseId",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ResponseHandler",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ responseId: string; action?: \"accept\" | \"decline\" }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "ProfessionalResponsePage",
          "line": 79,
          "parameters": [
            {
              "name": "unknown",
              "type": "PageProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\redeem\\[code]\\page.tsx",
      "lines": 62,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!result.success || !result.voucher",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "RedeemPage",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ params: Params }"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\auth\\role-protected-route.tsx",
      "lines": 54,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "status === \"loading\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 13,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 17,
          "condition": "!hasRequiredRole",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "status === \"loading\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "RoleProtectedRoute",
          "line": 8,
          "parameters": [
            {
              "name": "unknown",
              "type": "RoleProtectedRouteProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 5,
          "rule": "interface RoleProtectedRouteProps {\r\n  children: React.ReactNode\r\n  requiredRole: string\r\n  redirect"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "requiredRole: string"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "requiredRole"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "export function RoleProtectedRoute({ children, requiredRole, redirectTo = \"/dashboard\" }: RoleProtec"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{ children, requiredRole, redirectTo = \"/dashboard\" }: RoleProtectedRouteProps"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{ children, requiredRole, redirectTo = \"/dashboard\" }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "requiredRole"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "requiredRole"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "useEffect(() => {\r\n    if (status === \"loading\") return\r\n\r\n    if (!session) {\r\n      router.push(\"/"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "useEffect(() => {\r\n    if (status === \"loading\") return\r\n\r\n    if (!session) {\r\n      router.push(\"/"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "() => {\r\n    if (status === \"loading\") return\r\n\r\n    if (!session) {\r\n      router.push(\"/auth/login"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "{\r\n    if (status === \"loading\") return\r\n\r\n    if (!session) {\r\n      router.push(\"/auth/login\")\r\n  "
        },
        {
          "type": "required",
          "line": 15,
          "rule": "const hasRequiredRole = session.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "const hasRequiredRole = session.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "hasRequiredRole = session.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "session.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "requiredRole"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "[session, status, router, requiredRole, redirectTo]"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "requiredRole"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "const hasRequiredRole = session?.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "const hasRequiredRole = session?.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "hasRequiredRole = session?.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "session?.user.roles.includes(requiredRole)"
        },
        {
          "type": "required",
          "line": 31,
          "rule": "requiredRole"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\common\\providers\\query-provider.tsx",
      "lines": 46,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "error && typeof error === \"object\" && \"status\" in error",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 16,
          "condition": "status >= 400 && status < 500",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "QueryProvider",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "QueryProviderProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 8,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [
            {
              "name": "failureCount",
              "type": "any"
            },
            {
              "name": "error",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\purchase\\purchase-summary.tsx",
      "lines": 52,
      "complexity": 5,
      "conditionals": [],
      "functions": [
        {
          "name": "PurchaseSummary",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "PurchaseSummaryProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 17,
          "parameters": [
            {
              "name": "item",
              "type": "any"
            },
            {
              "name": "index",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\form.tsx",
      "lines": 139,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "!fieldContext",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 77,
          "condition": "!body",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "FormField",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "ControllerProps<TFieldValues, TName>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useFormField",
          "line": 22,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\form.tsx",
      "lines": 179,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 27,
          "condition": "!fieldContext",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 78,
          "condition": "!body",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "FormField",
          "line": 14,
          "parameters": [
            {
              "name": "unknown",
              "type": "ControllerProps<TFieldValues, TName>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "useFormField",
          "line": 22,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 75,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\queries\\address-queries.ts",
      "lines": 91,
      "complexity": 5,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "data.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "data.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 31,
          "condition": "!address",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 32,
          "condition": "address.isDefault",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 37,
          "condition": "nextAddress",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "getUserAddresses",
          "line": 3,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "getDefaultAddress",
          "line": 7,
          "parameters": [
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "createAddress",
          "line": 11,
          "parameters": [
            {
              "name": "data",
              "type": "Partial<IAddress>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "updateAddress",
          "line": 18,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "userId",
              "type": "string"
            },
            {
              "name": "data",
              "type": "Partial<IAddress>"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteAddress",
          "line": 28,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "setDefaultAddress",
          "line": 41,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "userId",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\book-subscription\\page.tsx",
      "lines": 37,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "!subsData.success || !treatmentsData.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestBookSubscriptionPage",
          "line": 9,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\cities\\page.tsx",
      "lines": 38,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 15,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminCitiesPage",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "AdminCitiesPageProps"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\coupons\\page.tsx",
      "lines": 73,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 32,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminCouponsPage",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "AdminCouponsPageProps"
            }
          ],
          "isAsync": true
        },
        {
          "name": "CouponsDataWrapper",
          "line": 51,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n  couponsDataPromise: ReturnType<typeof getAdminCoupons>\r\n  partnersPromise: ReturnType<typeof getPartnersForSelection>\r\n}"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\gift-vouchers\\page.tsx",
      "lines": 83,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 14,
          "condition": "!result.success || !result.giftVouchers || !result.pagination",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 58,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GiftVouchersData",
          "line": 11,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "GiftVouchersLoadingSkeleton",
          "line": 30,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "j",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "GiftVouchersPage",
          "line": 56,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "general",
          "line": 10,
          "rule": "export const revalidate = 0"
        },
        {
          "type": "general",
          "line": 11,
          "rule": "const revalidate = 0"
        },
        {
          "type": "general",
          "line": 11,
          "rule": "revalidate = 0"
        },
        {
          "type": "general",
          "line": 11,
          "rule": "revalidate"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\partner-coupon-batches\\page.tsx",
      "lines": 63,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 22,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminPartnerCouponBatchesPage",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "AdminPartnerCouponBatchesPageProps"
            }
          ],
          "isAsync": true
        },
        {
          "name": "PartnerCouponBatchesDataWrapper",
          "line": 43,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n  batchesDataPromise: ReturnType<typeof getPartnerCouponBatches>\r\n  partnersPromise: ReturnType<typeof getPartnersForSelection>\r\n}"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\payment-methods\\page.tsx",
      "lines": 35,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 10,
          "condition": "session.user.activeRole !== \"member\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 13,
          "condition": "!result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberPaymentMethodsPage",
          "line": 7,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\auth\\auth-redirect.tsx",
      "lines": 37,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "status === \"loading\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 10,
          "condition": "session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 12,
          "condition": "status === \"loading\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AuthRedirect",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "AuthRedirectProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\auth\\protected-route.tsx",
      "lines": 41,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 12,
          "condition": "status === \"loading\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 12,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 15,
          "condition": "status === \"loading\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProtectedRoute",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProtectedRouteProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\language-selector.tsx",
      "lines": 39,
      "complexity": 4,
      "conditionals": [],
      "functions": [
        {
          "name": "LanguageSelector",
          "line": 7,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "lang",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\pagination.tsx",
      "lines": 158,
      "complexity": 4,
      "conditionals": [],
      "functions": [
        {
          "name": "Pagination",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"nav\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 18,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationLink",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaginationLinkProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationPrevious",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof PaginationLink>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationNext",
          "line": 40,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof PaginationLink>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationEllipsis",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"span\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CustomPagination",
          "line": 59,
          "parameters": [
            {
              "name": "unknown",
              "type": "CustomPaginationProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 63,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [
            {
              "name": "page",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 75,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\city-management\\city-management.tsx",
      "lines": 101,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 30,
          "condition": "result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "CityManagement",
          "line": 17,
          "parameters": [
            {
              "name": "unknown",
              "type": "CityManagementProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "loadCities",
          "line": 28,
          "parameters": [
            {
              "name": "newPage",
              "type": "any"
            },
            {
              "name": "term",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "c",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professional-management\\professional-management.tsx",
      "lines": 127,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 38,
          "condition": "result.success",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 94,
          "condition": "!o",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalManagement",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalManagementProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "loadProfessionals",
          "line": 36,
          "parameters": [
            {
              "name": "newPage",
              "type": "any"
            },
            {
              "name": "term",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "p",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 75,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 93,
          "parameters": [
            {
              "name": "o",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 15,
          "rule": "export interface ProfessionalData {\r\n  id: string\r\n  name: string | null\r\n  email: string | null\r\n  "
        },
        {
          "type": "email",
          "line": 16,
          "rule": "email: string | null"
        },
        {
          "type": "email",
          "line": 16,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 17,
          "rule": "phone?: string | null"
        },
        {
          "type": "phone",
          "line": 17,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 55,
          "rule": "<TableHeader>\r\n              <TableRow>\r\n                <TableHead>{t(\"admin.professionals.table.na"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "<TableRow>\r\n                <TableHead>{t(\"admin.professionals.table.name\")}</TableHead>\r\n          "
        },
        {
          "type": "email",
          "line": 58,
          "rule": "<TableHead>{t(\"admin.professionals.table.email\")}</TableHead>"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "{t(\"admin.professionals.table.email\")}"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "t(\"admin.professionals.table.email\")"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "\"admin.professionals.table.email\""
        },
        {
          "type": "phone",
          "line": 59,
          "rule": "<TableHead>{t(\"admin.professionals.table.phone\")}</TableHead>"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "{t(\"admin.professionals.table.phone\")}"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "t(\"admin.professionals.table.phone\")"
        },
        {
          "type": "phone",
          "line": 60,
          "rule": "\"admin.professionals.table.phone\""
        },
        {
          "type": "email",
          "line": 80,
          "rule": "<TableCell>{p.email}</TableCell>"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "{p.email}"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "p.email"
        },
        {
          "type": "email",
          "line": 80,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "<TableCell>{p.phone}</TableCell>"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "{p.phone}"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "p.phone"
        },
        {
          "type": "phone",
          "line": 81,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\gift-vouchers\\guest-gift-voucher-confirmation.tsx",
      "lines": 77,
      "complexity": 4,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!voucher",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestGiftVoucherConfirmation",
          "line": 8,
          "parameters": [
            {
              "name": "unknown",
              "type": "Props"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\subscriptions\\guest-subscription-summary-step.tsx",
      "lines": 127,
      "complexity": 4,
      "conditionals": [],
      "functions": [
        {
          "name": "GuestSubscriptionSummaryStep",
          "line": 14,
          "parameters": [
            {
              "name": "unknown",
              "type": "Props"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 9,
          "rule": "interface GuestInfo {\r\n  firstName?: string\r\n  lastName?: string\r\n  email?: string\r\n  phone?: string"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "email?: string"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 10,
          "rule": "phone?: string"
        },
        {
          "type": "phone",
          "line": 10,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 62,
          "rule": "<span className=\"font-medium\">{guestInfo.email}</span>"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "{guestInfo.email}"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "guestInfo.email"
        },
        {
          "type": "email",
          "line": 63,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "<span className=\"font-medium\">{guestInfo.phone}</span>"
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "{guestInfo.phone}"
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "guestInfo.phone"
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "phone"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\user-subscriptions\\client-aware-user-subscriptions-loading.tsx",
      "lines": 131,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "TableLoadingSkeleton",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ count?: number }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 19,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "j",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CardListLoadingSkeleton",
          "line": 37,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ count?: number }"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ClientAwareUserSubscriptionsLoading",
          "line": 44,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "CommonLoadingSkeletons",
          "line": 48,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\book-treatment\\page.tsx",
      "lines": 23,
      "complexity": 3,
      "conditionals": [
        {
          "type": "if",
          "line": 10,
          "condition": "!session?.user?.id",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 12,
          "condition": "!initialDataResult?.success || !initialDataResult?.data",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "BookTreatmentPage",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ params?: { lang?: string } }"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\page.tsx",
      "lines": 27,
      "complexity": 3,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"member\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberDashboardPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 13,
          "rule": "<p className=\"text-gray-600\">Welcome, {session.user?.name || session.user?.email}!</p>"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "{session.user?.name || session.user?.email}"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "session.user?.name || session.user?.email"
        },
        {
          "type": "email",
          "line": 14,
          "rule": "session.user?.email"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\partner\\assigned-coupons\\page.tsx",
      "lines": 60,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "PartnerAssignedCouponsPage",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "PartnerAssignedCouponsPageProps"
            }
          ],
          "isAsync": true
        },
        {
          "name": "AssignedCouponsDataWrapper",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ couponsDataPromise: ReturnType<typeof getAssignedPartnerCoupons> }"
            }
          ],
          "isAsync": true
        },
        {
          "name": "AssignedCouponsLoadingSkeleton",
          "line": 34,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\purchase\\animated-container.tsx",
      "lines": 45,
      "complexity": 3,
      "conditionals": [
        {
          "type": "if",
          "line": 10,
          "condition": "isActive",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 21,
          "condition": "!shouldRender",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AnimatedContainer",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "AnimatedContainerProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 18,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\context-menu.tsx",
      "lines": 201,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 69,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 102,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 131,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ContextMenuShortcut",
          "line": 136,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\dropdown-menu.tsx",
      "lines": 201,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 85,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 135,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DropdownMenuShortcut",
          "line": 140,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\menubar.tsx",
      "lines": 237,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 101,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 138,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "MenubarShortcut",
          "line": 153,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\context-menu.tsx",
      "lines": 201,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 69,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 101,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 121,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 131,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ContextMenuShortcut",
          "line": 136,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "lines": 201,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 85,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 105,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 125,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 135,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DropdownMenuShortcut",
          "line": 140,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\menubar.tsx",
      "lines": 237,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 101,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 120,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 138,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 147,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "MenubarShortcut",
          "line": 153,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\init-indexes.ts",
      "lines": 56,
      "complexity": 3,
      "conditionals": [],
      "functions": [
        {
          "name": "initIndexes",
          "line": 1,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 2,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 9,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 22,
          "hasCatch": true,
          "hasFinally": false
        },
        {
          "line": 27,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\db\\mongodb.ts",
      "lines": 48,
      "complexity": 3,
      "conditionals": [
        {
          "type": "if",
          "line": 1,
          "condition": "!process.env.MONGODB_URI",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "process.env.NODE_ENV === \"development\"",
          "hasElse": true
        },
        {
          "type": "if",
          "line": 13,
          "condition": "!globalWithMongo._mongoClientPromise",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "connectDB",
          "line": 25,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 29,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\book-gift-voucher\\page.tsx",
      "lines": 29,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!treatmentsResult.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestBookGiftVoucherPage",
          "line": 7,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\book-treatment\\page.tsx",
      "lines": 48,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!initialDataResult?.success || !initialDataResult?.data",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "GuestBookTreatmentPage",
          "line": 6,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 8,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\subscriptions\\page.tsx",
      "lines": 56,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 28,
          "condition": "!result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "SubscriptionsLoading",
          "line": 9,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 17,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SubscriptionsData",
          "line": 26,
          "parameters": [],
          "isAsync": true
        },
        {
          "name": "UserSubscriptionsPage",
          "line": 34,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\partner\\page.tsx",
      "lines": 27,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"partner\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PartnerDashboardPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\professional\\bank-account\\page.tsx",
      "lines": 25,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 6,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"professional\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalBankAccountPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\professional\\documents\\page.tsx",
      "lines": 25,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 6,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"professional\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalDocumentsPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\professional\\location\\page.tsx",
      "lines": 25,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 6,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"professional\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalLocationPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\professional\\page.tsx",
      "lines": 29,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 6,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"professional\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalDashboardPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\professional\\profile\\page.tsx",
      "lines": 25,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 6,
          "condition": "!session",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 7,
          "condition": "session.user.activeRole !== \"professional\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalProfilePage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\account\\page.tsx",
      "lines": 31,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 7,
          "condition": "!result.success || !result.user",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AccountPage",
          "line": 5,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\profile\\page.tsx",
      "lines": 32,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 7,
          "condition": "!result.success || !result.user",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfilePage",
          "line": 5,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\admin\\professionals\\page.tsx",
      "lines": 80,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 42,
          "condition": "!session?.user || session.user.role !== \"admin\"",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalsLoadingSkeleton",
          "line": 10,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ProfessionalsPage",
          "line": 39,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\redeem-subscription\\[id]\\page.tsx",
      "lines": 48,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!result.success || !result.subscription",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "RedeemSubscriptionPage",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "{ params: Params }"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\auth\\providers\\auth-provider.tsx",
      "lines": 30,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "typeof window !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 13,
          "condition": "cachedUser",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AuthProvider",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "AuthProviderProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\masu-logo.tsx",
      "lines": 23,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "MasuLogo",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "MasuLogoProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\input-otp.tsx",
      "lines": 72,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\scroll-area.tsx",
      "lines": 49,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\select.tsx",
      "lines": 161,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 89,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\toaster.tsx",
      "lines": 36,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "Toaster",
          "line": 5,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\toggle-group.tsx",
      "lines": 62,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\payment-methods\\payment-methods-client.tsx",
      "lines": 94,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "PaymentMethodsClient",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaymentMethodsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleEdit",
          "line": 18,
          "parameters": [
            {
              "name": "paymentMethod",
              "type": "IPaymentMethod"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleCloseForm",
          "line": 21,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "updatePaymentMethods",
          "line": 23,
          "parameters": [
            {
              "name": "updatedMethod",
              "type": "IPaymentMethod"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 24,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 24,
          "parameters": [
            {
              "name": "method",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "addPaymentMethod",
          "line": 27,
          "parameters": [
            {
              "name": "newMethod",
              "type": "IPaymentMethod"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "removePaymentMethod",
          "line": 29,
          "parameters": [
            {
              "name": "methodId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 30,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 31,
          "parameters": [
            {
              "name": "method",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "setDefaultMethod",
          "line": 32,
          "parameters": [
            {
              "name": "methodId",
              "type": "string"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "method",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 42,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 60,
          "parameters": [
            {
              "name": "paymentMethod",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\profile\\profile-form.tsx",
      "lines": 114,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "ProfileForm",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfileFormProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 26,
          "parameters": [
            {
              "name": "values",
              "type": "z.infer<typeof profileFormSchema>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 9,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 9,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "email",
          "line": 10,
          "rule": "const profileFormSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at lea"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "const profileFormSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at lea"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "profileFormSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 c"
        },
        {
          "type": "email",
          "line": 11,
          "rule": "z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 characters.\",\r\n  }),\r"
        },
        {
          "type": "email",
          "line": 11,
          "rule": "{\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 characters.\",\r\n  }),\r\n  email:"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "email: z.string().email({\r\n    message: \"Please enter a valid email address.\",\r\n  })"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "z.string().email({\r\n    message: \"Please enter a valid email address.\",\r\n  })"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "z.string().email"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "{\r\n    message: \"Please enter a valid email address.\",\r\n  }"
        },
        {
          "type": "email",
          "line": 13,
          "rule": "message: \"Please enter a valid email address.\""
        },
        {
          "type": "email",
          "line": 14,
          "rule": "\"Please enter a valid email address.\""
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "phone: z.string().optional()"
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "const form = useForm<z.infer<typeof profileFormSchema>>({\r\n    resolver: zodResolver(profileFormSche"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "const form = useForm<z.infer<typeof profileFormSchema>>({\r\n    resolver: zodResolver(profileFormSche"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "form = useForm<z.infer<typeof profileFormSchema>>({\r\n    resolver: zodResolver(profileFormSchema),\r\n"
        },
        {
          "type": "email",
          "line": 21,
          "rule": "useForm<z.infer<typeof profileFormSchema>>({\r\n    resolver: zodResolver(profileFormSchema),\r\n    def"
        },
        {
          "type": "email",
          "line": 22,
          "rule": "{\r\n    resolver: zodResolver(profileFormSchema),\r\n    defaultValues: initialValues || {\r\n      name:"
        },
        {
          "type": "email",
          "line": 23,
          "rule": "defaultValues: initialValues || {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      bio: \""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "initialValues || {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      bio: \"\",\r\n    }"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "{\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      bio: \"\",\r\n    }"
        },
        {
          "type": "email",
          "line": 24,
          "rule": "email: \"\""
        },
        {
          "type": "email",
          "line": 24,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phone: \"\""
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 39,
          "rule": "<FormField\r\n          control={form.control}\r\n          name=\"email\"\r\n          render={({ field }) "
        },
        {
          "type": "email",
          "line": 39,
          "rule": "control={form.control}\r\n          name=\"email\"\r\n          render={({ field }) => (\r\n            <For"
        },
        {
          "type": "email",
          "line": 40,
          "rule": "name=\"email\""
        },
        {
          "type": "email",
          "line": 40,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 40,
          "rule": "render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.email\")}</For"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "{({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.email\")}</FormLabel>"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.email\")}</FormLabel>\r"
        },
        {
          "type": "email",
          "line": 41,
          "rule": "(\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.email\")}</FormLabel>\r\n              "
        },
        {
          "type": "email",
          "line": 41,
          "rule": "<FormItem>\r\n              <FormLabel>{t(\"profile.email\")}</FormLabel>\r\n              <FormControl>\r\n"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "<FormLabel>{t(\"profile.email\")}</FormLabel>"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "{t(\"profile.email\")}"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "t(\"profile.email\")"
        },
        {
          "type": "email",
          "line": 42,
          "rule": "\"profile.email\""
        },
        {
          "type": "email",
          "line": 43,
          "rule": "<FormControl>\r\n                <Input placeholder={t(\"profile.emailPlaceholder\")} {...field} />\r\n   "
        },
        {
          "type": "email",
          "line": 44,
          "rule": "<Input placeholder={t(\"profile.emailPlaceholder\")} {...field} />"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "placeholder={t(\"profile.emailPlaceholder\")} {...field}"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "placeholder={t(\"profile.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "{t(\"profile.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "t(\"profile.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 44,
          "rule": "\"profile.emailPlaceholder\""
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "<FormField\r\n          control={form.control}\r\n          name=\"phone\"\r\n          render={({ field }) "
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "control={form.control}\r\n          name=\"phone\"\r\n          render={({ field }) => (\r\n            <For"
        },
        {
          "type": "phone",
          "line": 48,
          "rule": "name=\"phone\""
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.phone\")}</For"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "{({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.phone\")}</FormLabel>"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.phone\")}</FormLabel>\r"
        },
        {
          "type": "phone",
          "line": 49,
          "rule": "(\r\n            <FormItem>\r\n              <FormLabel>{t(\"profile.phone\")}</FormLabel>\r\n              "
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "<FormItem>\r\n              <FormLabel>{t(\"profile.phone\")}</FormLabel>\r\n              <FormControl>\r\n"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "<FormLabel>{t(\"profile.phone\")}</FormLabel>"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "{t(\"profile.phone\")}"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "t(\"profile.phone\")"
        },
        {
          "type": "phone",
          "line": 51,
          "rule": "\"profile.phone\""
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "<FormControl>\r\n                <PhoneInput\r\n                  id=\"phone\"\r\n                  name={fi"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "<PhoneInput\r\n                  id=\"phone\"\r\n                  name={field.name}\r\n                  pl"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "id=\"phone\"\r\n                  name={field.name}\r\n                  placeholder={t(\"profile.phonePlac"
        },
        {
          "type": "phone",
          "line": 52,
          "rule": "id=\"phone\""
        },
        {
          "type": "phone",
          "line": 53,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 54,
          "rule": "placeholder={t(\"profile.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 54,
          "rule": "{t(\"profile.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 54,
          "rule": "t(\"profile.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 54,
          "rule": "\"profile.phonePlaceholder\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\input-otp.tsx",
      "lines": 72,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\pagination.tsx",
      "lines": 118,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "Pagination",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"nav\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 18,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationLink",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "PaginationLinkProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationPrevious",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof PaginationLink>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationNext",
          "line": 40,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof PaginationLink>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "PaginationEllipsis",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"span\">"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\scroll-area.tsx",
      "lines": 49,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\select.tsx",
      "lines": 161,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 51,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 89,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 108,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\toaster.tsx",
      "lines": 36,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "Toaster",
          "line": 4,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\toggle-group.tsx",
      "lines": 62,
      "complexity": 2,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 13,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "hooks\\use-cached-preferences.ts",
      "lines": 80,
      "complexity": 2,
      "conditionals": [
        {
          "type": "if",
          "line": 19,
          "condition": "typeof window !== \"undefined\"",
          "hasElse": false
        },
        {
          "type": "if",
          "line": 21,
          "condition": "cached",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "useCachedPreferences",
          "line": 13,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 18,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "updatePreference",
          "line": 24,
          "parameters": [
            {
              "name": "key",
              "type": "K"
            },
            {
              "name": "value",
              "type": "UserPreferences[K]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "updateNestedPreference",
          "line": 32,
          "parameters": [
            {
              "name": "key",
              "type": "K"
            },
            {
              "name": "nestedKey",
              "type": "N"
            },
            {
              "name": "value",
              "type": "UserPreferences[K][N]"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [
            {
              "name": "prev",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 7,
          "rule": "notifications: {\r\n    email: boolean\r\n    sms: boolean\r\n    push: boolean\r\n  }"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "{\r\n    email: boolean\r\n    sms: boolean\r\n    push: boolean\r\n  }"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "email: boolean"
        },
        {
          "type": "email",
          "line": 8,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "const defaultPreferences: UserPreferences = {\r\n  theme: \"system\",\r\n  language: \"he\",\r\n  sidebarColla"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "const defaultPreferences: UserPreferences = {\r\n  theme: \"system\",\r\n  language: \"he\",\r\n  sidebarColla"
        },
        {
          "type": "email",
          "line": 9,
          "rule": "defaultPreferences: UserPreferences = {\r\n  theme: \"system\",\r\n  language: \"he\",\r\n  sidebarCollapsed: "
        },
        {
          "type": "email",
          "line": 10,
          "rule": "{\r\n  theme: \"system\",\r\n  language: \"he\",\r\n  sidebarCollapsed: false,\r\n  dashboardLayout: \"default\",\r"
        },
        {
          "type": "email",
          "line": 12,
          "rule": "notifications: {\r\n    email: true,\r\n    sms: true,\r\n    push: true,\r\n  }"
        },
        {
          "type": "email",
          "line": 12,
          "rule": "{\r\n    email: true,\r\n    sms: true,\r\n    push: true,\r\n  }"
        },
        {
          "type": "email",
          "line": 12,
          "rule": "email: true"
        },
        {
          "type": "email",
          "line": 12,
          "rule": "email"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\auth\\reset-password\\page.tsx",
      "lines": 52,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 7,
          "condition": "!token",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ResetPasswordPage",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "ResetPasswordPageProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\bookings\\page.tsx",
      "lines": 21,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminBookingsPage",
          "line": 7,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\clients\\page.tsx",
      "lines": 19,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminClientsPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\customers\\page.tsx",
      "lines": 53,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 12,
          "condition": "!session.user.roles?.includes('admin')",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "CustomersPage",
          "line": 10,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 11,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\page.tsx",
      "lines": 20,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminDashboardPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\partners\\page.tsx",
      "lines": 19,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminPartnersPage",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\purchase-reports\\page.tsx",
      "lines": 53,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 12,
          "condition": "!session.user.roles?.includes('admin')",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseReportsPage",
          "line": 10,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 11,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\reviews\\page.tsx",
      "lines": 27,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AdminReviewsPage",
          "line": 11,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\treatments\\page.tsx",
      "lines": 19,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 9,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "TreatmentsPage",
          "line": 8,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\admin\\working-hours\\page.tsx",
      "lines": 19,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 10,
          "condition": "!session.user.roles?.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "WorkingHoursPage",
          "line": 8,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\bookings\\page.tsx",
      "lines": 22,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 10,
          "condition": "!session?.user?.id",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberBookingsPage",
          "line": 8,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\purchase-history\\page.tsx",
      "lines": 28,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 11,
          "condition": "!session?.user",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "PurchaseHistoryPage",
          "line": 9,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\(user)\\(roles)\\member\\reviews\\page.tsx",
      "lines": 27,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 13,
          "condition": "!session?.user?.id",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "MemberReviewsPage",
          "line": 11,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\error.tsx",
      "lines": 46,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "DashboardError",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n  error: Error & { digest?: string }\r\n  reset: () => void\r\n}"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 8,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 24,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\layout.tsx",
      "lines": 19,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 10,
          "condition": "!session",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "DashboardLayout",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "DashboardLayoutProps"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\error.tsx",
      "lines": 40,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "Error",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n  error: Error & { digest?: string }\r\n  reset: () => void\r\n}"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 8,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 24,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\modals\\alert-modal.tsx",
      "lines": 53,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 16,
          "condition": "!isMounted",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "AlertModal",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 15,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\breadcrumb.tsx",
      "lines": 116,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "BreadcrumbSeparator",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"li\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "BreadcrumbEllipsis",
          "line": 47,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"span\">"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\button.tsx",
      "lines": 57,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\modal.tsx",
      "lines": 34,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 10,
          "condition": "!open",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "Modal",
          "line": 8,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "onChange",
          "line": 9,
          "parameters": [
            {
              "name": "open",
              "type": "boolean"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\progress.tsx",
      "lines": 29,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\resizable.tsx",
      "lines": 46,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "ResizablePanelGroup",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof ResizablePrimitive.PanelGroup>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ResizableHandle",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\r\n  withHandle?: boolean\r\n}"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\separator.tsx",
      "lines": 32,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\city-management\\city-form-dialog.tsx",
      "lines": 54,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 21,
          "condition": "result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "CityFormDialog",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "CityFormDialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 16,
          "parameters": [
            {
              "name": "event",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\client-aware-coupons-loading-skeleton.tsx",
      "lines": 25,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "ClientAwareCouponsLoadingSkeleton",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\partner-coupon-batches\\client-aware-partner-coupon-batches-loading-skeleton.tsx",
      "lines": 24,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "ClientAwarePartnerCouponBatchesLoadingSkeleton",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professional-management\\professional-form-dialog.tsx",
      "lines": 60,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 21,
          "condition": "result.success",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "ProfessionalFormDialog",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalFormDialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSubmit",
          "line": 15,
          "parameters": [
            {
              "name": "event",
              "type": "React.FormEvent<HTMLFormElement>"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 31,
          "rule": "<Input name=\"email\" type=\"email\" placeholder={t(\"admin.professionals.form.emailPlaceholder\")}\r\n     "
        },
        {
          "type": "email",
          "line": 31,
          "rule": "name=\"email\" type=\"email\" placeholder={t(\"admin.professionals.form.emailPlaceholder\")}\r\n            "
        },
        {
          "type": "email",
          "line": 31,
          "rule": "name=\"email\""
        },
        {
          "type": "email",
          "line": 32,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 32,
          "rule": "type=\"email\""
        },
        {
          "type": "email",
          "line": 32,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 32,
          "rule": "placeholder={t(\"admin.professionals.form.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 32,
          "rule": "{t(\"admin.professionals.form.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 32,
          "rule": "t(\"admin.professionals.form.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 32,
          "rule": "\"admin.professionals.form.emailPlaceholder\""
        },
        {
          "type": "email",
          "line": 33,
          "rule": "aria-label={t(\"admin.professionals.form.email\")}"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "{t(\"admin.professionals.form.email\")}"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "t(\"admin.professionals.form.email\")"
        },
        {
          "type": "email",
          "line": 34,
          "rule": "\"admin.professionals.form.email\""
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "<Input name=\"phone\" placeholder={t(\"admin.professionals.form.phonePlaceholder\")}\r\n            aria-l"
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "name=\"phone\" placeholder={t(\"admin.professionals.form.phonePlaceholder\")}\r\n            aria-label={t"
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "name=\"phone\""
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 35,
          "rule": "placeholder={t(\"admin.professionals.form.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 36,
          "rule": "{t(\"admin.professionals.form.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 36,
          "rule": "t(\"admin.professionals.form.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 36,
          "rule": "\"admin.professionals.form.phonePlaceholder\""
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "aria-label={t(\"admin.professionals.form.phone\")}"
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "{t(\"admin.professionals.form.phone\")}"
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "t(\"admin.professionals.form.phone\")"
        },
        {
          "type": "phone",
          "line": 37,
          "rule": "\"admin.professionals.form.phone\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\user-management\\user-form-dialog.tsx",
      "lines": 120,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "UserFormDialog",
          "line": 24,
          "parameters": [
            {
              "name": "unknown",
              "type": "UserFormDialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleFormSubmit",
          "line": 31,
          "parameters": [
            {
              "name": "values",
              "type": "z.infer<typeof formSchema>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 47,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 14,
          "rule": "import { PhoneInput } from \"@/components/common/phone-input\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"@/components/common/phone-input\""
        },
        {
          "type": "email",
          "line": 15,
          "rule": "const formSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 ch"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "const formSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 ch"
        },
        {
          "type": "email",
          "line": 15,
          "rule": "formSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 characte"
        },
        {
          "type": "email",
          "line": 16,
          "rule": "z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 characters.\",\r\n  }),\r"
        },
        {
          "type": "email",
          "line": 16,
          "rule": "{\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 characters.\",\r\n  }),\r\n  email:"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "email: z.string().email({\r\n    message: \"Please enter a valid email address.\",\r\n  })"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "z.string().email({\r\n    message: \"Please enter a valid email address.\",\r\n  })"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "z.string().email"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "email"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "{\r\n    message: \"Please enter a valid email address.\",\r\n  }"
        },
        {
          "type": "email",
          "line": 18,
          "rule": "message: \"Please enter a valid email address.\""
        },
        {
          "type": "email",
          "line": 19,
          "rule": "\"Please enter a valid email address.\""
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "phone: z.string().optional()"
        },
        {
          "type": "phone",
          "line": 19,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 26,
          "rule": "{\r\n  const { t } = useTranslation()\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    res"
        },
        {
          "type": "email",
          "line": 26,
          "rule": "const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defa"
        },
        {
          "type": "email",
          "line": 26,
          "rule": "const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defa"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultVal"
        },
        {
          "type": "email",
          "line": 27,
          "rule": "useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "{\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n"
        },
        {
          "type": "email",
          "line": 28,
          "rule": "defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      role: \"user\",\r\n    }"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "{\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      role: \"user\",\r\n    }"
        },
        {
          "type": "email",
          "line": 29,
          "rule": "email: \"\""
        },
        {
          "type": "email",
          "line": 29,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 30,
          "rule": "phone: \"\""
        },
        {
          "type": "phone",
          "line": 30,
          "rule": "phone"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "<FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={"
        },
        {
          "type": "email",
          "line": 54,
          "rule": "control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n        "
        },
        {
          "type": "email",
          "line": 55,
          "rule": "name=\"email\""
        },
        {
          "type": "email",
          "line": 56,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 56,
          "rule": "render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>{t(\"users.fields."
        },
        {
          "type": "email",
          "line": 56,
          "rule": "{({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>{t(\"users.fields.email\")"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>{t(\"users.fields.email\")}"
        },
        {
          "type": "email",
          "line": 56,
          "rule": "(\r\n                <FormItem>\r\n                  <FormLabel>{t(\"users.fields.email\")}</FormLabel>\r\n "
        },
        {
          "type": "email",
          "line": 56,
          "rule": "<FormItem>\r\n                  <FormLabel>{t(\"users.fields.email\")}</FormLabel>\r\n                  <F"
        },
        {
          "type": "email",
          "line": 57,
          "rule": "<FormLabel>{t(\"users.fields.email\")}</FormLabel>"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "{t(\"users.fields.email\")}"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "t(\"users.fields.email\")"
        },
        {
          "type": "email",
          "line": 58,
          "rule": "\"users.fields.email\""
        },
        {
          "type": "email",
          "line": 59,
          "rule": "<FormControl>\r\n                    <Input placeholder={t(\"users.fields.emailPlaceholder\")} {...field"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "<Input placeholder={t(\"users.fields.emailPlaceholder\")} {...field} />"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "placeholder={t(\"users.fields.emailPlaceholder\")} {...field}"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "placeholder={t(\"users.fields.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "{t(\"users.fields.emailPlaceholder\")}"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "t(\"users.fields.emailPlaceholder\")"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "\"users.fields.emailPlaceholder\""
        },
        {
          "type": "phone",
          "line": 64,
          "rule": "<Controller\r\n              name=\"phone\"\r\n              control={form.control} // Assuming 'control' "
        },
        {
          "type": "phone",
          "line": 64,
          "rule": "name=\"phone\"\r\n              control={form.control} // Assuming 'control' is from the useForm hook in"
        },
        {
          "type": "phone",
          "line": 64,
          "rule": "name=\"phone\""
        },
        {
          "type": "phone",
          "line": 64,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 65,
          "rule": "render={({ field }) => (\r\n                <PhoneInput\r\n                  id=\"phone\"\r\n               "
        },
        {
          "type": "phone",
          "line": 67,
          "rule": "{({ field }) => (\r\n                <PhoneInput\r\n                  id=\"phone\"\r\n                  name"
        },
        {
          "type": "phone",
          "line": 67,
          "rule": "({ field }) => (\r\n                <PhoneInput\r\n                  id=\"phone\"\r\n                  name="
        },
        {
          "type": "phone",
          "line": 67,
          "rule": "(\r\n                <PhoneInput\r\n                  id=\"phone\"\r\n                  name={field.name}\r\n "
        },
        {
          "type": "phone",
          "line": 67,
          "rule": "<PhoneInput\r\n                  id=\"phone\"\r\n                  name={field.name}\r\n                  pl"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "id=\"phone\"\r\n                  name={field.name}\r\n                  placeholder={t(\"users.fields.phon"
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "id=\"phone\""
        },
        {
          "type": "phone",
          "line": 68,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 69,
          "rule": "placeholder={t(\"users.fields.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 70,
          "rule": "{t(\"users.fields.phonePlaceholder\")}"
        },
        {
          "type": "phone",
          "line": 70,
          "rule": "t(\"users.fields.phonePlaceholder\")"
        },
        {
          "type": "phone",
          "line": 70,
          "rule": "\"users.fields.phonePlaceholder\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\layout\\footer.tsx",
      "lines": 28,
      "complexity": 1,
      "conditionals": [
        {
          "type": "switch",
          "line": 5,
          "cases": 3,
          "expression": "language"
        }
      ],
      "functions": [
        {
          "name": "DashboardFooter",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getFooterText",
          "line": 5,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\layout\\header.tsx",
      "lines": 68,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "DashboardHeader",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "DashboardHeaderProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "handleSignOut",
          "line": 12,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\partner\\coupons\\partner-coupons-client.tsx",
      "lines": 43,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "PartnerCouponsClient",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "PartnerCouponsClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 17,
          "parameters": [
            {
              "name": "coupon",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\landing\\footer.tsx",
      "lines": 27,
      "complexity": 1,
      "conditionals": [
        {
          "type": "switch",
          "line": 5,
          "cases": 3,
          "expression": "language"
        }
      ],
      "functions": [
        {
          "name": "LandingFooter",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "getFooterText",
          "line": 5,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\subscriptions\\guest-subscription-selection-step.tsx",
      "lines": 60,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "GuestSubscriptionSelectionStep",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "Props"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "sub",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\breadcrumb.tsx",
      "lines": 116,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 19,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 26,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "BreadcrumbSeparator",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"li\">"
            }
          ],
          "isAsync": false
        },
        {
          "name": "BreadcrumbEllipsis",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<\"span\">"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\button.tsx",
      "lines": 57,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\progress.tsx",
      "lines": 29,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\resizable.tsx",
      "lines": 46,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "ResizablePanelGroup",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof ResizablePrimitive.PanelGroup>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "ResizableHandle",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\r\n  withHandle?: boolean\r\n}"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\separator.tsx",
      "lines": 32,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\auth\\require-admin-session.ts",
      "lines": 16,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session.user.roles.includes(\"admin\")",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "requireAdminSession",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 3,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\auth\\require-session.ts",
      "lines": 17,
      "complexity": 1,
      "conditionals": [
        {
          "type": "if",
          "line": 5,
          "condition": "!session?.user?.id",
          "hasElse": false
        }
      ],
      "functions": [
        {
          "name": "requireUserSession",
          "line": 3,
          "parameters": [],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": [
        {
          "line": 4,
          "hasCatch": true,
          "hasFinally": false
        }
      ]
    },
    {
      "path": "lib\\db\\models\\booking.ts",
      "lines": 224,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 21,
          "rule": "export interface IPaymentDetails {\n  paymentMethodId?: Types.ObjectId\n  transactionId?: string\n  pay"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "paymentStatus: \"pending\" | \"paid\" | \"failed\" | \"not_required\""
        },
        {
          "type": "required",
          "line": 23,
          "rule": "\"pending\" | \"paid\" | \"failed\" | \"not_required\""
        },
        {
          "type": "required",
          "line": 24,
          "rule": "\"not_required\""
        },
        {
          "type": "required",
          "line": 24,
          "rule": "\"not_required\""
        },
        {
          "type": "required",
          "line": 79,
          "rule": "const PriceDetailsSchema = new Schema<IPriceDetails>(\n  {\n    basePrice: { type: Number, required: t"
        },
        {
          "type": "required",
          "line": 79,
          "rule": "const PriceDetailsSchema = new Schema<IPriceDetails>(\n  {\n    basePrice: { type: Number, required: t"
        },
        {
          "type": "required",
          "line": 79,
          "rule": "PriceDetailsSchema = new Schema<IPriceDetails>(\n  {\n    basePrice: { type: Number, required: true, m"
        },
        {
          "type": "required",
          "line": 79,
          "rule": "new Schema<IPriceDetails>(\n  {\n    basePrice: { type: Number, required: true, min: 0 },\n    surcharg"
        },
        {
          "type": "required",
          "line": 80,
          "rule": "{\n    basePrice: { type: Number, required: true, min: 0 },\n    surcharges: [\n      {\n        descrip"
        },
        {
          "type": "required",
          "line": 80,
          "rule": "basePrice: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 80,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 80,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 80,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 81,
          "rule": "surcharges: [\n      {\n        description: { type: String, required: true },\n        amount: { type:"
        },
        {
          "type": "required",
          "line": 81,
          "rule": "[\n      {\n        description: { type: String, required: true },\n        amount: { type: Number, req"
        },
        {
          "type": "required",
          "line": 81,
          "rule": "{\n        description: { type: String, required: true },\n        amount: { type: Number, required: t"
        },
        {
          "type": "required",
          "line": 81,
          "rule": "description: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 82,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 83,
          "rule": "amount: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 83,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 83,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 83,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 90,
          "rule": "finalAmount: { type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 90,
          "rule": "{ type: Number, required: true, min: 0 }"
        },
        {
          "type": "required",
          "line": 90,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 90,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 104,
          "rule": "paymentStatus: {\n      type: String,\n      enum: [\"pending\", \"paid\", \"failed\", \"not_required\"],\n    "
        },
        {
          "type": "required",
          "line": 105,
          "rule": "{\n      type: String,\n      enum: [\"pending\", \"paid\", \"failed\", \"not_required\"],\n      required: tru"
        },
        {
          "type": "required",
          "line": 105,
          "rule": "enum: [\"pending\", \"paid\", \"failed\", \"not_required\"]"
        },
        {
          "type": "required",
          "line": 105,
          "rule": "[\"pending\", \"paid\", \"failed\", \"not_required\"]"
        },
        {
          "type": "required",
          "line": 106,
          "rule": "\"not_required\""
        },
        {
          "type": "required",
          "line": 106,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 106,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "const BookingAddressSnapshotSchema = new Schema<IBookingAddressSnapshot>(\n  {\n    fullAddress: { typ"
        },
        {
          "type": "required",
          "line": 107,
          "rule": "const BookingAddressSnapshotSchema = new Schema<IBookingAddressSnapshot>(\n  {\n    fullAddress: { typ"
        },
        {
          "type": "required",
          "line": 108,
          "rule": "BookingAddressSnapshotSchema = new Schema<IBookingAddressSnapshot>(\n  {\n    fullAddress: { type: Str"
        },
        {
          "type": "required",
          "line": 108,
          "rule": "new Schema<IBookingAddressSnapshot>(\n  {\n    fullAddress: { type: String, required: true },\n    city"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "{\n    fullAddress: { type: String, required: true },\n    city: { type: String, required: true },\n   "
        },
        {
          "type": "required",
          "line": 109,
          "rule": "fullAddress: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 109,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "city: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 110,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "street: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 111,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 120,
          "rule": "const BookingSchema: Schema<IBooking> = new Schema(\n  {\n    bookingNumber: { type: String, required:"
        },
        {
          "type": "required",
          "line": 120,
          "rule": "const BookingSchema: Schema<IBooking> = new Schema(\n  {\n    bookingNumber: { type: String, required:"
        },
        {
          "type": "required",
          "line": 120,
          "rule": "BookingSchema: Schema<IBooking> = new Schema(\n  {\n    bookingNumber: { type: String, required: true,"
        },
        {
          "type": "required",
          "line": 121,
          "rule": "new Schema(\n  {\n    bookingNumber: { type: String, required: true, unique: true, index: true },\n    "
        },
        {
          "type": "required",
          "line": 121,
          "rule": "{\n    bookingNumber: { type: String, required: true, unique: true, index: true },\n    userId: { type"
        },
        {
          "type": "required",
          "line": 121,
          "rule": "bookingNumber: { type: String, required: true, unique: true, index: true }"
        },
        {
          "type": "required",
          "line": 121,
          "rule": "{ type: String, required: true, unique: true, index: true }"
        },
        {
          "type": "required",
          "line": 122,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 122,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 123,
          "rule": "userId: { type: Schema.Types.ObjectId, ref: \"User\", required: false, index: true }"
        },
        {
          "type": "required",
          "line": 123,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: false, index: true }"
        },
        {
          "type": "required",
          "line": 124,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 124,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 128,
          "rule": "treatmentId: { type: Schema.Types.ObjectId, ref: \"Treatment\", required: true }"
        },
        {
          "type": "required",
          "line": 128,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"Treatment\", required: true }"
        },
        {
          "type": "required",
          "line": 129,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 129,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 130,
          "rule": "bookingDateTime: { type: Date, required: true, index: true }"
        },
        {
          "type": "required",
          "line": 131,
          "rule": "{ type: Date, required: true, index: true }"
        },
        {
          "type": "required",
          "line": 131,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 131,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 135,
          "rule": "therapistGenderPreference: { type: String, enum: [\"male\", \"female\", \"any\"], required: true }"
        },
        {
          "type": "required",
          "line": 136,
          "rule": "{ type: String, enum: [\"male\", \"female\", \"any\"], required: true }"
        },
        {
          "type": "required",
          "line": 137,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 137,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 142,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 142,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 143,
          "rule": "priceDetails: { type: PriceDetailsSchema, required: true }"
        },
        {
          "type": "required",
          "line": 144,
          "rule": "{ type: PriceDetailsSchema, required: true }"
        },
        {
          "type": "required",
          "line": 144,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 144,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 145,
          "rule": "paymentDetails: { type: PaymentDetailsSchema, required: true }"
        },
        {
          "type": "required",
          "line": 145,
          "rule": "{ type: PaymentDetailsSchema, required: true }"
        },
        {
          "type": "required",
          "line": 146,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 146,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 146,
          "rule": "source: {\n      type: String,\n      enum: [\"new_purchase\", \"subscription_redemption\", \"gift_voucher_"
        },
        {
          "type": "required",
          "line": 146,
          "rule": "{\n      type: String,\n      enum: [\"new_purchase\", \"subscription_redemption\", \"gift_voucher_redempti"
        },
        {
          "type": "required",
          "line": 148,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 148,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\city.ts",
      "lines": 30,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 6,
          "rule": "const CitySchema = new Schema<ICity>(\r\n  {\r\n    name: { type: String, required: true, unique: true }"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "const CitySchema = new Schema<ICity>(\r\n  {\r\n    name: { type: String, required: true, unique: true }"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "CitySchema = new Schema<ICity>(\r\n  {\r\n    name: { type: String, required: true, unique: true },\r\n   "
        },
        {
          "type": "required",
          "line": 6,
          "rule": "new Schema<ICity>(\r\n  {\r\n    name: { type: String, required: true, unique: true },\r\n    isActive: { "
        },
        {
          "type": "required",
          "line": 6,
          "rule": "{\r\n    name: { type: String, required: true, unique: true },\r\n    isActive: { type: Boolean, default"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "name: { type: String, required: true, unique: true }"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "{ type: String, required: true, unique: true }"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "coordinates: {\r\n      lat: { type: Number, required: true },\r\n      lng: { type: Number, required: t"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "{\r\n      lat: { type: Number, required: true },\r\n      lng: { type: Number, required: true },\r\n    }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "lat: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "lng: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\counter.ts",
      "lines": 32,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "getNextSequenceValue",
          "line": 12,
          "parameters": [
            {
              "name": "sequenceName",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 5,
          "rule": "const CounterSchema: Schema<ICounter> = new Schema({\r\n  _id: { type: String, required: true },\r\n  se"
        },
        {
          "type": "required",
          "line": 5,
          "rule": "const CounterSchema: Schema<ICounter> = new Schema({\r\n  _id: { type: String, required: true },\r\n  se"
        },
        {
          "type": "required",
          "line": 5,
          "rule": "CounterSchema: Schema<ICounter> = new Schema({\r\n  _id: { type: String, required: true },\r\n  sequence"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "new Schema({\r\n  _id: { type: String, required: true },\r\n  sequence_value: { type: Number, default: 0"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "{\r\n  _id: { type: String, required: true },\r\n  sequence_value: { type: Number, default: 0 },\r\n}"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "_id: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\coupon-usage.ts",
      "lines": 28,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 6,
          "rule": "const CouponUsageSchema: Schema<ICouponUsage> = new Schema(\r\n  {\r\n    couponId: { type: Schema.Types"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "const CouponUsageSchema: Schema<ICouponUsage> = new Schema(\r\n  {\r\n    couponId: { type: Schema.Types"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "CouponUsageSchema: Schema<ICouponUsage> = new Schema(\r\n  {\r\n    couponId: { type: Schema.Types.Objec"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "new Schema(\r\n  {\r\n    couponId: { type: Schema.Types.ObjectId, ref: \"Coupon\", required: true, index:"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{\r\n    couponId: { type: Schema.Types.ObjectId, ref: \"Coupon\", required: true, index: true },\r\n    u"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "couponId: { type: Schema.Types.ObjectId, ref: \"Coupon\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"Coupon\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "orderId: { type: Schema.Types.ObjectId, required: true, index: true }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{ type: Schema.Types.ObjectId, required: true, index: true }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\gift-voucher-purchase.ts",
      "lines": 46,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 11,
          "rule": "const GiftVoucherPurchaseSchema = new Schema<IGiftVoucherPurchase>(\r\n  {\r\n    userId: { type: Schema"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "const GiftVoucherPurchaseSchema = new Schema<IGiftVoucherPurchase>(\r\n  {\r\n    userId: { type: Schema"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "GiftVoucherPurchaseSchema = new Schema<IGiftVoucherPurchase>(\r\n  {\r\n    userId: { type: Schema.Types"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "new Schema<IGiftVoucherPurchase>(\r\n  {\r\n    userId: { type: Schema.Types.ObjectId, ref: \"User\", requ"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "{\r\n    userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true },\r\n    statu"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "formState: {\r\n      currentStep: { type: Number, required: true },\r\n      guestInfo: { type: Schema."
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{\r\n      currentStep: { type: Number, required: true },\r\n      guestInfo: { type: Schema.Types.Mixed"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "currentStep: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\password-reset-token.ts",
      "lines": 43,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 5,
          "rule": "const PasswordResetTokenSchema: Schema = new Schema(\r\n  {\r\n    userId: {\r\n      type: mongoose.Schem"
        },
        {
          "type": "required",
          "line": 5,
          "rule": "const PasswordResetTokenSchema: Schema = new Schema(\r\n  {\r\n    userId: {\r\n      type: mongoose.Schem"
        },
        {
          "type": "required",
          "line": 5,
          "rule": "PasswordResetTokenSchema: Schema = new Schema(\r\n  {\r\n    userId: {\r\n      type: mongoose.Schema.Type"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "new Schema(\r\n  {\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "{\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"Us"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"User\", //"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "{\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"User\", // Referen"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "token: {\r\n      type: String,\r\n      required: true,\r\n      unique: true, // Tokens should be unique"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n      unique: true, // Tokens should be unique\r\n    }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "expiresAt: {\r\n      type: Date,\r\n      required: true,\r\n      // Example: Create an index that autom"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "{\r\n      type: Date,\r\n      required: true,\r\n      // Example: Create an index that automatically de"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\payment-method.ts",
      "lines": 64,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 7,
          "rule": "const PaymentMethodSchema = new Schema<IPaymentMethod>(\r\n  {\r\n    userId: {\r\n      type: String,\r\n  "
        },
        {
          "type": "required",
          "line": 7,
          "rule": "const PaymentMethodSchema = new Schema<IPaymentMethod>(\r\n  {\r\n    userId: {\r\n      type: String,\r\n  "
        },
        {
          "type": "required",
          "line": 7,
          "rule": "PaymentMethodSchema = new Schema<IPaymentMethod>(\r\n  {\r\n    userId: {\r\n      type: String,\r\n      re"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "new Schema<IPaymentMethod>(\r\n  {\r\n    userId: {\r\n      type: String,\r\n      required: true,\r\n      i"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{\r\n    userId: {\r\n      type: String,\r\n      required: true,\r\n      index: true,\r\n    },\r\n    cardNu"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "userId: {\r\n      type: String,\r\n      required: true,\r\n      index: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n      index: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "cardNumber: {\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "expiryMonth: {\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "expiryYear: {\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "cvv: {\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 14,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "cardHolderName: {\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 16,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "cardName: {\r\n      type: String,\r\n      required: false,\r\n    }"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "{\r\n      type: String,\r\n      required: false,\r\n    }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\professional-response.ts",
      "lines": 125,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 35,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "phone",
          "line": 12,
          "rule": "phoneNumber: string"
        },
        {
          "type": "phone",
          "line": 12,
          "rule": "phoneNumber"
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "responseMethod?: \"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 14,
          "rule": "\"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 15,
          "rule": "\"phone\""
        },
        {
          "type": "required",
          "line": 17,
          "rule": "const ProfessionalResponseSchema = new Schema<IProfessionalResponse>({\r\n  bookingId: { \r\n    type: S"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "const ProfessionalResponseSchema = new Schema<IProfessionalResponse>({\r\n  bookingId: { \r\n    type: S"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "ProfessionalResponseSchema = new Schema<IProfessionalResponse>({\r\n  bookingId: { \r\n    type: Schema."
        },
        {
          "type": "required",
          "line": 18,
          "rule": "new Schema<IProfessionalResponse>({\r\n  bookingId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"B"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "{\r\n  bookingId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"Booking\", \r\n    required: true,\r\n  "
        },
        {
          "type": "required",
          "line": 19,
          "rule": "bookingId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"Booking\", \r\n    required: true,\r\n    ind"
        },
        {
          "type": "required",
          "line": 19,
          "rule": "{ \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"Booking\", \r\n    required: true,\r\n    index: true \r\n"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "professionalId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\", \r\n    required: true,\r\n    i"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "{ \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\", \r\n    required: true,\r\n    index: true \r\n  }"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phoneNumber: { type: String, required: true }"
        },
        {
          "type": "phone",
          "line": 25,
          "rule": "phoneNumber"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "sentAt: { type: Date, required: true, default: Date.now }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{ type: Date, required: true, default: Date.now }"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "status: { \r\n    type: String, \r\n    enum: [\"pending\", \"accepted\", \"declined\", \"expired\"],\r\n    defau"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "{ \r\n    type: String, \r\n    enum: [\"pending\", \"accepted\", \"declined\", \"expired\"],\r\n    default: \"pen"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "responseMethod: { \r\n    type: String, \r\n    enum: [\"sms\", \"app\", \"phone\"]\r\n  }"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "{ \r\n    type: String, \r\n    enum: [\"sms\", \"app\", \"phone\"]\r\n  }"
        },
        {
          "type": "phone",
          "line": 32,
          "rule": "enum: [\"sms\", \"app\", \"phone\"]"
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "[\"sms\", \"app\", \"phone\"]"
        },
        {
          "type": "phone",
          "line": 33,
          "rule": "\"phone\""
        },
        {
          "type": "required",
          "line": 33,
          "rule": "expiresAt: { \r\n    type: Date, \r\n    required: true,\r\n    default: () => new Date(Date.now() + 30 * "
        },
        {
          "type": "required",
          "line": 34,
          "rule": "{ \r\n    type: Date, \r\n    required: true,\r\n    default: () => new Date(Date.now() + 30 * 60 * 1000),"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 35,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "{\r\n  return this.find({\r\n    bookingId: new mongoose.Types.ObjectId(bookingId),\r\n    status: \"pendin"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "return this.find({\r\n    bookingId: new mongoose.Types.ObjectId(bookingId),\r\n    status: \"pending\",\r\n"
        },
        {
          "type": "phone",
          "line": 47,
          "rule": "this.find({\r\n    bookingId: new mongoose.Types.ObjectId(bookingId),\r\n    status: \"pending\",\r\n    exp"
        },
        {
          "type": "phone",
          "line": 50,
          "rule": "'name phone'"
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "ProfessionalResponseSchema.methods.accept = function(responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\""
        },
        {
          "type": "phone",
          "line": 56,
          "rule": "ProfessionalResponseSchema.methods.accept = function(responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\""
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "function(responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\") {\r\n  this.status = \"accepted\"\r\n  this.resp"
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\""
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "\"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 58,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "ProfessionalResponseSchema.methods.decline = function(responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms"
        },
        {
          "type": "phone",
          "line": 61,
          "rule": "ProfessionalResponseSchema.methods.decline = function(responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "function(responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\") {\r\n  this.status = \"declined\"\r\n  this.resp"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "responseMethod: \"sms\" | \"app\" | \"phone\" = \"sms\""
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "\"sms\" | \"app\" | \"phone\""
        },
        {
          "type": "phone",
          "line": 64,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 64,
          "rule": "\"phone\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\review.ts",
      "lines": 68,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 10,
          "rule": "const ReviewSchema: Schema<IReview> = new Schema(\r\n  {\r\n    bookingId: { \r\n      type: Schema.Types."
        },
        {
          "type": "required",
          "line": 10,
          "rule": "const ReviewSchema: Schema<IReview> = new Schema(\r\n  {\r\n    bookingId: { \r\n      type: Schema.Types."
        },
        {
          "type": "required",
          "line": 11,
          "rule": "ReviewSchema: Schema<IReview> = new Schema(\r\n  {\r\n    bookingId: { \r\n      type: Schema.Types.Object"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "new Schema(\r\n  {\r\n    bookingId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Booking\", \r\n  "
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{\r\n    bookingId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Booking\", \r\n      required: t"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "bookingId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Booking\", \r\n      required: true, \r\n"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{ \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Booking\", \r\n      required: true, \r\n      uniqu"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 15,
          "rule": "userId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"User\", \r\n      required: true, \r\n      "
        },
        {
          "type": "required",
          "line": 16,
          "rule": "{ \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"User\", \r\n      required: true, \r\n      index: t"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "professionalId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"User\", \r\n      required: true, "
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{ \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"User\", \r\n      required: true, \r\n      index: t"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 20,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "treatmentId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Treatment\", \r\n      required: true"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "{ \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Treatment\", \r\n      required: true \r\n    }"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "rating: { \r\n      type: Number, \r\n      required: true, \r\n      min: 1, \r\n      max: 5 \r\n    }"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "{ \r\n      type: Number, \r\n      required: true, \r\n      min: 1, \r\n      max: 5 \r\n    }"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\subscription-purchase.ts",
      "lines": 44,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 10,
          "rule": "const SubscriptionPurchaseSchema = new Schema<ISubscriptionPurchase>(\r\n  {\r\n    userId: { type: Sche"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "const SubscriptionPurchaseSchema = new Schema<ISubscriptionPurchase>(\r\n  {\r\n    userId: { type: Sche"
        },
        {
          "type": "required",
          "line": 10,
          "rule": "SubscriptionPurchaseSchema = new Schema<ISubscriptionPurchase>(\r\n  {\r\n    userId: { type: Schema.Typ"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "new Schema<ISubscriptionPurchase>(\r\n  {\r\n    userId: { type: Schema.Types.ObjectId, ref: \"User\", req"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{\r\n    userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true },\r\n    statu"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "{ type: Schema.Types.ObjectId, ref: \"User\", required: true, index: true }"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 13,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "formState: {\r\n      currentStep: { type: Number, required: true },\r\n      guestInfo: { type: Schema."
        },
        {
          "type": "required",
          "line": 17,
          "rule": "{\r\n      currentStep: { type: Number, required: true },\r\n      guestInfo: { type: Schema.Types.Mixed"
        },
        {
          "type": "required",
          "line": 17,
          "rule": "currentStep: { type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "{ type: Number, required: true }"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 18,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\subscription.ts",
      "lines": 41,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 6,
          "rule": "const SubscriptionSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  description: {"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "const SubscriptionSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  description: {"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "SubscriptionSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  description: { type:"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "new Schema({\r\n  name: { type: String, required: true },\r\n  description: { type: String, required: tr"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "{\r\n  name: { type: String, required: true },\r\n  description: { type: String, required: true },\r\n  qu"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "name: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 7,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "description: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "quantity: { type: Number, required: true, min: 1 }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "{ type: Number, required: true, min: 1 }"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 9,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "validityMonths: { type: Number, required: true, min: 1 }"
        },
        {
          "type": "required",
          "line": 11,
          "rule": "{ type: Number, required: true, min: 1 }"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 12,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\user-subscription.ts",
      "lines": 127,
      "complexity": 1,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "next",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 18,
          "rule": "guestInfo?: { // Guest information for non-user purchases\r\n    name: string\r\n    email: string\r\n    "
        },
        {
          "type": "email",
          "line": 19,
          "rule": "{ // Guest information for non-user purchases\r\n    name: string\r\n    email: string\r\n    phone: strin"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email: string"
        },
        {
          "type": "email",
          "line": 20,
          "rule": "email"
        },
        {
          "type": "phone",
          "line": 21,
          "rule": "phone: string"
        },
        {
          "type": "phone",
          "line": 21,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "const UserSubscriptionSchema = new Schema<IUserSubscription>(\r\n  {\r\n    userId: {\r\n      type: Schem"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "const UserSubscriptionSchema = new Schema<IUserSubscription>(\r\n  {\r\n    userId: {\r\n      type: Schem"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "UserSubscriptionSchema = new Schema<IUserSubscription>(\r\n  {\r\n    userId: {\r\n      type: Schema.Type"
        },
        {
          "type": "required",
          "line": 23,
          "rule": "new Schema<IUserSubscription>(\r\n  {\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \""
        },
        {
          "type": "required",
          "line": 23,
          "rule": "{\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: false, // "
        },
        {
          "type": "required",
          "line": 23,
          "rule": "userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: false, // Made op"
        },
        {
          "type": "required",
          "line": 24,
          "rule": "{\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: false, // Made optional f"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "subscriptionId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Subscription\",\r\n      required: t"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "{\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Subscription\",\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 28,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "treatmentId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Treatment\",\r\n      required: true,\r\n"
        },
        {
          "type": "required",
          "line": 29,
          "rule": "{\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Treatment\",\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 30,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 34,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 38,
          "rule": "purchaseDate: {\r\n      type: Date,\r\n      required: true,\r\n      default: Date.now,\r\n    }"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "{\r\n      type: Date,\r\n      required: true,\r\n      default: Date.now,\r\n    }"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 39,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 40,
          "rule": "expiryDate: {\r\n      type: Date,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 41,
          "rule": "{\r\n      type: Date,\r\n      required: true,\r\n    }"
        },
        {
          "type": "required",
          "line": 41,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 41,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "totalQuantity: {\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n    }"
        },
        {
          "type": "required",
          "line": 42,
          "rule": "{\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n    }"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "remainingQuantity: {\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n    }"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "{\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n    }"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 45,
          "rule": "status: {\r\n      type: String,\r\n      required: true,\r\n      enum: [\"active\", \"expired\", \"depleted\","
        },
        {
          "type": "required",
          "line": 46,
          "rule": "{\r\n      type: String,\r\n      required: true,\r\n      enum: [\"active\", \"expired\", \"depleted\", \"cancel"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 46,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 49,
          "rule": "paymentMethodId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"PaymentMethod\",\r\n      required:"
        },
        {
          "type": "required",
          "line": 49,
          "rule": "{\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"PaymentMethod\",\r\n      required: false, // Made o"
        },
        {
          "type": "required",
          "line": 51,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 51,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 52,
          "rule": "paymentAmount: {\r\n      // Total price paid for the subscription package\r\n      type: Number,\r\n     "
        },
        {
          "type": "required",
          "line": 52,
          "rule": "{\r\n      // Total price paid for the subscription package\r\n      type: Number,\r\n      required: true"
        },
        {
          "type": "required",
          "line": 54,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 54,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 55,
          "rule": "pricePerSession: {\r\n      // Price of a single session at the time of purchase\r\n      type: Number,\r"
        },
        {
          "type": "required",
          "line": 55,
          "rule": "{\r\n      // Price of a single session at the time of purchase\r\n      type: Number,\r\n      required: "
        },
        {
          "type": "required",
          "line": 57,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 57,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 59,
          "rule": "guestInfo: {\r\n      // Guest information for non-user purchases\r\n      type: {\r\n        name: { type"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "{\r\n      // Guest information for non-user purchases\r\n      type: {\r\n        name: { type: String, r"
        },
        {
          "type": "email",
          "line": 60,
          "rule": "type: {\r\n        name: { type: String, required: true },\r\n        email: { type: String, required: t"
        },
        {
          "type": "email",
          "line": 61,
          "rule": "{\r\n        name: { type: String, required: true },\r\n        email: { type: String, required: true },"
        },
        {
          "type": "required",
          "line": 61,
          "rule": "name: { type: String, required: true }"
        },
        {
          "type": "required",
          "line": 61,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 62,
          "rule": "email: { type: String, required: true }"
        },
        {
          "type": "email",
          "line": 62,
          "rule": "email"
        },
        {
          "type": "required",
          "line": 62,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 63,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 63,
          "rule": "required"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "phone: { type: String, required: true }"
        },
        {
          "type": "phone",
          "line": 63,
          "rule": "phone"
        },
        {
          "type": "required",
          "line": 63,
          "rule": "{ type: String, required: true }"
        },
        {
          "type": "required",
          "line": 64,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 64,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 64,
          "rule": "required: false"
        },
        {
          "type": "required",
          "line": 64,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\models\\verification-token.ts",
      "lines": 39,
      "complexity": 1,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 1,
          "rule": "import mongoose from \"mongoose\"\r\n\r\nconst verificationTokenSchema = new mongoose.Schema({\r\n  identifi"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "const verificationTokenSchema = new mongoose.Schema({\r\n  identifier: {\r\n    type: String,\r\n    requi"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "const verificationTokenSchema = new mongoose.Schema({\r\n  identifier: {\r\n    type: String,\r\n    requi"
        },
        {
          "type": "email",
          "line": 1,
          "rule": "verificationTokenSchema = new mongoose.Schema({\r\n  identifier: {\r\n    type: String,\r\n    required: t"
        },
        {
          "type": "email",
          "line": 2,
          "rule": "new mongoose.Schema({\r\n  identifier: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  identifierTy"
        },
        {
          "type": "email",
          "line": 2,
          "rule": "{\r\n  identifier: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  identifierType: {\r\n    type: Str"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "identifier: {\r\n    type: String,\r\n    required: true,\r\n  }"
        },
        {
          "type": "required",
          "line": 3,
          "rule": "{\r\n    type: String,\r\n    required: true,\r\n  }"
        },
        {
          "type": "required",
          "line": 3,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 3,
          "rule": "required"
        },
        {
          "type": "email",
          "line": 4,
          "rule": "identifierType: {\r\n    type: String,\r\n    enum: [\"email\", \"phone\"],\r\n    required: true,\r\n  }"
        },
        {
          "type": "email",
          "line": 4,
          "rule": "{\r\n    type: String,\r\n    enum: [\"email\", \"phone\"],\r\n    required: true,\r\n  }"
        },
        {
          "type": "email",
          "line": 4,
          "rule": "enum: [\"email\", \"phone\"]"
        },
        {
          "type": "email",
          "line": 5,
          "rule": "[\"email\", \"phone\"]"
        },
        {
          "type": "email",
          "line": 5,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 5,
          "rule": "\"phone\""
        },
        {
          "type": "required",
          "line": 5,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 5,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 5,
          "rule": "code: {\r\n    type: String,\r\n    required: true,\r\n  }"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "{\r\n    type: String,\r\n    required: true,\r\n  }"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 6,
          "rule": "required"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "expiresAt: {\r\n    type: Date,\r\n    required: true,\r\n  }"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "{\r\n    type: Date,\r\n    required: true,\r\n  }"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "required: true"
        },
        {
          "type": "required",
          "line": 8,
          "rule": "required"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "app\\api\\auth\\[...nextauth]\\route.ts",
      "lines": 8,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\auth\\forgot-password\\page.tsx",
      "lines": 22,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "ForgotPasswordPage",
          "line": 3,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\auth\\login\\page.tsx",
      "lines": 25,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "LoginPage",
          "line": 4,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\auth\\register\\page.tsx",
      "lines": 25,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "RegisterPage",
          "line": 4,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\dashboard\\loading.tsx",
      "lines": 13,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "DashboardLoading",
          "line": 1,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\layout.tsx",
      "lines": 34,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "RootLayout",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "{\r\n  children: React.ReactNode\r\n}"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\loading.tsx",
      "lines": 13,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Loading",
          "line": 1,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "app\\page.tsx",
      "lines": 6,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "HomePage",
          "line": 2,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\theme-provider.tsx",
      "lines": 12,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "ThemeProvider",
          "line": 3,
          "parameters": [
            {
              "name": "unknown",
              "type": "ThemeProviderProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\accordion.tsx",
      "lines": 59,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\alert-dialog.tsx",
      "lines": 142,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AlertDialogHeader",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AlertDialogFooter",
          "line": 47,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 56,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\alert.tsx",
      "lines": 60,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\aspect-ratio.tsx",
      "lines": 8,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\avatar.tsx",
      "lines": 41,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\badge.tsx",
      "lines": 37,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Badge",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "BadgeProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\card.tsx",
      "lines": 80,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\checkbox.tsx",
      "lines": 31,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\collapsible.tsx",
      "lines": 12,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\command.tsx",
      "lines": 154,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CommandDialog",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "DialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 54,
          "parameters": [
            {
              "name": "props",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CommandShortcut",
          "line": 92,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\dialog.tsx",
      "lines": 119,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 21,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DialogHeader",
          "line": 55,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DialogFooter",
          "line": 61,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 80,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\drawer.tsx",
      "lines": 108,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Drawer",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof DrawerPrimitive.Root>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 41,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 59,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 67,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\hover-card.tsx",
      "lines": 30,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\input.tsx",
      "lines": 23,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\label.tsx",
      "lines": 27,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\navigation-menu.tsx",
      "lines": 129,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\popover.tsx",
      "lines": 32,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\radio-group.tsx",
      "lines": 39,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 8,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\sheet.tsx",
      "lines": 141,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SheetHeader",
          "line": 59,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SheetFooter",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\skeleton.tsx",
      "lines": 16,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Skeleton",
          "line": 1,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\slider.tsx",
      "lines": 29,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\sonner.tsx",
      "lines": 32,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Toaster",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "ToasterProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\switch.tsx",
      "lines": 30,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\table.tsx",
      "lines": 118,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 17,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 30,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\tabs.tsx",
      "lines": 56,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\textarea.tsx",
      "lines": 23,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\toast.tsx",
      "lines": 130,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 40,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 82,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 89,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\toggle.tsx",
      "lines": 46,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\tooltip.tsx",
      "lines": 31,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\common\\ui\\use-mobile.tsx",
      "lines": 20,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "useIsMobile",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "onChange",
          "line": 7,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\coupon-card-skeleton.tsx",
      "lines": 45,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "CouponCardSkeleton",
          "line": 4,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\coupons\\table-loading-skeleton.tsx",
      "lines": 22,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "TableLoadingSkeleton",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\gift-vouchers\\admin-gift-voucher-details-modal.tsx",
      "lines": 3,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\tabs\\professional-bookings-tab.tsx",
      "lines": 38,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "ProfessionalBookingsTab",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalBookingsTabProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\tabs\\professional-financial-tab.tsx",
      "lines": 42,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "ProfessionalFinancialTab",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalFinancialTabProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\tabs\\professional-treatments-tab.tsx",
      "lines": 1,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\professionals\\tabs\\professional-work-areas-tab.tsx",
      "lines": 40,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "ProfessionalWorkAreasTab",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "ProfessionalWorkAreasTabProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-admin-card-skeleton.tsx",
      "lines": 47,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "UserSubscriptionAdminCardSkeleton",
          "line": 3,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\layout\\dashboard-layout-client.tsx",
      "lines": 37,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "DashboardLayoutClient",
          "line": 8,
          "parameters": [
            {
              "name": "unknown",
              "type": "DashboardLayoutClientProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 19,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\dashboard\\member\\bookings\\bookings-table-skeleton.tsx",
      "lines": 88,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "BookingsTableSkeleton",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 38,
          "parameters": [
            {
              "name": "_",
              "type": "any"
            },
            {
              "name": "i",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\landing\\landing-page.tsx",
      "lines": 17,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "LandingPage",
          "line": 3,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\theme-provider.tsx",
      "lines": 12,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "ThemeProvider",
          "line": 3,
          "parameters": [
            {
              "name": "unknown",
              "type": "ThemeProviderProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\accordion.tsx",
      "lines": 59,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 31,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\alert-dialog.tsx",
      "lines": 142,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AlertDialogHeader",
          "line": 40,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "AlertDialogFooter",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\alert.tsx",
      "lines": 60,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 28,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\aspect-ratio.tsx",
      "lines": 8,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\avatar.tsx",
      "lines": 51,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 15,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\badge.tsx",
      "lines": 37,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Badge",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "BadgeProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\calendar.tsx",
      "lines": 67,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Calendar",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "CalendarProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 49,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 50,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\card.tsx",
      "lines": 80,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 29,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 34,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\checkbox.tsx",
      "lines": 31,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\collapsible.tsx",
      "lines": 12,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\command.tsx",
      "lines": 154,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CommandDialog",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "DialogProps"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 32,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 54,
          "parameters": [
            {
              "name": "props",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 61,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 73,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "CommandShortcut",
          "line": 92,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLSpanElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\dialog.tsx",
      "lines": 123,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DialogHeader",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DialogFooter",
          "line": 54,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 62,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 71,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\drawer.tsx",
      "lines": 119,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Drawer",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.ComponentProps<typeof DrawerPrimitive.Root>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 14,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 22,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DrawerHeader",
          "line": 33,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "DrawerFooter",
          "line": 38,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 46,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 55,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\hover-card.tsx",
      "lines": 30,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\input.tsx",
      "lines": 23,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\label.tsx",
      "lines": 27,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\navigation-menu.tsx",
      "lines": 129,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 53,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 70,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 88,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\popover.tsx",
      "lines": 32,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 9,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\radio-group.tsx",
      "lines": 45,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 8,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\sheet.tsx",
      "lines": 141,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 12,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 43,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SheetHeader",
          "line": 58,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "SheetFooter",
          "line": 64,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 72,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\skeleton.tsx",
      "lines": 16,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Skeleton",
          "line": 1,
          "parameters": [
            {
              "name": "unknown",
              "type": "React.HTMLAttributes<HTMLDivElement>"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\slider.tsx",
      "lines": 29,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\sonner.tsx",
      "lines": 32,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "Toaster",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "ToasterProps"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\switch.tsx",
      "lines": 30,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 6,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\table.tsx",
      "lines": 118,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 11,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 17,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 23,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 30,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 45,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 52,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\tabs.tsx",
      "lines": 56,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 7,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 16,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 31,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\textarea.tsx",
      "lines": 23,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\toast.tsx",
      "lines": 130,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 48,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 66,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 81,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 89,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\toggle.tsx",
      "lines": 46,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 27,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\tooltip.tsx",
      "lines": 31,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            },
            {
              "name": "ref",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "components\\ui\\use-mobile.tsx",
      "lines": 20,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "useIsMobile",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "onChange",
          "line": 7,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "hooks\\use-debounce.ts",
      "lines": 17,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "useDebounce",
          "line": 1,
          "parameters": [
            {
              "name": "value",
              "type": "T"
            },
            {
              "name": "delay",
              "type": "number"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 4,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 6,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "hooks\\use-mobile.tsx",
      "lines": 20,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "useIsMobile",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 5,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "onChange",
          "line": 7,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 10,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "hooks\\use-query-client.ts",
      "lines": 8,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "useAppQueryClient",
          "line": 2,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\cache\\cache-utils.ts",
      "lines": 27,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "clearUserCache",
          "line": 2,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "clearAllUserData",
          "line": 7,
          "parameters": [],
          "isAsync": false
        },
        {
          "name": "clearSensitiveCache",
          "line": 10,
          "parameters": [],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\db.ts",
      "lines": 4,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\db\\queries\\verification-queries.ts",
      "lines": 45,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "findValidOTP",
          "line": 3,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "identifierType",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "code",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "createOTP",
          "line": 9,
          "parameters": [
            {
              "name": "identifier",
              "type": "string"
            },
            {
              "name": "identifierType",
              "type": "\"email\" | \"phone\""
            },
            {
              "name": "code",
              "type": "string"
            },
            {
              "name": "expiresInMinutes",
              "type": "any"
            }
          ],
          "isAsync": true
        },
        {
          "name": "incrementAttempts",
          "line": 20,
          "parameters": [
            {
              "name": "tokenId",
              "type": "string"
            }
          ],
          "isAsync": true
        },
        {
          "name": "deleteOTP",
          "line": 23,
          "parameters": [
            {
              "name": "tokenId",
              "type": "string"
            }
          ],
          "isAsync": true
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 3,
          "rule": "class VerificationQueries {\r\n  static async findValidOTP(identifier: string, identifierType: \"email\""
        },
        {
          "type": "email",
          "line": 3,
          "rule": "static async findValidOTP(identifier: string, identifierType: \"email\" | \"phone\", code: string) {\r\n  "
        },
        {
          "type": "email",
          "line": 4,
          "rule": "identifierType: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 5,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 5,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 5,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 5,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 5,
          "rule": "\"phone\""
        },
        {
          "type": "email",
          "line": 9,
          "rule": "static async createOTP(identifier: string, identifierType: \"email\" | \"phone\", code: string, expiresI"
        },
        {
          "type": "email",
          "line": 10,
          "rule": "identifierType: \"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 10,
          "rule": "\"email\" | \"phone\""
        },
        {
          "type": "email",
          "line": 10,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 10,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 10,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 10,
          "rule": "\"phone\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\notifications\\notification-types.ts",
      "lines": 81,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "email",
          "line": 36,
          "rule": "export interface EmailRecipient {\r\n  type: \"email\"\r\n  value: string\r\n  name?: string\r\n  language: No"
        },
        {
          "type": "email",
          "line": 37,
          "rule": "type: \"email\""
        },
        {
          "type": "email",
          "line": 37,
          "rule": "\"email\""
        },
        {
          "type": "email",
          "line": 37,
          "rule": "\"email\""
        },
        {
          "type": "phone",
          "line": 39,
          "rule": "export interface PhoneRecipient {\r\n  type: \"phone\"\r\n  value: string\r\n  language: NotificationLanguag"
        },
        {
          "type": "phone",
          "line": 40,
          "rule": "type: \"phone\""
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "\"phone\""
        },
        {
          "type": "phone",
          "line": 41,
          "rule": "\"phone\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\types\\purchase-summary.ts",
      "lines": 131,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 21,
          "rule": "paymentStatus: 'pending' | 'paid' | 'failed' | 'not_required'"
        },
        {
          "type": "required",
          "line": 21,
          "rule": "'pending' | 'paid' | 'failed' | 'not_required'"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "'not_required'"
        },
        {
          "type": "required",
          "line": 22,
          "rule": "'not_required'"
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\utils.ts",
      "lines": 7,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "cn",
          "line": 2,
          "parameters": [
            {
              "name": "inputs",
              "type": "ClassValue[]"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "lib\\validation\\coupon-schemas.ts",
      "lines": 50,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 15,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 37,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 35,
          "rule": "id: z.string().min(1, \"Coupon ID is required for update\")"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "z.string().min(1, \"Coupon ID is required for update\")"
        },
        {
          "type": "required",
          "line": 36,
          "rule": "\"Coupon ID is required for update\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "lib\\validation\\partner-coupon-batch-schemas.ts",
      "lines": 60,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 20,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        },
        {
          "name": "anonymous",
          "line": 39,
          "parameters": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [
        {
          "type": "required",
          "line": 1,
          "rule": "import { z } from \"zod\"\r\n\r\nexport const PartnerCouponBatchBaseSchema = z\r\n  .object({\r\n    name: z.s"
        },
        {
          "type": "required",
          "line": 1,
          "rule": "export const PartnerCouponBatchBaseSchema = z\r\n  .object({\r\n    name: z.string().min(1, \"Name is req"
        },
        {
          "type": "required",
          "line": 1,
          "rule": "const PartnerCouponBatchBaseSchema = z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\")"
        },
        {
          "type": "required",
          "line": 1,
          "rule": "PartnerCouponBatchBaseSchema = z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim("
        },
        {
          "type": "required",
          "line": 2,
          "rule": "z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string()"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string()"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "z\r\n  .object({\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string()"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "{\r\n    name: z.string().min(1, \"Name is required\").trim(),\r\n    description: z.string().optional(),\r"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "name: z.string().min(1, \"Name is required\").trim()"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "z.string().min(1, \"Name is required\").trim()"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "z.string().min(1, \"Name is required\").trim"
        },
        {
          "type": "required",
          "line": 2,
          "rule": "z.string().min(1, \"Name is required\")"
        },
        {
          "type": "required",
          "line": 3,
          "rule": "\"Name is required\""
        },
        {
          "type": "required",
          "line": 24,
          "rule": "export const UpdatePartnerCouponBatchSchema = z\r\n  .object({\r\n    id: z.string().min(1, \"Batch ID is"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "const UpdatePartnerCouponBatchSchema = z\r\n  .object({\r\n    id: z.string().min(1, \"Batch ID is requir"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "UpdatePartnerCouponBatchSchema = z\r\n  .object({\r\n    id: z.string().min(1, \"Batch ID is required for"
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\r\n  .object({\r\n    id: z.string().min(1, \"Batch ID is required for update\"),\r\n    name: z.string()."
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\r\n  .object({\r\n    id: z.string().min(1, \"Batch ID is required for update\"),\r\n    name: z.string()."
        },
        {
          "type": "required",
          "line": 25,
          "rule": "z\r\n  .object({\r\n    id: z.string().min(1, \"Batch ID is required for update\"),\r\n    name: z.string()."
        },
        {
          "type": "required",
          "line": 26,
          "rule": "{\r\n    id: z.string().min(1, \"Batch ID is required for update\"),\r\n    name: z.string().min(1, \"Name "
        },
        {
          "type": "required",
          "line": 26,
          "rule": "id: z.string().min(1, \"Batch ID is required for update\")"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "z.string().min(1, \"Batch ID is required for update\")"
        },
        {
          "type": "required",
          "line": 26,
          "rule": "\"Batch ID is required for update\""
        },
        {
          "type": "required",
          "line": 27,
          "rule": "name: z.string().min(1, \"Name is required\").trim()"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "z.string().min(1, \"Name is required\").trim()"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "z.string().min(1, \"Name is required\").trim"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "z.string().min(1, \"Name is required\")"
        },
        {
          "type": "required",
          "line": 27,
          "rule": "\"Name is required\""
        },
        {
          "type": "required",
          "line": 42,
          "rule": "export const UpdateCouponsInBatchSchema = z.object({\r\n  batchId: z.string().min(1, \"Batch ID is requ"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "const UpdateCouponsInBatchSchema = z.object({\r\n  batchId: z.string().min(1, \"Batch ID is required\"),"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "UpdateCouponsInBatchSchema = z.object({\r\n  batchId: z.string().min(1, \"Batch ID is required\"),\r\n  co"
        },
        {
          "type": "required",
          "line": 43,
          "rule": "z.object({\r\n  batchId: z.string().min(1, \"Batch ID is required\"),\r\n  couponIds: z.array(z.string())."
        },
        {
          "type": "required",
          "line": 44,
          "rule": "{\r\n  batchId: z.string().min(1, \"Batch ID is required\"),\r\n  couponIds: z.array(z.string()).min(1, \"A"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "batchId: z.string().min(1, \"Batch ID is required\")"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "z.string().min(1, \"Batch ID is required\")"
        },
        {
          "type": "required",
          "line": 44,
          "rule": "\"Batch ID is required\""
        }
      ],
      "errorHandling": []
    },
    {
      "path": "middleware.ts",
      "lines": 19,
      "complexity": 0,
      "conditionals": [],
      "functions": [
        {
          "name": "anonymous",
          "line": 5,
          "parameters": [
            {
              "name": "unknown",
              "type": "any"
            }
          ],
          "isAsync": false
        }
      ],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    },
    {
      "path": "tailwind.config.ts",
      "lines": 103,
      "complexity": 0,
      "conditionals": [],
      "functions": [],
      "apiRoutes": [],
      "validations": [],
      "errorHandling": []
    }
  ],
  "totalComplexity": 6400,
  "conditionalPaths": [],
  "errorHandling": [],
  "apiEndpoints": [],
  "validationRules": [],
  "businessLogic": [],
  "testScenarios": [
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 64,
      "scenario": "Test booking-actions: Verify behavior when settings.specialDateEvents is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 68,
      "scenario": "Test booking-actions: Verify behavior when isSameDay(new Date(eventDate), date) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test booking-actions: Verify behavior when specialDateSetting is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 87,
      "scenario": "Test booking-actions: Verify behavior when isNaN(selectedDateUTC.getTime()) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 98,
      "scenario": "Test booking-actions: Verify behavior when !treatment || !treatment.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 100,
      "scenario": "Test booking-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 104,
      "scenario": "Test booking-actions: Verify behavior when treatment.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 107,
      "scenario": "Test booking-actions: Verify behavior when treatment.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 108,
      "scenario": "Test booking-actions: Verify behavior when !selectedDurationId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 112,
      "scenario": "Test booking-actions: Verify behavior when !durationObj is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 115,
      "scenario": "Test booking-actions: Verify behavior when treatmentDurationMinutes <= 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 119,
      "scenario": "Test booking-actions: Verify behavior when !daySettings || !daySettings.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 130,
      "scenario": "Test booking-actions: Verify behavior when isToday && 'cutoffTime' in daySettings && daySettings.cutoffTime is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 137,
      "scenario": "Test booking-actions: Verify behavior when isToday && isCutoffTimeReached is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 159,
      "scenario": "Test booking-actions: Verify behavior when endTimeMinutes <= startTimeMinutes is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 170,
      "scenario": "Test booking-actions: Verify behavior when daySettings.hasPriceAddition && daySettings.priceAddition && daySettings.priceAddition.amount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 194,
      "scenario": "Test booking-actions: Verify behavior when isSlotAvailable is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 197,
      "scenario": "Test booking-actions: Verify behavior when surchargeAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 204,
      "scenario": "Test booking-actions: Verify behavior when !isToday && 'cutoffTime' in daySettings && daySettings.cutoffTime is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 220,
      "scenario": "Test booking-actions: Verify behavior when !validationResult.success is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 237,
      "scenario": "Test booking-actions: Verify behavior when !treatment || !treatment.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 240,
      "scenario": "Test booking-actions: Verify behavior when treatment.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 242,
      "scenario": "Test booking-actions: Verify behavior when treatment.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 243,
      "scenario": "Test booking-actions: Verify behavior when !selectedDurationId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 247,
      "scenario": "Test booking-actions: Verify behavior when !duration is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 260,
      "scenario": "Test booking-actions: Verify behavior when settings is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 262,
      "scenario": "Test booking-actions: Verify behavior when daySettings?.isActive &&\n        daySettings.hasPriceAddition &&\n        daySettings.priceAddition?.amount &&\n        daySettings.priceAddition.amount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 271,
      "scenario": "Test booking-actions: Verify behavior when surchargeAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 279,
      "scenario": "Test booking-actions: Verify behavior when userSubscriptionId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 286,
      "scenario": "Test booking-actions: Verify behavior when userSub &&\n        ((userSub.userId && userId && userSub.userId.toString() === userId) || (userSub.userId == null && userId == null)) &&\n        userSub.status === \"active\" &&\n        userSub.remainin is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 294,
      "scenario": "Test booking-actions: Verify behavior when isTreatmentMatch && subTreatment.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 301,
      "scenario": "Test booking-actions: Verify behavior when isTreatmentMatch && isDurationMatch is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 307,
      "scenario": "Test booking-actions: Verify behavior when giftVoucherCode is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 312,
      "scenario": "Test booking-actions: Verify behavior when voucher && voucher.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 314,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 318,
      "scenario": "Test booking-actions: Verify behavior when treatment.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 322,
      "scenario": "Test booking-actions: Verify behavior when !voucher.selectedDurationId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 325,
      "scenario": "Test booking-actions: Verify behavior when treatmentMatches && durationMatches && !priceDetails.isBaseTreatmentCoveredBySubscription is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 335,
      "scenario": "Test booking-actions: Verify behavior when priceDetails.appliedGiftVoucherId && subtotalBeforeGeneralReductions > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 340,
      "scenario": "Test booking-actions: Verify behavior when voucherToApply &&\n        voucherToApply.isActive &&\n        voucherToApply.voucherType === \"monetary\" &&\n        voucherToApply.remainingAmount &&\n        voucherToApply.remainingAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 346,
      "scenario": "Test booking-actions: Verify behavior when amountToApplyFromMonetary > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 352,
      "scenario": "Test booking-actions: Verify behavior when currentTotalDue > 0 && couponCode && !giftVoucherCode && !userSubscriptionId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 356,
      "scenario": "Test booking-actions: Verify behavior when coupon &&\n        coupon.isActive &&\n        new Date(coupon.validFrom) <= now &&\n        new Date(coupon.validUntil) >= now &&\n        (coupon.usageLimit === 0 || coupon.timesUsed < coupon.usageLimit is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 361,
      "scenario": "Test booking-actions: Verify behavior when coupon.discountType === \"percentage\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 371,
      "scenario": "Test booking-actions: Verify behavior when priceDetails.isBaseTreatmentCoveredBySubscription || priceDetails.isBaseTreatmentCoveredByTreatmentVoucher is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 386,
      "scenario": "Test booking-actions: Verify behavior when !validationResult.success is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 395,
      "scenario": "Test booking-actions: Verify behavior when !session || session.user.id !== validatedPayload.userId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 403,
      "scenario": "Test booking-actions: Verify behavior when !bookingUser is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 407,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.customAddressDetails is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 408,
      "scenario": "Test booking-actions: Verify behavior when !validatedPayload.customAddressDetails.fullAddress is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 414,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.selectedAddressId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 417,
      "scenario": "Test booking-actions: Verify behavior when !selectedAddressDoc is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 463,
      "scenario": "Test booking-actions: Verify behavior when !bookingAddressSnapshot.fullAddress is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 530,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.priceDetails.redeemedUserSubscriptionId &&\n        validatedPayload.priceDetails.isBaseTreatmentCoveredBySubscription is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 537,
      "scenario": "Test booking-actions: Verify behavior when !userSub || userSub.remainingQuantity < 1 || userSub.status !== \"active\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 541,
      "scenario": "Test booking-actions: Verify behavior when userSub.remainingQuantity === 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 544,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.priceDetails.appliedGiftVoucherId &&\n        validatedPayload.priceDetails.voucherAppliedAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 550,
      "scenario": "Test booking-actions: Verify behavior when !voucher is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 552,
      "scenario": "Test booking-actions: Verify behavior when !voucher.isActive && voucher.status !== \"sent\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 555,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 560,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 561,
      "scenario": "Test booking-actions: Verify behavior when typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount < validatedPayload.priceDetails.voucherAppliedAmount is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 570,
      "scenario": "Test booking-actions: Verify behavior when voucher.remainingAmount < 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 581,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 586,
      "scenario": "Test booking-actions: Verify behavior when !coupon || !coupon.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 590,
      "scenario": "Test booking-actions: Verify behavior when bookingResult is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 590,
      "scenario": "Test booking-actions: Verify behavior when bookingResult.priceDetails.finalAmount === 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 596,
      "scenario": "Test booking-actions: Verify behavior when bookingResult is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 603,
      "scenario": "Test booking-actions: Verify behavior when updatedVoucherDetails is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 611,
      "scenario": "Test booking-actions: Verify behavior when userForNotification && treatment is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 619,
      "scenario": "Test booking-actions: Verify behavior when methods.includes(\"email\") && userForNotification.email is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 623,
      "scenario": "Test booking-actions: Verify behavior when methods.includes(\"sms\") && userForNotification.phone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 627,
      "scenario": "Test booking-actions: Verify behavior when finalBookingObject.recipientEmail &&\n            finalBookingObject.recipientEmail !== userForNotification.email is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 641,
      "scenario": "Test booking-actions: Verify behavior when finalBookingObject.recipientPhone &&\n            finalBookingObject.recipientPhone !== userForNotification.phone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 647,
      "scenario": "Test booking-actions: Verify behavior when recipients.length > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 689,
      "scenario": "Test booking-actions: Verify behavior when !session || session.user.id !== userId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 699,
      "scenario": "Test booking-actions: Verify behavior when status && status !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "switch",
      "line": 699,
      "scenario": "Test booking-actions: Verify all 4 switch cases for status"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 708,
      "scenario": "Test booking-actions: Verify behavior when treatment && treatment !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 711,
      "scenario": "Test booking-actions: Verify behavior when dateRange && dateRange !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "switch",
      "line": 715,
      "scenario": "Test booking-actions: Verify all 4 switch cases for dateRange"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 738,
      "scenario": "Test booking-actions: Verify behavior when search && search.trim() is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 744,
      "scenario": "Test booking-actions: Verify behavior when sortBy is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 795,
      "scenario": "Test booking-actions: Verify behavior when error && typeof error === \"object\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 802,
      "scenario": "Test booking-actions: Verify behavior when error is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 817,
      "scenario": "Test booking-actions: Verify behavior when !authSession || authSession.user.id !== userId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 818,
      "scenario": "Test booking-actions: Verify behavior when !(cancelledByRole === \"admin\" && authSession?.user?.roles.includes(\"admin\")) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 826,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 828,
      "scenario": "Test booking-actions: Verify behavior when booking.userId.toString() !== userId && cancelledByRole !== \"admin\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 830,
      "scenario": "Test booking-actions: Verify behavior when [\"completed\", \"cancelled\", \"refunded\"].includes(booking.status) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 836,
      "scenario": "Test booking-actions: Verify behavior when booking.priceDetails.redeemedUserSubscriptionId &&\n        booking.priceDetails.isBaseTreatmentCoveredBySubscription is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 842,
      "scenario": "Test booking-actions: Verify behavior when userSub is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 843,
      "scenario": "Test booking-actions: Verify behavior when userSub.status === \"depleted\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 846,
      "scenario": "Test booking-actions: Verify behavior when booking.priceDetails.appliedGiftVoucherId && booking.priceDetails.voucherAppliedAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 851,
      "scenario": "Test booking-actions: Verify behavior when voucher is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 852,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"treatment\" && booking.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 858,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 861,
      "scenario": "Test booking-actions: Verify behavior when voucher.originalAmount && voucher.remainingAmount > voucher.originalAmount is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 871,
      "scenario": "Test booking-actions: Verify behavior when voucher.usageHistory is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 876,
      "scenario": "Test booking-actions: Verify behavior when booking.priceDetails.appliedCouponId && booking.priceDetails.discountAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 881,
      "scenario": "Test booking-actions: Verify behavior when coupon && coupon.timesUsed > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 885,
      "scenario": "Test booking-actions: Verify behavior when success is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 905,
      "scenario": "Test booking-actions: Verify behavior when !authSession || authSession.user.id !== userId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 941,
      "scenario": "Test booking-actions: Verify behavior when paymentMethodsSettledResult &&\n      paymentMethodsSettledResult.success &&\n      paymentMethodsSettledResult.paymentMethods is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 946,
      "scenario": "Test booking-actions: Verify behavior when paymentMethodsSettledResult && paymentMethodsSettledResult.error is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 950,
      "scenario": "Test booking-actions: Verify behavior when paymentMethodsResult.status === \"rejected\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 956,
      "scenario": "Test booking-actions: Verify behavior when !user || !activeTreatments || !workingHoursSettings is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 968,
      "scenario": "Test booking-actions: Verify behavior when sub.treatmentId && sub.treatmentId.pricingType === \"duration_based\" && sub.selectedDurationId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 971,
      "scenario": "Test booking-actions: Verify behavior when treatmentDoc.durations is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 982,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"treatment\" && voucher.treatmentId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 986,
      "scenario": "Test booking-actions: Verify behavior when treatmentDetails is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 988,
      "scenario": "Test booking-actions: Verify behavior when treatmentDetails.pricingType === \"duration_based\" && voucher.selectedDurationId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 993,
      "scenario": "Test booking-actions: Verify behavior when durationDetails is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1020,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"professional\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1029,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1031,
      "scenario": "Test booking-actions: Verify behavior when booking.status !== \"in_process\" || booking.professionalId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1038,
      "scenario": "Test booking-actions: Verify behavior when acceptedBooking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1048,
      "scenario": "Test booking-actions: Verify behavior when clientUser && treatment && professional is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1063,
      "scenario": "Test booking-actions: Verify behavior when clientNotificationMethods.includes(\"email\") && clientUser.email is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1069,
      "scenario": "Test booking-actions: Verify behavior when clientNotificationMethods.includes(\"sms\") && clientUser.phone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1094,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"professional\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1100,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1102,
      "scenario": "Test booking-actions: Verify behavior when booking.professionalId?.toString() !== professionalId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1104,
      "scenario": "Test booking-actions: Verify behavior when booking.status !== \"confirmed\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1121,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"professional\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1126,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1128,
      "scenario": "Test booking-actions: Verify behavior when booking.professionalId?.toString() !== professionalId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1131,
      "scenario": "Test booking-actions: Verify behavior when ![\"confirmed\", \"in_process\"].includes(booking.status) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1153,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1162,
      "scenario": "Test booking-actions: Verify behavior when status && status !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1164,
      "scenario": "Test booking-actions: Verify behavior when professional && professional !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1165,
      "scenario": "Test booking-actions: Verify behavior when professional === \"assigned\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1168,
      "scenario": "Test booking-actions: Verify behavior when professional === \"unassigned\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1169,
      "scenario": "Test booking-actions: Verify behavior when dateRange && dateRange !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "switch",
      "line": 1175,
      "scenario": "Test booking-actions: Verify all 6 switch cases for dateRange"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1212,
      "scenario": "Test booking-actions: Verify behavior when priceRange && priceRange !== \"all\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1217,
      "scenario": "Test booking-actions: Verify behavior when max === Infinity is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1221,
      "scenario": "Test booking-actions: Verify behavior when search is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1269,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1279,
      "scenario": "Test booking-actions: Verify behavior when !professional || !professional.roles.includes(\"professional\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1284,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1286,
      "scenario": "Test booking-actions: Verify behavior when booking.professionalId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1288,
      "scenario": "Test booking-actions: Verify behavior when [\"completed\", \"cancelled\", \"refunded\"].includes(booking.status) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1296,
      "scenario": "Test booking-actions: Verify behavior when assignedBooking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1308,
      "scenario": "Test booking-actions: Verify behavior when clientUser && professional && treatment is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1323,
      "scenario": "Test booking-actions: Verify behavior when clientNotificationMethods.includes(\"email\") && clientUser.email is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1329,
      "scenario": "Test booking-actions: Verify behavior when clientNotificationMethods.includes(\"sms\") && clientUser.phone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1349,
      "scenario": "Test booking-actions: Verify behavior when professionalNotificationMethods.includes(\"email\") && professional.email is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1356,
      "scenario": "Test booking-actions: Verify behavior when professionalNotificationMethods.includes(\"sms\") && professional.phone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1382,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1405,
      "scenario": "Test booking-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1409,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1411,
      "scenario": "Test booking-actions: Verify behavior when updates.status !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1413,
      "scenario": "Test booking-actions: Verify behavior when updates.bookingDateTime is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1415,
      "scenario": "Test booking-actions: Verify behavior when updates.recipientName !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1418,
      "scenario": "Test booking-actions: Verify behavior when updates.recipientPhone !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1420,
      "scenario": "Test booking-actions: Verify behavior when updates.recipientEmail !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1422,
      "scenario": "Test booking-actions: Verify behavior when updates.notes !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1424,
      "scenario": "Test booking-actions: Verify behavior when updates.professionalId !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1425,
      "scenario": "Test booking-actions: Verify behavior when updates.professionalId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1428,
      "scenario": "Test booking-actions: Verify behavior when !professional || !professional.roles.includes(\"professional\") is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1434,
      "scenario": "Test booking-actions: Verify behavior when updates.paymentStatus !== undefined is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1452,
      "scenario": "Test booking-actions: Verify behavior when !validationResult.success is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1470,
      "scenario": "Test booking-actions: Verify behavior when !guestInfo || !guestInfo.name || !guestInfo.email || !guestInfo.phone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1477,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.customAddressDetails is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1478,
      "scenario": "Test booking-actions: Verify behavior when !validatedPayload.customAddressDetails.fullAddress is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1561,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.priceDetails.appliedGiftVoucherId && validatedPayload.priceDetails.voucherAppliedAmount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1569,
      "scenario": "Test booking-actions: Verify behavior when !voucher || !voucher.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1571,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"treatment\" &&\n          validatedPayload.priceDetails.isBaseTreatmentCoveredByTreatmentVoucher is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1576,
      "scenario": "Test booking-actions: Verify behavior when voucher.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1577,
      "scenario": "Test booking-actions: Verify behavior when typeof voucher.remainingAmount !== \"number\" ||\n            voucher.remainingAmount < validatedPayload.priceDetails.voucherAppliedAmount is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1586,
      "scenario": "Test booking-actions: Verify behavior when voucher.remainingAmount < 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1598,
      "scenario": "Test booking-actions: Verify behavior when validatedPayload.priceDetails.appliedCouponId && validatedPayload.priceDetails.couponDiscount > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1605,
      "scenario": "Test booking-actions: Verify behavior when !coupon || !coupon.isActive is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1609,
      "scenario": "Test booking-actions: Verify behavior when bookingResult is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1610,
      "scenario": "Test booking-actions: Verify behavior when bookingResult.priceDetails.finalAmount === 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1618,
      "scenario": "Test booking-actions: Verify behavior when bookingResult is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1623,
      "scenario": "Test booking-actions: Verify behavior when updatedVoucherDetails is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1630,
      "scenario": "Test booking-actions: Verify behavior when treatment is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1648,
      "scenario": "Test booking-actions: Verify behavior when bookerNotificationMethod === \"email\" || bookerNotificationMethod === \"both\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1654,
      "scenario": "Test booking-actions: Verify behavior when bookerNotificationMethod === \"sms\" || bookerNotificationMethod === \"both\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1660,
      "scenario": "Test booking-actions: Verify behavior when isBookingForSomeoneElse && validatedPayload.recipientEmail && validatedPayload.recipientPhone is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1668,
      "scenario": "Test booking-actions: Verify behavior when recipientNotificationMethod === \"email\" || recipientNotificationMethod === \"both\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1675,
      "scenario": "Test booking-actions: Verify behavior when recipientNotificationMethod === \"sms\" || recipientNotificationMethod === \"both\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1682,
      "scenario": "Test booking-actions: Verify behavior when recipients.length > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1684,
      "scenario": "Test booking-actions: Verify behavior when isBookingForSomeoneElse is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1693,
      "scenario": "Test booking-actions: Verify behavior when bookerRecipients.length > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1714,
      "scenario": "Test booking-actions: Verify behavior when recipientRecipients.length > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1785,
      "scenario": "Test booking-actions: Verify behavior when !treatments || treatments.length === 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1788,
      "scenario": "Test booking-actions: Verify behavior when !workingHours is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1837,
      "scenario": "Test booking-actions: Verify behavior when existingUser is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1845,
      "scenario": "Test booking-actions: Verify behavior when !validRoles.includes(UserRole.GUEST) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1847,
      "scenario": "Test booking-actions: Verify behavior when JSON.stringify(validRoles) !== JSON.stringify(existingUser.roles) is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1874,
      "scenario": "Test booking-actions: Verify behavior when error instanceof Error is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1876,
      "scenario": "Test booking-actions: Verify behavior when error.message.includes('duplicate key') is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1879,
      "scenario": "Test booking-actions: Verify behavior when error.message.includes('validation') is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1897,
      "scenario": "Test booking-actions: Verify behavior when existingAbandoned is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1905,
      "scenario": "Test booking-actions: Verify behavior when formData.guestInfo?.firstName && formData.guestInfo?.lastName is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1912,
      "scenario": "Test booking-actions: Verify behavior when formData.bookingOptions?.selectedTreatmentId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1916,
      "scenario": "Test booking-actions: Verify behavior when formData.bookingOptions?.selectedDurationId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 1920,
      "scenario": "Test booking-actions: Verify behavior when formData.bookingOptions?.bookingDate && formData.bookingOptions?.bookingTime is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2053,
      "scenario": "Test booking-actions: Verify behavior when !abandonedBooking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2066,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2068,
      "scenario": "Test booking-actions: Verify behavior when paymentStatus === \"success\" is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2077,
      "scenario": "Test booking-actions: Verify behavior when suitableProfessionals.success && suitableProfessionals.professionals && suitableProfessionals.professionals.length > 0 is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2088,
      "scenario": "Test booking-actions: Verify behavior when smsResult.success is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2102,
      "scenario": "Test booking-actions: Verify behavior when transactionId is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2116,
      "scenario": "Test booking-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2127,
      "scenario": "Test booking-actions: Verify behavior when !cityName is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2141,
      "scenario": "Test booking-actions: Verify behavior when genderPreference && genderPreference !== 'any' is true/false"
    },
    {
      "file": "actions\\booking-actions.ts",
      "type": "if",
      "line": 2146,
      "scenario": "Test booking-actions: Verify behavior when durationId is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 22,
      "scenario": "Test gift-voucher-actions: Verify behavior when !exists is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 33,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucherDocOrPlain is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 38,
      "scenario": "Test gift-voucher-actions: Verify behavior when typeof (voucherDocOrPlain as IGiftVoucher).toObject === \"function\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 49,
      "scenario": "Test gift-voucher-actions: Verify behavior when purchaserUserIdStr is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 53,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.guestInfo is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 55,
      "scenario": "Test gift-voucher-actions: Verify behavior when ownerUserIdStr is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 58,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.guestInfo is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 61,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.voucherType === \"treatment\" && treatmentIdStr is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 66,
      "scenario": "Test gift-voucher-actions: Verify behavior when selectedDurationIdStr && treatmentDoc?.durations is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 146,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 149,
      "scenario": "Test gift-voucher-actions: Verify behavior when !data.code || typeof data.code !== \"string\" || data.code.trim() === \"\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 153,
      "scenario": "Test gift-voucher-actions: Verify behavior when !data.voucherType || (data.voucherType !== \"monetary\" && data.voucherType !== \"treatment\") is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 157,
      "scenario": "Test gift-voucher-actions: Verify behavior when !data.ownerUserId ||\r\n      typeof data.ownerUserId !== \"string\" ||\r\n      !mongoose.Types.ObjectId.isValid(data.ownerUserId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 162,
      "scenario": "Test gift-voucher-actions: Verify behavior when !data.validFrom || typeof data.validFrom !== \"string\" || isNaN(new Date(data.validFrom).getTime()) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 166,
      "scenario": "Test gift-voucher-actions: Verify behavior when !data.validUntil || typeof data.validUntil !== \"string\" || isNaN(new Date(data.validUntil).getTime()) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 170,
      "scenario": "Test gift-voucher-actions: Verify behavior when new Date(data.validFrom) >= new Date(data.validUntil) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 175,
      "scenario": "Test gift-voucher-actions: Verify behavior when amountInput === undefined ||\r\n      String(amountInput).trim() === \"\" ||\r\n      isNaN(Number(amountInput)) ||\r\n      Number(amountInput) <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 181,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 189,
      "scenario": "Test gift-voucher-actions: Verify behavior when !data.treatmentId || !mongoose.Types.ObjectId.isValid(data.treatmentId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 193,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.selectedDurationId && !mongoose.Types.ObjectId.isValid(data.selectedDurationId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 198,
      "scenario": "Test gift-voucher-actions: Verify behavior when !owner is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 214,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 217,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.selectedDurationId is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 233,
      "scenario": "Test gift-voucher-actions: Verify behavior when error instanceof mongoose.Error.ValidationError is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 235,
      "scenario": "Test gift-voucher-actions: Verify behavior when (error as any).code === 11000 && (error as any).keyPattern?.code is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 248,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 250,
      "scenario": "Test gift-voucher-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(id) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 255,
      "scenario": "Test gift-voucher-actions: Verify behavior when !existingVoucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 256,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.validFrom && (typeof data.validFrom !== \"string\" || isNaN(new Date(data.validFrom).getTime())) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 261,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.validUntil && (typeof data.validUntil !== \"string\" || isNaN(new Date(data.validUntil).getTime())) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 265,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.ownerUserId && !mongoose.Types.ObjectId.isValid(data.ownerUserId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 268,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.treatmentId && !mongoose.Types.ObjectId.isValid(data.treatmentId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 272,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.selectedDurationId && !mongoose.Types.ObjectId.isValid(data.selectedDurationId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 279,
      "scenario": "Test gift-voucher-actions: Verify behavior when checkValidFrom >= checkValidUntil is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 284,
      "scenario": "Test gift-voucher-actions: Verify behavior when amountUpdateInput !== undefined is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 286,
      "scenario": "Test gift-voucher-actions: Verify behavior when isNaN(newAmount) || newAmount <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 292,
      "scenario": "Test gift-voucher-actions: Verify behavior when existingVoucher.status !== \"partially_used\" || existingVoucher.amount !== newAmount is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 300,
      "scenario": "Test gift-voucher-actions: Verify behavior when newVoucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 307,
      "scenario": "Test gift-voucher-actions: Verify behavior when !updateData.treatmentId is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 310,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.amount === undefined &&\r\n        (existingVoucher.treatmentId?.toString() !== updateData.treatmentId?.toString() ||\r\n          existingVoucher.selectedDurationId?.toString() !== updateData.select is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 326,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 327,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 329,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"duration_based\" &&\r\n            updateData.selectedDurationId &&\r\n            treatmentDoc.durations is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 336,
      "scenario": "Test gift-voucher-actions: Verify behavior when duration && typeof duration.price === \"number\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 338,
      "scenario": "Test gift-voucher-actions: Verify behavior when price > 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 341,
      "scenario": "Test gift-voucher-actions: Verify behavior when existingVoucher.status !== \"partially_used\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 352,
      "scenario": "Test gift-voucher-actions: Verify behavior when newVoucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 352,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.amount === undefined &&\r\n        data.monetaryValue === undefined &&\r\n        existingVoucher.voucherType !== \"monetary\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 360,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.status is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 362,
      "scenario": "Test gift-voucher-actions: Verify behavior when updateData.amount !== undefined &&\r\n      updateData.amount > 0 &&\r\n      existingVoucher.status === \"pending_payment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 372,
      "scenario": "Test gift-voucher-actions: Verify behavior when !updatedVoucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 385,
      "scenario": "Test gift-voucher-actions: Verify behavior when error instanceof mongoose.Error.ValidationError is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 387,
      "scenario": "Test gift-voucher-actions: Verify behavior when (error as any).code === 11000 && (error as any).keyPattern?.code is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 397,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 400,
      "scenario": "Test gift-voucher-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(id) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 404,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 423,
      "scenario": "Test gift-voucher-actions: Verify behavior when search is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 434,
      "scenario": "Test gift-voucher-actions: Verify behavior when userIds.length > 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 438,
      "scenario": "Test gift-voucher-actions: Verify behavior when filters.voucherType is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 439,
      "scenario": "Test gift-voucher-actions: Verify behavior when filters.status is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 440,
      "scenario": "Test gift-voucher-actions: Verify behavior when filters.dateRange?.from && filters.dateRange?.to is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 444,
      "scenario": "Test gift-voucher-actions: Verify behavior when filters.dateRange?.from is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 446,
      "scenario": "Test gift-voucher-actions: Verify behavior when filters.dateRange?.to is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 458,
      "scenario": "Test gift-voucher-actions: Verify behavior when giftVouchersResults.some((result) => result.status === \"rejected\") is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 480,
      "scenario": "Test gift-voucher-actions: Verify behavior when t.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 536,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 549,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 552,
      "scenario": "Test gift-voucher-actions: Verify behavior when typeof inputMonetaryValue !== \"number\" || inputMonetaryValue < 150 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 568,
      "scenario": "Test gift-voucher-actions: Verify behavior when !treatmentId || !mongoose.Types.ObjectId.isValid(treatmentId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 580,
      "scenario": "Test gift-voucher-actions: Verify behavior when !treatmentDoc is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 593,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 594,
      "scenario": "Test gift-voucher-actions: Verify behavior when typeof treatmentDoc.fixedPrice === \"number\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 602,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"duration_based\" &&\r\n        treatmentDoc.durations &&\r\n        treatmentDoc.durations.length > 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 605,
      "scenario": "Test gift-voucher-actions: Verify behavior when !selectedDurationId || !mongoose.Types.ObjectId.isValid(selectedDurationId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 617,
      "scenario": "Test gift-voucher-actions: Verify behavior when duration && typeof duration.price === \"number\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 631,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"duration_based\" &&\r\n        (!treatmentDoc.durations || treatmentDoc.durations.length === 0) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 637,
      "scenario": "Test gift-voucher-actions: Verify behavior when typeof treatmentDoc.fixedPrice === \"number\" && treatmentDoc.fixedPrice > 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 648,
      "scenario": "Test gift-voucher-actions: Verify behavior when typeof priceFromTreatment === \"number\" && priceFromTreatment > 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 663,
      "scenario": "Test gift-voucher-actions: Verify behavior when determinedPrice <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 686,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 688,
      "scenario": "Test gift-voucher-actions: Verify behavior when selectedDurationId is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 715,
      "scenario": "Test gift-voucher-actions: Verify behavior when error instanceof mongoose.Error.ValidationError is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 725,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 727,
      "scenario": "Test gift-voucher-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(data.voucherId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 733,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 734,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.purchaserUserId.toString() !== session.user.id && !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 744,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status !== \"pending_payment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 745,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status === \"active\" || voucher.status === \"sent\" || voucher.status === \"partially_used\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 756,
      "scenario": "Test gift-voucher-actions: Verify behavior when paymentSuccess is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 758,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher.isGift is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 790,
      "scenario": "Test gift-voucher-actions: Verify behavior when purchaser is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 810,
      "scenario": "Test gift-voucher-actions: Verify behavior when methods.includes(\"email\") && purchaser.email is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 816,
      "scenario": "Test gift-voucher-actions: Verify behavior when methods.includes(\"sms\") && purchaser.phone is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 835,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.purchaserUserId.toString() !== voucher.ownerUserId.toString() is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 857,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 859,
      "scenario": "Test gift-voucher-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(voucherId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 863,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 865,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.purchaserUserId.toString() !== session.user.id is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 868,
      "scenario": "Test gift-voucher-actions: Verify behavior when ![\"active\", \"pending_payment\"].includes(voucher.status) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 881,
      "scenario": "Test gift-voucher-actions: Verify behavior when !details.recipientName || details.recipientName.trim() === \"\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 884,
      "scenario": "Test gift-voucher-actions: Verify behavior when !details.recipientPhone || details.recipientPhone.trim() === \"\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 888,
      "scenario": "Test gift-voucher-actions: Verify behavior when details.sendDate && details.sendDate !== \"immediate\" && isNaN(new Date(details.sendDate).getTime()) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 903,
      "scenario": "Test gift-voucher-actions: Verify behavior when details.sendDate === \"immediate\" || !details.sendDate is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 910,
      "scenario": "Test gift-voucher-actions: Verify behavior when scheduledSendDate <= now is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 922,
      "scenario": "Test gift-voucher-actions: Verify behavior when sendNotificationToRecipientNow && voucher.recipientPhone && voucher.recipientName is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 955,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 976,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1009,
      "scenario": "Test gift-voucher-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1012,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1014,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.ownerUserId.toString() !== session.user.id is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1036,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.validFrom > currentDate is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1038,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.validUntil < currentDate && voucher.status !== \"expired\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1043,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status === \"expired\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1045,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher.isActive is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1050,
      "scenario": "Test gift-voucher-actions: Verify behavior when ![\"active\", \"partially_used\", \"sent\"].includes(voucher.status) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1062,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1063,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status === \"fully_used\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1078,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1079,
      "scenario": "Test gift-voucher-actions: Verify behavior when (voucher.remainingAmount || 0) <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1086,
      "scenario": "Test gift-voucher-actions: Verify behavior when amountApplied <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1095,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.remainingAmount <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1101,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher.usageHistory is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1106,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status === \"fully_used\" || voucher.status === \"expired\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1148,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucherType === \"monetary\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1150,
      "scenario": "Test gift-voucher-actions: Verify behavior when typeof inputMonetaryValue !== \"number\" || inputMonetaryValue < 150 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1164,
      "scenario": "Test gift-voucher-actions: Verify behavior when !treatmentId || !mongoose.Types.ObjectId.isValid(treatmentId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1175,
      "scenario": "Test gift-voucher-actions: Verify behavior when !treatmentDoc is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1181,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1183,
      "scenario": "Test gift-voucher-actions: Verify behavior when treatmentDoc.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1184,
      "scenario": "Test gift-voucher-actions: Verify behavior when !selectedDurationId is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1190,
      "scenario": "Test gift-voucher-actions: Verify behavior when !durationDoc || !durationDoc.isActive is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1195,
      "scenario": "Test gift-voucher-actions: Verify behavior when determinedPrice <= 0 is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1215,
      "scenario": "Test gift-voucher-actions: Verify behavior when isGift is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1216,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.recipientName is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1217,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.recipientPhone is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1219,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.greetingMessage is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1221,
      "scenario": "Test gift-voucher-actions: Verify behavior when data.sendDate is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1223,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucherType === \"treatment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1226,
      "scenario": "Test gift-voucher-actions: Verify behavior when selectedDurationId is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1251,
      "scenario": "Test gift-voucher-actions: Verify behavior when error instanceof mongoose.Error.ValidationError is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1262,
      "scenario": "Test gift-voucher-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(data.voucherId) is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1268,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1270,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status !== \"pending_payment\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1271,
      "scenario": "Test gift-voucher-actions: Verify behavior when voucher.status === \"active\" || voucher.status === \"sent\" || voucher.status === \"partially_used\" is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1280,
      "scenario": "Test gift-voucher-actions: Verify behavior when paymentSuccess is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1281,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher.isGift is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1285,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucher.sendDate is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1286,
      "scenario": "Test gift-voucher-actions: Verify behavior when sendDate <= new Date() is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1298,
      "scenario": "Test gift-voucher-actions: Verify behavior when guestInfo.email is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1304,
      "scenario": "Test gift-voucher-actions: Verify behavior when guestInfo.phone is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1339,
      "scenario": "Test gift-voucher-actions: Verify behavior when existing is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1367,
      "scenario": "Test gift-voucher-actions: Verify behavior when !purchase is true/false"
    },
    {
      "file": "actions\\gift-voucher-actions.ts",
      "type": "if",
      "line": 1376,
      "scenario": "Test gift-voucher-actions: Verify behavior when !voucherDoc is true/false"
    },
    {
      "file": "lib\\notifications\\templates\\email-templates.ts",
      "type": "switch",
      "line": 123,
      "scenario": "Test email-templates: Verify all 8 switch cases for data.type"
    },
    {
      "file": "lib\\notifications\\templates\\email-templates.ts",
      "type": "if",
      "line": 145,
      "scenario": "Test email-templates: Verify behavior when isForSomeoneElse is true/false"
    },
    {
      "file": "lib\\notifications\\templates\\email-templates.ts",
      "type": "if",
      "line": 218,
      "scenario": "Test email-templates: Verify behavior when data.isBookerForSomeoneElse && data.actualRecipientName is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 27,
      "scenario": "Test purchase-summary-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 30,
      "scenario": "Test purchase-summary-actions: Verify behavior when !isConnected is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 36,
      "scenario": "Test purchase-summary-actions: Verify behavior when !filters?.type || filters.type.includes('booking') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test purchase-summary-actions: Verify behavior when !filters?.type || filters.type.includes('subscription') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 103,
      "scenario": "Test purchase-summary-actions: Verify behavior when !filters?.type || filters.type.includes('gift_voucher') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 142,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.status && filters.status.length > 0 is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 145,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.dateFrom is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 148,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.dateTo is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 150,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.amountMin is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 153,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.amountMax is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 156,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.search is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 179,
      "scenario": "Test purchase-summary-actions: Verify behavior when !session?.user?.roles?.includes('admin') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 181,
      "scenario": "Test purchase-summary-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(customerId) is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 187,
      "scenario": "Test purchase-summary-actions: Verify behavior when !customer is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 261,
      "scenario": "Test purchase-summary-actions: Verify behavior when !session?.user?.roles?.includes('admin') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 264,
      "scenario": "Test purchase-summary-actions: Verify behavior when !isConnected is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 267,
      "scenario": "Test purchase-summary-actions: Verify behavior when userType === 'guests' is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 270,
      "scenario": "Test purchase-summary-actions: Verify behavior when userType === 'members' is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 274,
      "scenario": "Test purchase-summary-actions: Verify behavior when search is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 285,
      "scenario": "Test purchase-summary-actions: Verify behavior when summaryResult.success && summaryResult.data is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 306,
      "scenario": "Test purchase-summary-actions: Verify behavior when !session?.user?.roles?.includes('admin') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 309,
      "scenario": "Test purchase-summary-actions: Verify behavior when !isConnected is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 314,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.userId is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 316,
      "scenario": "Test purchase-summary-actions: Verify behavior when !filters?.type || filters.type.includes('booking') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 358,
      "scenario": "Test purchase-summary-actions: Verify behavior when !filters?.type || filters.type.includes('subscription') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 393,
      "scenario": "Test purchase-summary-actions: Verify behavior when !filters?.type || filters.type.includes('gift_voucher') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 395,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.userId is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 442,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.status && filters.status.length > 0 is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 446,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.dateFrom is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 448,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.dateTo is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 451,
      "scenario": "Test purchase-summary-actions: Verify behavior when filters?.search is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 477,
      "scenario": "Test purchase-summary-actions: Verify behavior when !session?.user?.roles?.includes('admin') is true/false"
    },
    {
      "file": "actions\\purchase-summary-actions.ts",
      "type": "if",
      "line": 480,
      "scenario": "Test purchase-summary-actions: Verify behavior when !isConnected is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "switch",
      "line": 29,
      "scenario": "Test purchase-history-table: Verify all 8 switch cases for status"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "switch",
      "line": 38,
      "scenario": "Test purchase-history-table: Verify all 8 switch cases for status"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "switch",
      "line": 53,
      "scenario": "Test purchase-history-table: Verify all 4 switch cases for type"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "switch",
      "line": 60,
      "scenario": "Test purchase-history-table: Verify all 4 switch cases for type"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test purchase-history-table: Verify behavior when amount === undefined || amount === null is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test purchase-history-table: Verify behavior when isNaN(numericAmount) is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test purchase-history-table: Verify behavior when type === 'booking' is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 174,
      "scenario": "Test purchase-history-table: Verify behavior when type === 'subscription' is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 241,
      "scenario": "Test purchase-history-table: Verify behavior when type === 'gift_voucher' is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 326,
      "scenario": "Test purchase-history-table: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-history-table.tsx",
      "type": "if",
      "line": 334,
      "scenario": "Test purchase-history-table: Verify behavior when transactions.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 27,
      "scenario": "Test admin-bookings-columns: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 31,
      "scenario": "Test admin-bookings-columns: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test admin-bookings-columns: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 42,
      "scenario": "Test admin-bookings-columns: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test admin-bookings-columns: Verify behavior when !selectedProfessional is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test admin-bookings-columns: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 117,
      "scenario": "Test admin-bookings-columns: Verify behavior when !booking is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 196,
      "scenario": "Test admin-bookings-columns: Verify behavior when !status is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 221,
      "scenario": "Test admin-bookings-columns: Verify behavior when booking?.userId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 254,
      "scenario": "Test admin-bookings-columns: Verify behavior when !booking?.professionalId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 270,
      "scenario": "Test admin-bookings-columns: Verify behavior when !booking?.priceDetails is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 287,
      "scenario": "Test admin-bookings-columns: Verify behavior when !booking?.recipientName is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 291,
      "scenario": "Test admin-bookings-columns: Verify behavior when booking.recipientBirthDate is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 295,
      "scenario": "Test admin-bookings-columns: Verify behavior when monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 316,
      "scenario": "Test admin-bookings-columns: Verify behavior when !treatment is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 320,
      "scenario": "Test admin-bookings-columns: Verify behavior when treatment.pricingType === \"duration_based\" && booking.selectedDurationId && treatment.durations is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 325,
      "scenario": "Test admin-bookings-columns: Verify behavior when selectedDuration is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 327,
      "scenario": "Test admin-bookings-columns: Verify behavior when treatment.pricingType === \"fixed\" && treatment.defaultDurationMinutes is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 345,
      "scenario": "Test admin-bookings-columns: Verify behavior when !address is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 379,
      "scenario": "Test admin-bookings-columns: Verify behavior when !priceDetails is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 387,
      "scenario": "Test admin-bookings-columns: Verify behavior when !hasRedemption is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 415,
      "scenario": "Test admin-bookings-columns: Verify behavior when !priceDetails is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 419,
      "scenario": "Test admin-bookings-columns: Verify behavior when treatment is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 419,
      "scenario": "Test admin-bookings-columns: Verify behavior when treatment.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 422,
      "scenario": "Test admin-bookings-columns: Verify behavior when treatment.pricingType === \"duration_based\" && booking.selectedDurationId && treatment.durations is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 427,
      "scenario": "Test admin-bookings-columns: Verify behavior when selectedDuration is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 431,
      "scenario": "Test admin-bookings-columns: Verify behavior when priceDetails.surcharges is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 434,
      "scenario": "Test admin-bookings-columns: Verify behavior when surcharge && typeof surcharge.amount === 'number' && surcharge.amount > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 436,
      "scenario": "Test admin-bookings-columns: Verify behavior when surcharge.professionalShare is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 439,
      "scenario": "Test admin-bookings-columns: Verify behavior when surcharge.professionalShare.type === 'percentage' is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 442,
      "scenario": "Test admin-bookings-columns: Verify behavior when surcharge.professionalShare.type === 'fixed' is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 457,
      "scenario": "Test admin-bookings-columns: Verify behavior when priceDetails.surcharges is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 460,
      "scenario": "Test admin-bookings-columns: Verify behavior when surcharge && typeof surcharge.amount === 'number' && surcharge.amount > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 482,
      "scenario": "Test admin-bookings-columns: Verify behavior when !booking?.recipientName is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 485,
      "scenario": "Test admin-bookings-columns: Verify behavior when booking.recipientBirthDate is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-columns.tsx",
      "type": "if",
      "line": 490,
      "scenario": "Test admin-bookings-columns: Verify behavior when monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 40,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when booking is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 42,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when !booking is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 45,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when isNaN(d.getTime()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 54,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when isNaN(d.getTime()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.status !== booking.status is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.bookingDateTime !== booking.bookingDateTime is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 76,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.recipientName !== booking.recipientName is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.recipientPhone !== booking.recipientPhone is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 81,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.recipientEmail !== booking.recipientEmail is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 84,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.notes !== booking.notes is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when editedBooking.paymentDetails?.paymentStatus !== booking.paymentDetails?.paymentStatus is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 91,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when Object.keys(updates).length > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 94,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 111,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 216,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when e.target.value && booking.bookingDateTime is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\comprehensive-booking-edit-modal.tsx",
      "type": "if",
      "line": 235,
      "scenario": "Test comprehensive-booking-edit-modal: Verify behavior when e.target.value && booking.bookingDateTime is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 112,
      "scenario": "Test guest-booking-wizard: Verify behavior when currentStep === 1 && !guestUserId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 121,
      "scenario": "Test guest-booking-wizard: Verify behavior when updatedState.firstName && updatedState.lastName && updatedState.email && updatedState.phone is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 142,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.userId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 190,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 206,
      "scenario": "Test guest-booking-wizard: Verify behavior when savedUserId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 209,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 226,
      "scenario": "Test guest-booking-wizard: Verify behavior when !guestUserId &&\r\n        !guestUserCreatedRef.current &&\r\n        guestInfo.firstName &&\r\n        guestInfo.lastName &&\r\n        guestInfo.email &&\r\n        guestInfo.phone is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 237,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.userId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 251,
      "scenario": "Test guest-booking-wizard: Verify behavior when guestUserId && currentStep > 1 is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 259,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 272,
      "scenario": "Test guest-booking-wizard: Verify behavior when !bookingOptions.bookingDate || !bookingOptions.selectedTreatmentId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 290,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 310,
      "scenario": "Test guest-booking-wizard: Verify behavior when !bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n      !bookingOptions.bookingTime ||\r\n      !guestInfo.email is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 317,
      "scenario": "Test guest-booking-wizard: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && !bookingOptions.selectedDurationId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 332,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.priceDetails is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 346,
      "scenario": "Test guest-booking-wizard: Verify behavior when currentStep >= 4 is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 354,
      "scenario": "Test guest-booking-wizard: Verify behavior when timeSlots.length > 0 && !bookingOptions.bookingTime is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 357,
      "scenario": "Test guest-booking-wizard: Verify behavior when firstAvailableSlot is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 362,
      "scenario": "Test guest-booking-wizard: Verify behavior when abandonedBooking?.formState is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 373,
      "scenario": "Test guest-booking-wizard: Verify behavior when guestUserId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 388,
      "scenario": "Test guest-booking-wizard: Verify behavior when currentStep === 1 && !guestUserId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 396,
      "scenario": "Test guest-booking-wizard: Verify behavior when guestInfo.firstName && guestInfo.lastName && guestInfo.email && guestInfo.phone is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 405,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.userId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 432,
      "scenario": "Test guest-booking-wizard: Verify behavior when currentStep === TOTAL_STEPS_WITH_PAYMENT - 1 && // Summary step\r\n      calculatedPrice?.finalAmount === 0 &&\r\n      calculatedPrice?.isFullyCoveredByVoucherOrSubscription is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 443,
      "scenario": "Test guest-booking-wizard: Verify behavior when !guestInfo.firstName || !guestInfo.lastName || !guestInfo.email || !guestInfo.phone is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 450,
      "scenario": "Test guest-booking-wizard: Verify behavior when !bookingOptions.selectedTreatmentId ||\r\n      !bookingOptions.bookingDate ||\r\n      !bookingOptions.bookingTime is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 507,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 530,
      "scenario": "Test guest-booking-wizard: Verify behavior when !pendingBookingId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 540,
      "scenario": "Test guest-booking-wizard: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 544,
      "scenario": "Test guest-booking-wizard: Verify behavior when guestUserId is true/false"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "switch",
      "line": 563,
      "scenario": "Test guest-booking-wizard: Verify all 8 switch cases for currentStep"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "switch",
      "line": 608,
      "scenario": "Test guest-booking-wizard: Verify all 8 switch cases for currentStep"
    },
    {
      "file": "components\\booking\\guest-booking-wizard.tsx",
      "type": "if",
      "line": 621,
      "scenario": "Test guest-booking-wizard: Verify behavior when currentStep === CONFIRMATION_STEP_NUMBER is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 32,
      "scenario": "Test user-subscription-actions: Verify behavior when !sessionData || !sessionData.user is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 49,
      "scenario": "Test user-subscription-actions: Verify behavior when subscriptionResult.status === \"rejected\" || treatmentResult.status === \"rejected\" || paymentMethodResult.status === \"rejected\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test user-subscription-actions: Verify behavior when !subscription || !subscription.isActive is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 77,
      "scenario": "Test user-subscription-actions: Verify behavior when !treatment || !treatment.isActive is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 82,
      "scenario": "Test user-subscription-actions: Verify behavior when !paymentMethod || paymentMethod.userId.toString() !== sessionData.user.id is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 91,
      "scenario": "Test user-subscription-actions: Verify behavior when treatment.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 93,
      "scenario": "Test user-subscription-actions: Verify behavior when treatment.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 94,
      "scenario": "Test user-subscription-actions: Verify behavior when !selectedDurationId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 101,
      "scenario": "Test user-subscription-actions: Verify behavior when !duration || !duration.isActive is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 108,
      "scenario": "Test user-subscription-actions: Verify behavior when singleSessionPrice === undefined || singleSessionPrice < 0 is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 146,
      "scenario": "Test user-subscription-actions: Verify behavior when purchaser is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 159,
      "scenario": "Test user-subscription-actions: Verify behavior when methods.includes(\"email\") && purchaser.email is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 164,
      "scenario": "Test user-subscription-actions: Verify behavior when methods.includes(\"sms\") && purchaser.phone is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 197,
      "scenario": "Test user-subscription-actions: Verify behavior when !sessionData || !sessionData.user is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 209,
      "scenario": "Test user-subscription-actions: Verify behavior when sub.treatmentId &&\r\n        (sub.treatmentId as ITreatment).pricingType === \"duration_based\" &&\r\n        sub.selectedDurationId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 214,
      "scenario": "Test user-subscription-actions: Verify behavior when treatmentDoc.durations is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 234,
      "scenario": "Test user-subscription-actions: Verify behavior when !sessionData?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 239,
      "scenario": "Test user-subscription-actions: Verify behavior when options.userId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 240,
      "scenario": "Test user-subscription-actions: Verify behavior when options.subscriptionId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 241,
      "scenario": "Test user-subscription-actions: Verify behavior when options.treatmentId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 243,
      "scenario": "Test user-subscription-actions: Verify behavior when options.status is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 244,
      "scenario": "Test user-subscription-actions: Verify behavior when options.search is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 263,
      "scenario": "Test user-subscription-actions: Verify behavior when sub.treatmentId &&\r\n        (sub.treatmentId as ITreatment).pricingType === \"duration_based\" &&\r\n        sub.selectedDurationId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 268,
      "scenario": "Test user-subscription-actions: Verify behavior when treatmentDoc.durations is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 291,
      "scenario": "Test user-subscription-actions: Verify behavior when !sessionData || !sessionData.user is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 295,
      "scenario": "Test user-subscription-actions: Verify behavior when !userSubscription is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 297,
      "scenario": "Test user-subscription-actions: Verify behavior when userSubscription.userId && userSubscription.userId.toString() !== sessionData.user.id && !sessionData.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 301,
      "scenario": "Test user-subscription-actions: Verify behavior when userSubscription.status !== \"active\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 304,
      "scenario": "Test user-subscription-actions: Verify behavior when userSubscription.remainingQuantity < quantity is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 308,
      "scenario": "Test user-subscription-actions: Verify behavior when userSubscription.remainingQuantity <= 0 is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 323,
      "scenario": "Test user-subscription-actions: Verify behavior when !sessionData || !sessionData.user is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 328,
      "scenario": "Test user-subscription-actions: Verify behavior when !userSubscription is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 330,
      "scenario": "Test user-subscription-actions: Verify behavior when userSubscription.userId && userSubscription.userId.toString() !== sessionData.user.id && !sessionData.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 347,
      "scenario": "Test user-subscription-actions: Verify behavior when !sessionData?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 352,
      "scenario": "Test user-subscription-actions: Verify behavior when !result is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 388,
      "scenario": "Test user-subscription-actions: Verify behavior when subscriptionResult.status === \"rejected\" || treatmentResult.status === \"rejected\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 407,
      "scenario": "Test user-subscription-actions: Verify behavior when !subscription || !subscription.isActive is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 411,
      "scenario": "Test user-subscription-actions: Verify behavior when !treatment || !treatment.isActive is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 418,
      "scenario": "Test user-subscription-actions: Verify behavior when treatment.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 420,
      "scenario": "Test user-subscription-actions: Verify behavior when treatment.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 421,
      "scenario": "Test user-subscription-actions: Verify behavior when !selectedDurationId is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 428,
      "scenario": "Test user-subscription-actions: Verify behavior when !duration || !duration.isActive is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 435,
      "scenario": "Test user-subscription-actions: Verify behavior when singleSessionPrice === undefined || singleSessionPrice < 0 is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 483,
      "scenario": "Test user-subscription-actions: Verify behavior when guestInfo.email is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 489,
      "scenario": "Test user-subscription-actions: Verify behavior when guestInfo.phone is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 527,
      "scenario": "Test user-subscription-actions: Verify behavior when existing is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 555,
      "scenario": "Test user-subscription-actions: Verify behavior when !purchase is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 564,
      "scenario": "Test user-subscription-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(id) is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 569,
      "scenario": "Test user-subscription-actions: Verify behavior when !sub is true/false"
    },
    {
      "file": "actions\\user-subscription-actions.ts",
      "type": "if",
      "line": 575,
      "scenario": "Test user-subscription-actions: Verify behavior when !isGuest && !isOwner && !isAdmin is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 130,
      "scenario": "Test working-hours-client: Verify behavior when !result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 160,
      "scenario": "Test working-hours-client: Verify behavior when workingHoursData?.fixedHours is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 229,
      "scenario": "Test working-hours-client: Verify behavior when editingSpecialDateIndex !== null is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 246,
      "scenario": "Test working-hours-client: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 274,
      "scenario": "Test working-hours-client: Verify behavior when editingSpecialEventIndex !== null is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 294,
      "scenario": "Test working-hours-client: Verify behavior when !event is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 306,
      "scenario": "Test working-hours-client: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 319,
      "scenario": "Test working-hours-client: Verify behavior when !workingHoursData is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\working-hours\\working-hours-client.tsx",
      "type": "if",
      "line": 923,
      "scenario": "Test working-hours-client: Verify behavior when !isOpen is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 40,
      "scenario": "Test booking-details-view: Verify behavior when populatedTreatment?.pricingType === \"duration_based\" && selectedDurationId && populatedTreatment.durations is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "switch",
      "line": 48,
      "scenario": "Test booking-details-view: Verify all 9 switch cases for statusKey"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 104,
      "scenario": "Test booking-details-view: Verify behavior when !preferenceKey is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 109,
      "scenario": "Test booking-details-view: Verify behavior when source === \"subscription_redemption\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 111,
      "scenario": "Test booking-details-view: Verify behavior when source === \"gift_voucher_redemption\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 116,
      "scenario": "Test booking-details-view: Verify behavior when priceDetails.redeemedUserSubscriptionId?.subscriptionId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 122,
      "scenario": "Test booking-details-view: Verify behavior when priceDetails.appliedGiftVoucherId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 133,
      "scenario": "Test booking-details-view: Verify behavior when !durationNameForVoucher &&\n        voucher.voucherType === \"treatment\" &&\n        treatmentForVoucher?.pricingType === \"duration_based\" &&\n        voucher.selectedDurationId &&\n        treatmentForVou is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 141,
      "scenario": "Test booking-details-view: Verify behavior when durationDetail is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "switch",
      "line": 167,
      "scenario": "Test booking-details-view: Verify all 6 switch cases for addressType"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 175,
      "scenario": "Test booking-details-view: Verify behavior when priceDetails.isFullyCoveredByVoucherOrSubscription || priceDetails.finalAmount === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\booking-details-view.tsx",
      "type": "if",
      "line": 178,
      "scenario": "Test booking-details-view: Verify behavior when paymentDetails.paymentMethodId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when !minutes is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when hours > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when mins > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when hours > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when isGift is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 123,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when defaultPmId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 126,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when session?.user?.id && currentStep !== \"complete\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 143,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when selectedCategory === \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 152,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when voucherType === \"monetary\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 153,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when typeof monetaryValue === \"number\" && monetaryValue >= 150 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 155,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when voucherType === \"treatment\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 156,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when selectedTreatment is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 157,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when selectedDuration && typeof selectedDuration.price === \"number\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 159,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when (!selectedTreatment.durations || selectedTreatment.durations.length === 0) &&\r\n          typeof selectedTreatment.fixedPrice === \"number\" &&\r\n          selectedTreatment.fixedPrice > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 168,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 175,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when selectedDurationId && selectedTreatment is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 179,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when !selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 188,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when voucherType === \"treatment\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 194,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when result.success && result.voucherId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 196,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when isGift is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 199,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when pmResult.success && pmResult.paymentMethods is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 203,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when defaultPm is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 217,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when pmResult.success && pmResult.paymentMethods is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 222,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when defaultPm is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 230,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when paymentResult.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 231,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when isGift && savedGiftDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 233,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when savedGiftDetails.sendOption === \"scheduled\" && savedGiftDetails.sendDate && savedGiftDetails.sendTime is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 248,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when !giftResult.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 265,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when pmResult.success && pmResult.paymentMethods is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 269,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when newDefaultPm is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 273,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when currentIndex < steps.length - 1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 278,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when currentIndex > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "switch",
      "line": 281,
      "scenario": "Test purchase-gift-voucher-client: Verify all 4 switch cases for currentStep"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 282,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when voucherType === \"monetary\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 284,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when voucherType === \"treatment\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 285,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when !treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 286,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when selectedTreatment?.durations?.length > 0 && !selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\purchase-gift-voucher-client.tsx",
      "type": "if",
      "line": 296,
      "scenario": "Test purchase-gift-voucher-client: Verify behavior when purchaseComplete is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 11,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 27,
      "scenario": "Test working-hours-actions: Verify behavior when settings.fixedHours is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 57,
      "scenario": "Test working-hours-actions: Verify behavior when !fixedHours || fixedHours.length !== 7 is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 65,
      "scenario": "Test working-hours-actions: Verify behavior when !dayExists is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 79,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 102,
      "scenario": "Test working-hours-actions: Verify behavior when typeof date.date === \"string\" is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 104,
      "scenario": "Test working-hours-actions: Verify behavior when date.date.includes(\"T\") is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 112,
      "scenario": "Test working-hours-actions: Verify behavior when isNaN(processedDate.getTime()) is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 129,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 165,
      "scenario": "Test working-hours-actions: Verify behavior when typeof dateStr === \"string\" is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 166,
      "scenario": "Test working-hours-actions: Verify behavior when dateStr.includes(\"T\") is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 171,
      "scenario": "Test working-hours-actions: Verify behavior when isNaN(processedDate.getTime()) is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 196,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 226,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 229,
      "scenario": "Test working-hours-actions: Verify behavior when index < 0 || index >= settings.specialDates.length is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 250,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 254,
      "scenario": "Test working-hours-actions: Verify behavior when !settings.specialDateEvents || index < 0 || index >= settings.specialDateEvents.length is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 278,
      "scenario": "Test working-hours-actions: Verify behavior when !data.fixedHours || data.fixedHours.length !== 7 is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 287,
      "scenario": "Test working-hours-actions: Verify behavior when !dayExists is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 295,
      "scenario": "Test working-hours-actions: Verify behavior when typeof date.date === \"string\" is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 297,
      "scenario": "Test working-hours-actions: Verify behavior when date.date.includes(\"T\") is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 305,
      "scenario": "Test working-hours-actions: Verify behavior when isNaN(processedDate.getTime()) is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 327,
      "scenario": "Test working-hours-actions: Verify behavior when typeof dateStr === \"string\" is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 328,
      "scenario": "Test working-hours-actions: Verify behavior when dateStr.includes(\"T\") is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 333,
      "scenario": "Test working-hours-actions: Verify behavior when isNaN(processedDate.getTime()) is true/false"
    },
    {
      "file": "actions\\working-hours-actions.ts",
      "type": "if",
      "line": 383,
      "scenario": "Test working-hours-actions: Verify behavior when !settings is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test customers-client: Verify behavior when result.success && result.data is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 73,
      "scenario": "Test customers-client: Verify behavior when result.success && result.data is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test customers-client: Verify behavior when amount === undefined || amount === null is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 103,
      "scenario": "Test customers-client: Verify behavior when isNaN(numericAmount) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 109,
      "scenario": "Test customers-client: Verify behavior when userType === 'guest' is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 358,
      "scenario": "Test customers-client: Verify behavior when currentPage > 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 368,
      "scenario": "Test customers-client: Verify behavior when !showPage is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 369,
      "scenario": "Test customers-client: Verify behavior when page === currentPage - 3 || page === currentPage + 3 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\customers\\customers-client.tsx",
      "type": "if",
      "line": 391,
      "scenario": "Test customers-client: Verify behavior when currentPage < totalPages is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 47,
      "scenario": "Test scheduling-step: Verify behavior when !address is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test scheduling-step: Verify behavior when address.addressType === \"apartment\" && address.apartmentDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test scheduling-step: Verify behavior when address.apartmentDetails.floor !== undefined && address.apartmentDetails.floor !== null is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 57,
      "scenario": "Test scheduling-step: Verify behavior when address.apartmentDetails.apartmentNumber is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 60,
      "scenario": "Test scheduling-step: Verify behavior when address.apartmentDetails.entrance is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test scheduling-step: Verify behavior when address.addressType === \"house\" && address.houseDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 64,
      "scenario": "Test scheduling-step: Verify behavior when address.houseDetails.doorName is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 67,
      "scenario": "Test scheduling-step: Verify behavior when address.houseDetails.entrance is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 70,
      "scenario": "Test scheduling-step: Verify behavior when address.addressType === \"office\" && address.officeDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test scheduling-step: Verify behavior when address.officeDetails.buildingName is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 74,
      "scenario": "Test scheduling-step: Verify behavior when address.officeDetails.floor !== undefined && address.officeDetails.floor !== null is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test scheduling-step: Verify behavior when address.officeDetails.entrance is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 81,
      "scenario": "Test scheduling-step: Verify behavior when address.addressType === \"hotel\" && address.hotelDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 82,
      "scenario": "Test scheduling-step: Verify behavior when address.hotelDetails.hotelName is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test scheduling-step: Verify behavior when address.hotelDetails.roomNumber is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test scheduling-step: Verify behavior when address.addressType === \"other\" && address.otherDetails?.instructions is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 91,
      "scenario": "Test scheduling-step: Verify behavior when address.hasPrivateParking is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 94,
      "scenario": "Test scheduling-step: Verify behavior when address.additionalNotes is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 149,
      "scenario": "Test scheduling-step: Verify behavior when !selectedAddressId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 154,
      "scenario": "Test scheduling-step: Verify behavior when localAddresses.length > 0 && !form.getValues(\"selectedAddressId\") is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 157,
      "scenario": "Test scheduling-step: Verify behavior when defaultAddress is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 171,
      "scenario": "Test scheduling-step: Verify behavior when watchedDate is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 174,
      "scenario": "Test scheduling-step: Verify behavior when previousDate && previousDate.getTime() !== watchedDate.getTime() is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 179,
      "scenario": "Test scheduling-step: Verify behavior when !previousDate is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 190,
      "scenario": "Test scheduling-step: Verify behavior when existingIndex > -1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\scheduling-step.tsx",
      "type": "if",
      "line": 194,
      "scenario": "Test scheduling-step: Verify behavior when upsertedAddress.isDefault is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test treatment-selection-step: Verify behavior when !selectedCategory is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 87,
      "scenario": "Test treatment-selection-step: Verify behavior when currentSource === \"new_purchase\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 92,
      "scenario": "Test treatment-selection-step: Verify behavior when bookingOptions.source === \"subscription_redemption\" && form.getValues(\"selectedUserSubscriptionId\") is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test treatment-selection-step: Verify behavior when sub && sub.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 107,
      "scenario": "Test treatment-selection-step: Verify behavior when sub.selectedDurationId || sub.selectedDurationDetails?._id is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 117,
      "scenario": "Test treatment-selection-step: Verify behavior when formVoucherId && bookingOptions.source === \"gift_voucher_redemption\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 122,
      "scenario": "Test treatment-selection-step: Verify behavior when voucher?.voucherType === \"treatment\" && voucher.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 127,
      "scenario": "Test treatment-selection-step: Verify behavior when treatmentFromVoucher is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 134,
      "scenario": "Test treatment-selection-step: Verify behavior when voucher.selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 148,
      "scenario": "Test treatment-selection-step: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && !data.selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 186,
      "scenario": "Test treatment-selection-step: Verify behavior when sub.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 189,
      "scenario": "Test treatment-selection-step: Verify behavior when (sub.treatmentId as ITreatment).pricingType === \"duration_based\" &&\n                          sub.selectedDurationDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 233,
      "scenario": "Test treatment-selection-step: Verify behavior when voucher.voucherType === \"treatment\" && voucher.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 240,
      "scenario": "Test treatment-selection-step: Verify behavior when treatmentDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 243,
      "scenario": "Test treatment-selection-step: Verify behavior when treatmentDetails.pricingType === \"duration_based\" && voucher.selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 250,
      "scenario": "Test treatment-selection-step: Verify behavior when durationDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\treatment-selection-step.tsx",
      "type": "if",
      "line": 258,
      "scenario": "Test treatment-selection-step: Verify behavior when voucher.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 42,
      "scenario": "Test sidebar: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 44,
      "scenario": "Test sidebar: Verify behavior when !roles || roles.length <= 1 is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "switch",
      "line": 46,
      "scenario": "Test sidebar: Verify all 5 switch cases for role"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "switch",
      "line": 54,
      "scenario": "Test sidebar: Verify all 5 switch cases for role"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test sidebar: Verify behavior when role === activeRole is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 65,
      "scenario": "Test sidebar: Verify behavior when result.success || result.activeRole is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 81,
      "scenario": "Test sidebar: Verify behavior when isCollapsed is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 161,
      "scenario": "Test sidebar: Verify behavior when session?.user is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 162,
      "scenario": "Test sidebar: Verify behavior when session.user.treatmentPreferences is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 164,
      "scenario": "Test sidebar: Verify behavior when session.user.notificationPreferences is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 190,
      "scenario": "Test sidebar: Verify behavior when name is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 193,
      "scenario": "Test sidebar: Verify behavior when email is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 258,
      "scenario": "Test sidebar: Verify behavior when session?.user?.activeRole !== \"member\" is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 474,
      "scenario": "Test sidebar: Verify behavior when !quickActions || quickActions.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 495,
      "scenario": "Test sidebar: Verify behavior when isMobile is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 544,
      "scenario": "Test sidebar: Verify behavior when isMobile is true/false"
    },
    {
      "file": "components\\dashboard\\layout\\sidebar.tsx",
      "type": "if",
      "line": 547,
      "scenario": "Test sidebar: Verify behavior when isCollapsed && !isMobile is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 25,
      "scenario": "Test auth: Verify behavior when password.length < 8 is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 27,
      "scenario": "Test auth: Verify behavior when !/[A-Z]/.test(password) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 30,
      "scenario": "Test auth: Verify behavior when !/[a-z]/.test(password) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 32,
      "scenario": "Test auth: Verify behavior when !/[0-9]/.test(password) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 40,
      "scenario": "Test auth: Verify behavior when !cleaned.startsWith(\"+\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 41,
      "scenario": "Test auth: Verify behavior when cleaned.startsWith(\"0\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 43,
      "scenario": "Test auth: Verify behavior when cleaned.length === 9 && /^[5-9]/.test(cleaned) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 45,
      "scenario": "Test auth: Verify behavior when cleaned.length === 10 && cleaned.startsWith(\"972\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 47,
      "scenario": "Test auth: Verify behavior when cleaned.length === 10 && /^[5-9]/.test(cleaned) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 50,
      "scenario": "Test auth: Verify behavior when cleaned.startsWith(\"+9720\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 52,
      "scenario": "Test auth: Verify behavior when cleaned.startsWith(\"+972\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 54,
      "scenario": "Test auth: Verify behavior when !nationalNumber.startsWith(\"5\") || nationalNumber.length !== 9 is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 59,
      "scenario": "Test auth: Verify behavior when !roles || roles.length === 0 is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 60,
      "scenario": "Test auth: Verify behavior when roles.includes(\"admin\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 61,
      "scenario": "Test auth: Verify behavior when roles.includes(\"professional\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 62,
      "scenario": "Test auth: Verify behavior when roles.includes(\"partner\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 63,
      "scenario": "Test auth: Verify behavior when roles.includes(\"member\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 76,
      "scenario": "Test auth: Verify behavior when !credentials?.email || !credentials?.password is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 81,
      "scenario": "Test auth: Verify behavior when validateEmail(identifier) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 83,
      "scenario": "Test auth: Verify behavior when validatePhone(identifier) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 84,
      "scenario": "Test auth: Verify behavior when !cleaned.startsWith(\"+\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 85,
      "scenario": "Test auth: Verify behavior when cleaned.startsWith(\"0\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 88,
      "scenario": "Test auth: Verify behavior when cleaned.length === 9 && /^[5-9]/.test(cleaned) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 90,
      "scenario": "Test auth: Verify behavior when cleaned.length === 10 && cleaned.startsWith(\"972\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 94,
      "scenario": "Test auth: Verify behavior when cleaned.startsWith(\"+9720\") is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 102,
      "scenario": "Test auth: Verify behavior when !user is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 104,
      "scenario": "Test auth: Verify behavior when !user.password is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 108,
      "scenario": "Test auth: Verify behavior when !isValid is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 124,
      "scenario": "Test auth: Verify behavior when !credentials?.userId is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 130,
      "scenario": "Test auth: Verify behavior when !user is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 147,
      "scenario": "Test auth: Verify behavior when user is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 159,
      "scenario": "Test auth: Verify behavior when !activeRole || !dbUser?.roles.includes(activeRole) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 161,
      "scenario": "Test auth: Verify behavior when dbUser is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 172,
      "scenario": "Test auth: Verify behavior when trigger === \"update\" && session is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 176,
      "scenario": "Test auth: Verify behavior when dbUser is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 178,
      "scenario": "Test auth: Verify behavior when session.activeRole is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 180,
      "scenario": "Test auth: Verify behavior when !dbUser.roles.includes(activeRole) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 195,
      "scenario": "Test auth: Verify behavior when token.id is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 199,
      "scenario": "Test auth: Verify behavior when dbUser is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 202,
      "scenario": "Test auth: Verify behavior when !activeRole || !dbUser.roles.includes(activeRole) is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 213,
      "scenario": "Test auth: Verify behavior when account is true/false"
    },
    {
      "file": "lib\\auth\\auth.ts",
      "type": "if",
      "line": 216,
      "scenario": "Test auth: Verify behavior when session.user && token is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 20,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !bookingResult?.treatmentId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 27,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 29,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !isValid(dateObj) is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 33,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !isValid(dateObj) is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 40,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !isValid(dateObj) is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !bookingTreatment is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 44,
      "scenario": "Test guest-booking-confirmation: Verify behavior when bookingTreatment.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test guest-booking-confirmation: Verify behavior when bookingResult?.selectedDurationId && bookingTreatment.durations is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test guest-booking-confirmation: Verify behavior when duration is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test guest-booking-confirmation: Verify behavior when hours > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test guest-booking-confirmation: Verify behavior when mins > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test guest-booking-confirmation: Verify behavior when hours > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "switch",
      "line": 66,
      "scenario": "Test guest-booking-confirmation: Verify all 4 switch cases for bookingResult?.therapistGenderPreference"
    },
    {
      "file": "components\\booking\\steps\\guest-booking-confirmation.tsx",
      "type": "if",
      "line": 74,
      "scenario": "Test guest-booking-confirmation: Verify behavior when !bookingResult is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 58,
      "scenario": "Test booking-wizard: Verify behavior when bookingOptions.bookingDate && bookingOptions.selectedTreatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 76,
      "scenario": "Test booking-wizard: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 93,
      "scenario": "Test booking-wizard: Verify behavior when !bookingOptions.selectedTreatmentId ||\n      !bookingOptions.bookingDate ||\n      !bookingOptions.bookingTime ||\n      !currentUser.id is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test booking-wizard: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && !bookingOptions.selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 126,
      "scenario": "Test booking-wizard: Verify behavior when result.success && result.priceDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 140,
      "scenario": "Test booking-wizard: Verify behavior when currentStep >= 3 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 150,
      "scenario": "Test booking-wizard: Verify behavior when timeSlots.length > 0 && !bookingOptions.bookingTime is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 153,
      "scenario": "Test booking-wizard: Verify behavior when firstAvailableSlot is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 158,
      "scenario": "Test booking-wizard: Verify behavior when currentStep === TOTAL_STEPS_WITH_PAYMENT - 1 && // Summary step\n      calculatedPrice?.finalAmount === 0 &&\n      calculatedPrice?.isFullyCoveredByVoucherOrSubscription is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 170,
      "scenario": "Test booking-wizard: Verify behavior when !bookingOptions.selectedTreatmentId ||\n      !bookingOptions.bookingDate ||\n      !bookingOptions.bookingTime ||\n      !calculatedPrice ||\n      !bookingOptions.selectedAddressId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 179,
      "scenario": "Test booking-wizard: Verify behavior when !skipPaymentUI && calculatedPrice.finalAmount > 0 && !bookingOptions.selectedPaymentMethodId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "if",
      "line": 226,
      "scenario": "Test booking-wizard: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\booking-wizard.tsx",
      "type": "switch",
      "line": 247,
      "scenario": "Test booking-wizard: Verify all 7 switch cases for currentStep"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 49,
      "scenario": "Test bookings-columns: Verify behavior when !canReview is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 54,
      "scenario": "Test bookings-columns: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 58,
      "scenario": "Test bookings-columns: Verify behavior when error is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test bookings-columns: Verify behavior when hasReview is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 101,
      "scenario": "Test bookings-columns: Verify behavior when !canCancel is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 185,
      "scenario": "Test bookings-columns: Verify behavior when actualStatus === \"in_process\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 211,
      "scenario": "Test bookings-columns: Verify behavior when !notes || notes.trim().length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 212,
      "scenario": "Test bookings-columns: Verify behavior when !isLong is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "switch",
      "line": 239,
      "scenario": "Test bookings-columns: Verify all 3 switch cases for locale"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 266,
      "scenario": "Test bookings-columns: Verify behavior when treatment?.pricingType === \"duration_based\" && booking.selectedDurationId && treatment.durations is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 272,
      "scenario": "Test bookings-columns: Verify behavior when selectedDuration is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 275,
      "scenario": "Test bookings-columns: Verify behavior when treatment?.pricingType === \"fixed\" && treatment.defaultDurationMinutes is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "switch",
      "line": 293,
      "scenario": "Test bookings-columns: Verify all 4 switch cases for pref"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 348,
      "scenario": "Test bookings-columns: Verify behavior when isToday is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 350,
      "scenario": "Test bookings-columns: Verify behavior when isTomorrow is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 352,
      "scenario": "Test bookings-columns: Verify behavior when !isPast is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\bookings-columns.tsx",
      "type": "if",
      "line": 381,
      "scenario": "Test bookings-columns: Verify behavior when !address is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-info-step.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test guest-info-step: Verify behavior when monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate()) is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-info-step.tsx",
      "type": "if",
      "line": 81,
      "scenario": "Test guest-info-step: Verify behavior when data.isBookingForSomeoneElse is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-info-step.tsx",
      "type": "if",
      "line": 91,
      "scenario": "Test guest-info-step: Verify behavior when !hideRecipientBirthGender && data.isBookingForSomeoneElse && data.recipientBirthDate is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-info-step.tsx",
      "type": "if",
      "line": 95,
      "scenario": "Test guest-info-step: Verify behavior when !data.isBookingForSomeoneElse && data.birthDate is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-info-step.tsx",
      "type": "if",
      "line": 141,
      "scenario": "Test guest-info-step: Verify behavior when !checked is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test user-management: Verify behavior when !dateOfBirth is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test user-management: Verify behavior when monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 68,
      "scenario": "Test user-management: Verify behavior when !dateString is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 75,
      "scenario": "Test user-management: Verify behavior when !name is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 136,
      "scenario": "Test user-management: Verify behavior when currentPage > 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 138,
      "scenario": "Test user-management: Verify behavior when searchTerm is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 140,
      "scenario": "Test user-management: Verify behavior when roleFilter.length > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 142,
      "scenario": "Test user-management: Verify behavior when sortField !== \"name\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 145,
      "scenario": "Test user-management: Verify behavior when sortDirection !== \"asc\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 166,
      "scenario": "Test user-management: Verify behavior when roles.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 175,
      "scenario": "Test user-management: Verify behavior when !gender is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 192,
      "scenario": "Test user-management: Verify behavior when !userToDelete is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 195,
      "scenario": "Test user-management: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 211,
      "scenario": "Test user-management: Verify behavior when !userForPasswordChange is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 214,
      "scenario": "Test user-management: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 230,
      "scenario": "Test user-management: Verify behavior when current.includes(role) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 249,
      "scenario": "Test user-management: Verify behavior when timeout is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 253,
      "scenario": "Test user-management: Verify behavior when totalPages <= 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 259,
      "scenario": "Test user-management: Verify behavior when endPage - startPage + 1 < maxPagesToShow is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 268,
      "scenario": "Test user-management: Verify behavior when currentPage > 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 308,
      "scenario": "Test user-management: Verify behavior when currentPage < totalPages is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 421,
      "scenario": "Test user-management: Verify behavior when input is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-management\\user-management.tsx",
      "type": "if",
      "line": 483,
      "scenario": "Test user-management: Verify behavior when input is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 28,
      "scenario": "Test booking-confirmation: Verify behavior when !bookingResult is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test booking-confirmation: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 83,
      "scenario": "Test booking-confirmation: Verify behavior when !preferenceKey is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test booking-confirmation: Verify behavior when source === \"subscription_redemption\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 90,
      "scenario": "Test booking-confirmation: Verify behavior when source === \"gift_voucher_redemption\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 99,
      "scenario": "Test booking-confirmation: Verify behavior when priceDetails.redeemedUserSubscriptionId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 108,
      "scenario": "Test booking-confirmation: Verify behavior when priceDetails.appliedGiftVoucherId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "if",
      "line": 112,
      "scenario": "Test booking-confirmation: Verify behavior when voucher is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-confirmation.tsx",
      "type": "switch",
      "line": 136,
      "scenario": "Test booking-confirmation: Verify all 6 switch cases for addressType"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 24,
      "scenario": "Test admin-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 29,
      "scenario": "Test admin-actions: Verify behavior when searchTerm is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 34,
      "scenario": "Test admin-actions: Verify behavior when roleFilter && roleFilter.length > 0 is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 62,
      "scenario": "Test admin-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 82,
      "scenario": "Test admin-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 93,
      "scenario": "Test admin-actions: Verify behavior when !name || !email || !phone || !password || !roles.length || !gender is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 96,
      "scenario": "Test admin-actions: Verify behavior when password.length < 6 is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 100,
      "scenario": "Test admin-actions: Verify behavior when existingEmail is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 103,
      "scenario": "Test admin-actions: Verify behavior when existingPhone is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 108,
      "scenario": "Test admin-actions: Verify behavior when dateOfBirthStr && isNaN(dateOfBirth?.getTime()) is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 122,
      "scenario": "Test admin-actions: Verify behavior when error.code === 11000 is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 122,
      "scenario": "Test admin-actions: Verify behavior when error.message.includes(\"email\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 125,
      "scenario": "Test admin-actions: Verify behavior when error.message.includes(\"phone\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 133,
      "scenario": "Test admin-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 143,
      "scenario": "Test admin-actions: Verify behavior when !name || !email || !phone || !roles.length || !gender is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 147,
      "scenario": "Test admin-actions: Verify behavior when !userToUpdate is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 149,
      "scenario": "Test admin-actions: Verify behavior when email.toLowerCase() !== userToUpdate.email is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 152,
      "scenario": "Test admin-actions: Verify behavior when existingEmail is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 155,
      "scenario": "Test admin-actions: Verify behavior when phone !== userToUpdate.phone is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 157,
      "scenario": "Test admin-actions: Verify behavior when existingPhone is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 161,
      "scenario": "Test admin-actions: Verify behavior when !roles.includes(userToUpdate.activeRole) is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 167,
      "scenario": "Test admin-actions: Verify behavior when dateOfBirthStr && dateOfBirth && isNaN(dateOfBirth.getTime()) is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 176,
      "scenario": "Test admin-actions: Verify behavior when error.code === 11000 is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 177,
      "scenario": "Test admin-actions: Verify behavior when error.message.includes(\"email\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 179,
      "scenario": "Test admin-actions: Verify behavior when error.message.includes(\"phone\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 185,
      "scenario": "Test admin-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 188,
      "scenario": "Test admin-actions: Verify behavior when userId === session.user.id is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 192,
      "scenario": "Test admin-actions: Verify behavior when !deletedUser is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 200,
      "scenario": "Test admin-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 205,
      "scenario": "Test admin-actions: Verify behavior when !user || !user.email is true/false"
    },
    {
      "file": "actions\\admin-actions.ts",
      "type": "if",
      "line": 242,
      "scenario": "Test admin-actions: Verify behavior when !emailResult.success is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 34,
      "scenario": "Test otp-form: Verify behavior when identifier is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test otp-form: Verify behavior when cooldown > 0 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test otp-form: Verify behavior when otpSent && otpInputRefs.current[0] is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test otp-form: Verify behavior when digits.length === 6 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test otp-form: Verify behavior when handleAutoFill(value, index) is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 66,
      "scenario": "Test otp-form: Verify behavior when value && !/^\\d+$/.test(value) is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test otp-form: Verify behavior when value && index < 5 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test otp-form: Verify behavior when handleAutoFill(value, index) is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 84,
      "scenario": "Test otp-form: Verify behavior when e.key === \"Backspace\" is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 84,
      "scenario": "Test otp-form: Verify behavior when !otpCode[index] && index > 0 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test otp-form: Verify behavior when e.key === \"ArrowLeft\" && index > 0 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 91,
      "scenario": "Test otp-form: Verify behavior when e.key === \"ArrowRight\" && index < 5 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 96,
      "scenario": "Test otp-form: Verify behavior when index !== 0 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 103,
      "scenario": "Test otp-form: Verify behavior when digits.length === 0 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 106,
      "scenario": "Test otp-form: Verify behavior when digitIndex < 6 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 111,
      "scenario": "Test otp-form: Verify behavior when nextEmptyIndex !== -1 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 122,
      "scenario": "Test otp-form: Verify behavior when typeof window !== \"undefined\" is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 123,
      "scenario": "Test otp-form: Verify behavior when loginType === \"email\" is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 131,
      "scenario": "Test otp-form: Verify behavior when hiddenInput && hiddenInput.value is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 138,
      "scenario": "Test otp-form: Verify behavior when !identifierValue is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 147,
      "scenario": "Test otp-form: Verify behavior when onIdentifierChange is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 157,
      "scenario": "Test otp-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 176,
      "scenario": "Test otp-form: Verify behavior when code.length !== 6 is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 180,
      "scenario": "Test otp-form: Verify behavior when !identifierValue is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 191,
      "scenario": "Test otp-form: Verify behavior when result.success && result.userId is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 197,
      "scenario": "Test otp-form: Verify behavior when signInResult?.error is true/false"
    },
    {
      "file": "components\\auth\\login\\otp-form.tsx",
      "type": "if",
      "line": 202,
      "scenario": "Test otp-form: Verify behavior when signInResult?.ok is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 36,
      "scenario": "Test summary-step: Verify behavior when bookingOptions.customAddressDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test summary-step: Verify behavior when bookingOptions.selectedAddressId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 47,
      "scenario": "Test summary-step: Verify behavior when !preferenceKey is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test summary-step: Verify behavior when bookingOptions.source === \"subscription_redemption\" && bookingOptions.selectedUserSubscriptionId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test summary-step: Verify behavior when bookingOptions.source === \"gift_voucher_redemption\" && bookingOptions.selectedGiftVoucherId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 67,
      "scenario": "Test summary-step: Verify behavior when voucher is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 67,
      "scenario": "Test summary-step: Verify behavior when voucher.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test summary-step: Verify behavior when !calculatedPrice is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\summary-step.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test summary-step: Verify behavior when isFullyCoveredByVoucherOrSubscription is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 35,
      "scenario": "Test notification-actions: Verify behavior when identifierType === \"email\" && !validateEmail(identifier) is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 42,
      "scenario": "Test notification-actions: Verify behavior when identifierType === \"phone\" && !validatePhone(identifier) is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 48,
      "scenario": "Test notification-actions: Verify behavior when process.env.NODE_ENV === \"development\" is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 63,
      "scenario": "Test notification-actions: Verify behavior when !result.success is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 77,
      "scenario": "Test notification-actions: Verify behavior when identifierType === \"email\" is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 79,
      "scenario": "Test notification-actions: Verify behavior when identifier.startsWith(\"+\") is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 101,
      "scenario": "Test notification-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 115,
      "scenario": "Test notification-actions: Verify behavior when existingOTP is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 117,
      "scenario": "Test notification-actions: Verify behavior when timeDiff > -540 && timeDiff < 0 is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 144,
      "scenario": "Test notification-actions: Verify behavior when !result.success is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 179,
      "scenario": "Test notification-actions: Verify behavior when process.env.NODE_ENV === \"development\" is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 182,
      "scenario": "Test notification-actions: Verify behavior when !storedCode is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 187,
      "scenario": "Test notification-actions: Verify behavior when storedCode !== code is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 199,
      "scenario": "Test notification-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 225,
      "scenario": "Test notification-actions: Verify behavior when !token is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 233,
      "scenario": "Test notification-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 290,
      "scenario": "Test notification-actions: Verify behavior when type === \"email\" && !validateEmail(recipient) is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 295,
      "scenario": "Test notification-actions: Verify behavior when type === \"phone\" && !validatePhone(recipient) is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "switch",
      "line": 304,
      "scenario": "Test notification-actions: Verify all 4 switch cases for notificationType"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 313,
      "scenario": "Test notification-actions: Verify behavior when type === \"email\" is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 320,
      "scenario": "Test notification-actions: Verify behavior when type === \"email\" is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 351,
      "scenario": "Test notification-actions: Verify behavior when identifierType === \"email\" is true/false"
    },
    {
      "file": "actions\\notification-actions.ts",
      "type": "if",
      "line": 358,
      "scenario": "Test notification-actions: Verify behavior when !result.success is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 14,
      "scenario": "Test chart: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test chart: Verify behavior when !colorConfig.length is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test chart: Verify behavior when hideLabel || !payload?.length is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test chart: Verify behavior when labelFormatter is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 90,
      "scenario": "Test chart: Verify behavior when !value is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 95,
      "scenario": "Test chart: Verify behavior when !active || !payload?.length is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 172,
      "scenario": "Test chart: Verify behavior when !payload?.length is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 198,
      "scenario": "Test chart: Verify behavior when typeof payload !== \"object\" || payload === null is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 204,
      "scenario": "Test chart: Verify behavior when key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\" is true/false"
    },
    {
      "file": "components\\common\\ui\\chart.tsx",
      "type": "if",
      "line": 208,
      "scenario": "Test chart: Verify behavior when payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\" is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 14,
      "scenario": "Test chart: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test chart: Verify behavior when !colorConfig.length is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test chart: Verify behavior when hideLabel || !payload?.length is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test chart: Verify behavior when labelFormatter is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test chart: Verify behavior when !value is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 95,
      "scenario": "Test chart: Verify behavior when !active || !payload?.length is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 172,
      "scenario": "Test chart: Verify behavior when !payload?.length is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 198,
      "scenario": "Test chart: Verify behavior when typeof payload !== \"object\" || payload === null is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 204,
      "scenario": "Test chart: Verify behavior when key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\" is true/false"
    },
    {
      "file": "components\\ui\\chart.tsx",
      "type": "if",
      "line": 208,
      "scenario": "Test chart: Verify behavior when payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\" is true/false"
    },
    {
      "file": "components\\common\\purchase\\purchase-stats-overview.tsx",
      "type": "if",
      "line": 18,
      "scenario": "Test purchase-stats-overview: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 60,
      "scenario": "Test purchase-subscription-client: Verify behavior when selectedTreatmentData?.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test purchase-subscription-client: Verify behavior when selectedTreatmentData?.pricingType === \"duration_based\" && selectedTreatmentData.durations is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test purchase-subscription-client: Verify behavior when selectedTreatmentData?.pricingType === \"duration_based\" && selectedTreatmentData.durations is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 92,
      "scenario": "Test purchase-subscription-client: Verify behavior when !selectedTreatmentData is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 92,
      "scenario": "Test purchase-subscription-client: Verify behavior when selectedTreatmentData.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 95,
      "scenario": "Test purchase-subscription-client: Verify behavior when selectedTreatmentData.pricingType === \"duration_based\" && selectedDurationData is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test purchase-subscription-client: Verify behavior when !selectedSubscriptionData || singleSessionPrice <= 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 107,
      "scenario": "Test purchase-subscription-client: Verify behavior when session?.user?.id && currentStep !== \"complete\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 120,
      "scenario": "Test purchase-subscription-client: Verify behavior when currentIndex < steps.length - 1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 122,
      "scenario": "Test purchase-subscription-client: Verify behavior when nextStep.key === \"duration\" && selectedTreatmentData?.pricingType !== \"duration_based\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 126,
      "scenario": "Test purchase-subscription-client: Verify behavior when afterDurationIndex !== -1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 132,
      "scenario": "Test purchase-subscription-client: Verify behavior when currentIndex > 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 134,
      "scenario": "Test purchase-subscription-client: Verify behavior when prevStep.key === \"duration\" && selectedTreatmentData?.pricingType !== \"duration_based\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 139,
      "scenario": "Test purchase-subscription-client: Verify behavior when beforeDurationIndex !== -1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "switch",
      "line": 143,
      "scenario": "Test purchase-subscription-client: Verify all 6 switch cases for currentStep"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 156,
      "scenario": "Test purchase-subscription-client: Verify behavior when !selectedSubscriptionId || !selectedTreatmentId || !selectedPaymentMethodId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 160,
      "scenario": "Test purchase-subscription-client: Verify behavior when selectedTreatmentData?.pricingType === \"duration_based\" && !selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 170,
      "scenario": "Test purchase-subscription-client: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 180,
      "scenario": "Test purchase-subscription-client: Verify behavior when purchaseComplete is true/false"
    },
    {
      "file": "components\\dashboard\\member\\subscriptions\\purchase-subscription-client.tsx",
      "type": "if",
      "line": 191,
      "scenario": "Test purchase-subscription-client: Verify behavior when subscriptions.length === 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test guest-summary-step: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && selectedTreatment.durations is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test guest-summary-step: Verify behavior when selectedTreatment?.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test guest-summary-step: Verify behavior when selectedDuration is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 67,
      "scenario": "Test guest-summary-step: Verify behavior when hours > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test guest-summary-step: Verify behavior when mins > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test guest-summary-step: Verify behavior when hours > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "switch",
      "line": 74,
      "scenario": "Test guest-summary-step: Verify all 4 switch cases for bookingOptions.therapistGenderPreference"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 81,
      "scenario": "Test guest-summary-step: Verify behavior when !couponCode.trim() || !setBookingOptions is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-summary-step.tsx",
      "type": "if",
      "line": 91,
      "scenario": "Test guest-summary-step: Verify behavior when !setBookingOptions is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 83,
      "scenario": "Test calendar: Verify behavior when currentMonth.getMonth() === 0 is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test calendar: Verify behavior when currentMonth.getMonth() === 11 is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 102,
      "scenario": "Test calendar: Verify behavior when !selected is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 103,
      "scenario": "Test calendar: Verify behavior when mode === \"single\" && selected instanceof Date is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 105,
      "scenario": "Test calendar: Verify behavior when mode === \"multiple\" && Array.isArray(selected) is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 108,
      "scenario": "Test calendar: Verify behavior when mode === \"range\" && selected && typeof selected === \"object\" && \"from\" in selected is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test calendar: Verify behavior when !selected.to is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 119,
      "scenario": "Test calendar: Verify behavior when disabled && disabled(date) is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 119,
      "scenario": "Test calendar: Verify behavior when mode === \"single\" is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 121,
      "scenario": "Test calendar: Verify behavior when mode === \"multiple\" is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 125,
      "scenario": "Test calendar: Verify behavior when isAlreadySelected is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 129,
      "scenario": "Test calendar: Verify behavior when mode === \"range\" is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 131,
      "scenario": "Test calendar: Verify behavior when !currentSelected || (currentSelected.from && currentSelected.to) is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 134,
      "scenario": "Test calendar: Verify behavior when currentSelected.from && !currentSelected.to is true/false"
    },
    {
      "file": "components\\common\\ui\\calendar.tsx",
      "type": "if",
      "line": 135,
      "scenario": "Test calendar: Verify behavior when date < currentSelected.from is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 41,
      "scenario": "Test gift-voucher-form: Verify behavior when data.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 42,
      "scenario": "Test gift-voucher-form: Verify behavior when !data.monetaryValue ||\r\n        isNaN(Number.parseFloat(data.monetaryValue)) ||\r\n        Number.parseFloat(data.monetaryValue) <= 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 49,
      "scenario": "Test gift-voucher-form: Verify behavior when data.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 50,
      "scenario": "Test gift-voucher-form: Verify behavior when !data.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test gift-voucher-form: Verify behavior when data.validFrom && data.validUntil && data.validUntil < data.validFrom is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 103,
      "scenario": "Test gift-voucher-form: Verify behavior when treatmentsRes.success && treatmentsRes.treatments is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 105,
      "scenario": "Test gift-voucher-form: Verify behavior when initialData?.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 108,
      "scenario": "Test gift-voucher-form: Verify behavior when foundTreatment is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 114,
      "scenario": "Test gift-voucher-form: Verify behavior when usersRes.success && usersRes.users is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 122,
      "scenario": "Test gift-voucher-form: Verify behavior when voucherType === \"monetary\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-form.tsx",
      "type": "if",
      "line": 146,
      "scenario": "Test gift-voucher-form: Verify behavior when !result.success || !result.giftVoucher is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when guestUserId is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 75,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when !guestUserId is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 80,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when result.success && result.userId is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when guestInfo.isGift && guestInfo.sendOption === \"scheduled\" && guestInfo.sendDate && guestInfo.sendTime is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 108,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when !initRes.success || !initRes.voucherId is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 119,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when confirmRes.success is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 178,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when next.selectedTreatmentId !== undefined is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 180,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when next.selectedDurationId !== undefined is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 240,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when currentStep === 1 is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 246,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when currentStep === 2 is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 247,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when currentStep === 3 is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 249,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when currentStep === 4 is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 250,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when currentStep === 5 is true/false"
    },
    {
      "file": "components\\gift-vouchers\\guest-gift-voucher-wizard.tsx",
      "type": "if",
      "line": 256,
      "scenario": "Test guest-gift-voucher-wizard: Verify behavior when currentStep === 6 && purchaseComplete is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test reset-password-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test reset-password-form: Verify behavior when confirmPassword is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test reset-password-form: Verify behavior when password !== confirmPassword is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test reset-password-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 65,
      "scenario": "Test reset-password-form: Verify behavior when isVerifying is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 80,
      "scenario": "Test reset-password-form: Verify behavior when !tokenValid is true/false"
    },
    {
      "file": "components\\auth\\reset-password\\reset-password-form.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test reset-password-form: Verify behavior when success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\purchase-reports\\purchase-reports-client.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test purchase-reports-client: Verify behavior when result.success && result.data is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\purchase-reports\\purchase-reports-client.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test purchase-reports-client: Verify behavior when result.success && result.data is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\purchase-reports\\purchase-reports-client.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test purchase-reports-client: Verify behavior when activeTab === \"transactions\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\purchase-reports\\purchase-reports-client.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test purchase-reports-client: Verify behavior when activeTab === \"overview\" is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 23,
      "scenario": "Test page: Verify behavior when !dateString is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test page: Verify behavior when !bookingId || sessionStatus !== \"authenticated\" is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 44,
      "scenario": "Test page: Verify behavior when sessionStatus === \"unauthenticated\" is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test page: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test page: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 80,
      "scenario": "Test page: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 96,
      "scenario": "Test page: Verify behavior when result.success && result.booking is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test page: Verify behavior when sessionStatus === \"loading\" || isLoading is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 122,
      "scenario": "Test page: Verify behavior when error is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 128,
      "scenario": "Test page: Verify behavior when !booking is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 144,
      "scenario": "Test page: Verify behavior when booking.status === \"in_process\" is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 150,
      "scenario": "Test page: Verify behavior when isAssignedToCurrentPro is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 151,
      "scenario": "Test page: Verify behavior when booking.status === \"confirmed\" is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\professional\\booking-management\\[bookingId]\\page.tsx",
      "type": "if",
      "line": 166,
      "scenario": "Test page: Verify behavior when !statusKey is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 31,
      "scenario": "Test phone-change-form: Verify behavior when !phone is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test phone-change-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test phone-change-form: Verify behavior when result.message === \"phoneExists\" is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test phone-change-form: Verify behavior when code.length !== 6 is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test phone-change-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test phone-change-form: Verify behavior when onPhoneChanged is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test phone-change-form: Verify behavior when value && !/^\\d+$/.test(value) is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 80,
      "scenario": "Test phone-change-form: Verify behavior when value && index < 5 is true/false"
    },
    {
      "file": "components\\dashboard\\account\\phone-change-form.tsx",
      "type": "if",
      "line": 83,
      "scenario": "Test phone-change-form: Verify behavior when step === \"otp\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\purchase-history\\purchase-history-client.tsx",
      "type": "if",
      "line": 33,
      "scenario": "Test purchase-history-client: Verify behavior when result.success && result.data is true/false"
    },
    {
      "file": "components\\dashboard\\member\\purchase-history\\purchase-history-client.tsx",
      "type": "if",
      "line": 165,
      "scenario": "Test purchase-history-client: Verify behavior when currentPage > 1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\purchase-history\\purchase-history-client.tsx",
      "type": "if",
      "line": 176,
      "scenario": "Test purchase-history-client: Verify behavior when !showPage is true/false"
    },
    {
      "file": "components\\dashboard\\member\\purchase-history\\purchase-history-client.tsx",
      "type": "if",
      "line": 177,
      "scenario": "Test purchase-history-client: Verify behavior when page === currentPage - 3 || page === currentPage + 3 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\purchase-history\\purchase-history-client.tsx",
      "type": "if",
      "line": 198,
      "scenario": "Test purchase-history-client: Verify behavior when currentPage < totalPages is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 30,
      "scenario": "Test email-change-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 33,
      "scenario": "Test email-change-form: Verify behavior when result.message === \"emailExists\" is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 47,
      "scenario": "Test email-change-form: Verify behavior when code.length !== 6 is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test email-change-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test email-change-form: Verify behavior when onEmailChanged is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 73,
      "scenario": "Test email-change-form: Verify behavior when value && !/^\\d+$/.test(value) is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 76,
      "scenario": "Test email-change-form: Verify behavior when value && index < 5 is true/false"
    },
    {
      "file": "components\\dashboard\\account\\email-change-form.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test email-change-form: Verify behavior when step === \"otp\" is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 24,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !batch.isActive is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 25,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when validFrom > now is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 28,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when endOfValidUntilDay <= now is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 39,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 43,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !validatedFields.success is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 93,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !validatedFields.success is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 102,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !updatedBatch is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 128,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 132,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !batch is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 153,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 156,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when filters.name is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 157,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when typeof filters.isActive === \"boolean\" is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 159,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when filters.partnerId is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 175,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when filters.effectiveStatus is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 189,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 195,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !batch is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 208,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 211,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !validatedFields.success is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 219,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !batch is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 224,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when validCouponIds.length === 0 is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 244,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when !coupon.isActive is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 245,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when validFrom > now is true/false"
    },
    {
      "file": "actions\\partner-coupon-batch-actions.ts",
      "type": "if",
      "line": 248,
      "scenario": "Test partner-coupon-batch-actions: Verify behavior when endOfValidUntilDay <= now is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 128,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.amount !== \"number\" && typeof this.originalAmount === \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 132,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.amount === \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 136,
      "scenario": "Test gift-voucher: Verify behavior when this.amount < 0 is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 149,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.amount === \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 152,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.originalAmount !== \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 156,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.monetaryValue !== \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 158,
      "scenario": "Test gift-voucher: Verify behavior when this.voucherType === \"monetary\" && typeof this.originalAmount === \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 164,
      "scenario": "Test gift-voucher: Verify behavior when this.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 166,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.remainingAmount !== \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 167,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.originalAmount === \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 175,
      "scenario": "Test gift-voucher: Verify behavior when typeof this.remainingAmount === \"number\" && typeof this.originalAmount === \"number\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 179,
      "scenario": "Test gift-voucher: Verify behavior when this.remainingAmount > this.originalAmount is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 181,
      "scenario": "Test gift-voucher: Verify behavior when this.remainingAmount < 0 is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 196,
      "scenario": "Test gift-voucher: Verify behavior when new Date() > validUntilDate &&\r\n    this.status !== \"fully_used\" &&\r\n    this.status !== \"expired\" &&\r\n    this.status !== \"cancelled\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 201,
      "scenario": "Test gift-voucher: Verify behavior when this.voucherType === \"monetary\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 203,
      "scenario": "Test gift-voucher: Verify behavior when this.status === \"fully_used\" ||\r\n      this.status === \"expired\" ||\r\n      this.status === \"cancelled\" ||\r\n      (typeof this.remainingAmount === \"number\" && this.remainingAmount <= 0) is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 208,
      "scenario": "Test gift-voucher: Verify behavior when this.status === \"active\" || this.status === \"partially_used\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 210,
      "scenario": "Test gift-voucher: Verify behavior when this.voucherType === \"treatment\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 211,
      "scenario": "Test gift-voucher: Verify behavior when this.status === \"fully_used\" || this.status === \"expired\" || this.status === \"cancelled\" is true/false"
    },
    {
      "file": "lib\\db\\models\\gift-voucher.ts",
      "type": "if",
      "line": 214,
      "scenario": "Test gift-voucher: Verify behavior when this.status === \"active\" || this.status === \"pending_send\" || this.status === \"sent\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 50,
      "scenario": "Test subscriptions-client: Verify behavior when search is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test subscriptions-client: Verify behavior when isActive !== undefined is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 54,
      "scenario": "Test subscriptions-client: Verify behavior when result.success && Array.isArray(result.subscriptions) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test subscriptions-client: Verify behavior when searchTerm || activeFilter !== \"all\" || currentPage > 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test subscriptions-client: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 104,
      "scenario": "Test subscriptions-client: Verify behavior when !currentSubscription is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 107,
      "scenario": "Test subscriptions-client: Verify behavior when result.success && result.subscription is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 123,
      "scenario": "Test subscriptions-client: Verify behavior when !currentSubscription is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 126,
      "scenario": "Test subscriptions-client: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\subscriptions\\subscriptions-client.tsx",
      "type": "if",
      "line": 131,
      "scenario": "Test subscriptions-client: Verify behavior when subscriptions.length === 1 && currentPage > 1 is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 20,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 27,
      "scenario": "Test professional-actions: Verify behavior when status is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 38,
      "scenario": "Test professional-actions: Verify behavior when search is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 47,
      "scenario": "Test professional-actions: Verify behavior when sortBy.startsWith('user.') is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 70,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 77,
      "scenario": "Test professional-actions: Verify behavior when !professional is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 95,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 100,
      "scenario": "Test professional-actions: Verify behavior when !professional is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 103,
      "scenario": "Test professional-actions: Verify behavior when status === \"active\" && professional.status !== \"active\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 106,
      "scenario": "Test professional-actions: Verify behavior when status === \"rejected\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 120,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 134,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 158,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 163,
      "scenario": "Test professional-actions: Verify behavior when !professional is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 177,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 181,
      "scenario": "Test professional-actions: Verify behavior when !professional is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "switch",
      "line": 185,
      "scenario": "Test professional-actions: Verify all 4 switch cases for period"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 224,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-actions.ts",
      "type": "if",
      "line": 237,
      "scenario": "Test professional-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "type": "if",
      "line": 22,
      "scenario": "Test gift-voucher-row: Verify behavior when !isActive is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "type": "switch",
      "line": 22,
      "scenario": "Test gift-voucher-row: Verify all 9 switch cases for status"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test gift-voucher-row: Verify behavior when !isActive is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "type": "switch",
      "line": 37,
      "scenario": "Test gift-voucher-row: Verify all 9 switch cases for status"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "type": "if",
      "line": 179,
      "scenario": "Test gift-voucher-row: Verify behavior when daysLeft < 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-voucher-row.tsx",
      "type": "if",
      "line": 182,
      "scenario": "Test gift-voucher-row: Verify behavior when daysLeft === 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 75,
      "scenario": "Test guest-payment-step: Verify behavior when isCountingDown && countdown > 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test guest-payment-step: Verify behavior when countdown === 0 && isCountingDown is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 84,
      "scenario": "Test guest-payment-step: Verify behavior when isCountingDown || !termsAccepted is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test guest-payment-step: Verify behavior when !pendingBookingId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 87,
      "scenario": "Test guest-payment-step: Verify behavior when !bookingId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 102,
      "scenario": "Test guest-payment-step: Verify behavior when !calculatedPrice || calculatedPrice.finalAmount === 0 is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 159,
      "scenario": "Test guest-payment-step: Verify behavior when !pendingBookingId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-payment-step.tsx",
      "type": "if",
      "line": 163,
      "scenario": "Test guest-payment-step: Verify behavior when !bookingId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test guest-scheduling-step: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && selectedTreatment.durations is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "type": "if",
      "line": 65,
      "scenario": "Test guest-scheduling-step: Verify behavior when date is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test guest-scheduling-step: Verify behavior when selectedTreatment?.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "type": "if",
      "line": 82,
      "scenario": "Test guest-scheduling-step: Verify behavior when selectedDuration is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "type": "if",
      "line": 91,
      "scenario": "Test guest-scheduling-step: Verify behavior when !bookingOptions.bookingTime is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-scheduling-step.tsx",
      "type": "if",
      "line": 108,
      "scenario": "Test guest-scheduling-step: Verify behavior when !bookingOptions.bookingDate is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\admin-user-subscriptions-client.tsx",
      "type": "if",
      "line": 64,
      "scenario": "Test admin-user-subscriptions-client: Verify behavior when showRefreshToast is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\admin-user-subscriptions-client.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test admin-user-subscriptions-client: Verify behavior when result.success && result.userSubscriptions && result.pagination is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\admin-user-subscriptions-client.tsx",
      "type": "if",
      "line": 73,
      "scenario": "Test admin-user-subscriptions-client: Verify behavior when showRefreshToast is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\admin-user-subscriptions-client.tsx",
      "type": "if",
      "line": 82,
      "scenario": "Test admin-user-subscriptions-client: Verify behavior when initialUserSubscriptions.length > 0 &&\r\n      currentPage === initialPagination?.page &&\r\n      searchTerm === \"\" &&\r\n      statusFilter === \"all\" &&\r\n      limit === initialPagination?.limit is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\admin-user-subscriptions-client.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test admin-user-subscriptions-client: Verify behavior when newPage > 0 && newPage <= (pagination?.totalPages || 1) is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-treatment-selection-step.tsx",
      "type": "if",
      "line": 39,
      "scenario": "Test guest-treatment-selection-step: Verify behavior when !selectedCategory is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-treatment-selection-step.tsx",
      "type": "if",
      "line": 49,
      "scenario": "Test guest-treatment-selection-step: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && selectedTreatment.durations is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-treatment-selection-step.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test guest-treatment-selection-step: Verify behavior when !bookingOptions.selectedTreatmentId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-treatment-selection-step.tsx",
      "type": "if",
      "line": 60,
      "scenario": "Test guest-treatment-selection-step: Verify behavior when selectedTreatment?.pricingType === \"duration_based\" && !bookingOptions.selectedDurationId is true/false"
    },
    {
      "file": "components\\booking\\steps\\guest-treatment-selection-step.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test guest-treatment-selection-step: Verify behavior when selectedTreatment?.allowTherapistGenderSelection && !hideGenderPreference && !bookingOptions.therapistGenderPreference is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test admin-bookings-client: Verify behavior when statusFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 87,
      "scenario": "Test admin-bookings-client: Verify behavior when professionalFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test admin-bookings-client: Verify behavior when treatmentFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test admin-bookings-client: Verify behavior when dateRangeFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test admin-bookings-client: Verify behavior when priceRangeFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 90,
      "scenario": "Test admin-bookings-client: Verify behavior when addressFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 93,
      "scenario": "Test admin-bookings-client: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 101,
      "scenario": "Test admin-bookings-client: Verify behavior when error is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\admin-bookings-client.tsx",
      "type": "if",
      "line": 374,
      "scenario": "Test admin-bookings-client: Verify behavior when page > data.totalPages is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 21,
      "scenario": "Test coupon-actions: Verify behavior when !coupon.isActive is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 23,
      "scenario": "Test coupon-actions: Verify behavior when validFrom > now is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 28,
      "scenario": "Test coupon-actions: Verify behavior when endOfValidUntilDay <= now is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 38,
      "scenario": "Test coupon-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 42,
      "scenario": "Test coupon-actions: Verify behavior when !validatedFields.success is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 54,
      "scenario": "Test coupon-actions: Verify behavior when error.code === 11000 is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 61,
      "scenario": "Test coupon-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 64,
      "scenario": "Test coupon-actions: Verify behavior when !validatedFields.success is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test coupon-actions: Verify behavior when !updatedCoupon is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 81,
      "scenario": "Test coupon-actions: Verify behavior when error.code === 11000 is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 88,
      "scenario": "Test coupon-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 92,
      "scenario": "Test coupon-actions: Verify behavior when !deletedCoupon is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 108,
      "scenario": "Test coupon-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 112,
      "scenario": "Test coupon-actions: Verify behavior when filters.code is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 113,
      "scenario": "Test coupon-actions: Verify behavior when typeof filters.isActive === \"boolean\" is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 116,
      "scenario": "Test coupon-actions: Verify behavior when filters.partnerId is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 133,
      "scenario": "Test coupon-actions: Verify behavior when filters.effectiveStatus is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 146,
      "scenario": "Test coupon-actions: Verify behavior when !session || !isAdminUser(session.user) is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 163,
      "scenario": "Test coupon-actions: Verify behavior when !session || !isPartnerUser(session.user) || !session.user.id is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 167,
      "scenario": "Test coupon-actions: Verify behavior when filters.code is true/false"
    },
    {
      "file": "actions\\coupon-actions.ts",
      "type": "if",
      "line": 169,
      "scenario": "Test coupon-actions: Verify behavior when typeof filters.isActive === \"boolean\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\member-gift-voucher-card.tsx",
      "type": "switch",
      "line": 20,
      "scenario": "Test member-gift-voucher-card: Verify all 7 switch cases for status"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 28,
      "scenario": "Test address-card: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 39,
      "scenario": "Test address-card: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test address-card: Verify behavior when address.addressType === \"apartment\" && address.apartmentDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test address-card: Verify behavior when address.apartmentDetails.floor !== undefined && address.apartmentDetails.floor !== null is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 57,
      "scenario": "Test address-card: Verify behavior when address.apartmentDetails.apartmentNumber is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 60,
      "scenario": "Test address-card: Verify behavior when address.apartmentDetails.entrance is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 64,
      "scenario": "Test address-card: Verify behavior when address.addressType === \"house\" && address.houseDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 65,
      "scenario": "Test address-card: Verify behavior when address.houseDetails.doorName is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 68,
      "scenario": "Test address-card: Verify behavior when address.houseDetails.entrance is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test address-card: Verify behavior when address.addressType === \"office\" && address.officeDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test address-card: Verify behavior when address.officeDetails.buildingName is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 75,
      "scenario": "Test address-card: Verify behavior when address.officeDetails.floor !== undefined && address.officeDetails.floor !== null is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test address-card: Verify behavior when address.officeDetails.entrance is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 82,
      "scenario": "Test address-card: Verify behavior when address.addressType === \"hotel\" && address.hotelDetails is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 83,
      "scenario": "Test address-card: Verify behavior when address.hotelDetails.hotelName is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test address-card: Verify behavior when address.hotelDetails.roomNumber is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test address-card: Verify behavior when address.addressType === \"other\" && address.otherDetails?.instructions is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 92,
      "scenario": "Test address-card: Verify behavior when address.hasPrivateParking is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-card.tsx",
      "type": "if",
      "line": 94,
      "scenario": "Test address-card: Verify behavior when address.additionalNotes is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 13,
      "scenario": "Test admin-reviews-columns: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 18,
      "scenario": "Test admin-reviews-columns: Verify behavior when !date is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 30,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review?.bookingId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 44,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review?.bookingId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review?.treatmentId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review?.professionalId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review?.userId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review?.bookingId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 104,
      "scenario": "Test admin-reviews-columns: Verify behavior when !recipient is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 120,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-columns.tsx",
      "type": "if",
      "line": 163,
      "scenario": "Test admin-reviews-columns: Verify behavior when !review is true/false"
    },
    {
      "file": "components\\dashboard\\account\\password-change-form.tsx",
      "type": "if",
      "line": 26,
      "scenario": "Test password-change-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\account\\password-change-form.tsx",
      "type": "if",
      "line": 33,
      "scenario": "Test password-change-form: Verify behavior when result.message === \"passwordMismatch\" is true/false"
    },
    {
      "file": "components\\dashboard\\account\\password-change-form.tsx",
      "type": "if",
      "line": 39,
      "scenario": "Test password-change-form: Verify behavior when result.message === \"invalidCurrentPassword\" is true/false"
    },
    {
      "file": "components\\dashboard\\account\\password-change-form.tsx",
      "type": "if",
      "line": 45,
      "scenario": "Test password-change-form: Verify behavior when result.message === \"weakPassword\" is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 22,
      "scenario": "Test auth-actions: Verify behavior when phone is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 26,
      "scenario": "Test auth-actions: Verify behavior when phone is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 29,
      "scenario": "Test auth-actions: Verify behavior when !cleaned.startsWith(\"+\") is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 31,
      "scenario": "Test auth-actions: Verify behavior when cleaned.startsWith(\"0\") is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 35,
      "scenario": "Test auth-actions: Verify behavior when cleaned.length === 9 && /^[5-9]/.test(cleaned) is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 39,
      "scenario": "Test auth-actions: Verify behavior when cleaned.length === 10 && cleaned.startsWith(\"972\") is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 45,
      "scenario": "Test auth-actions: Verify behavior when cleaned.startsWith(\"+9720\") is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 50,
      "scenario": "Test auth-actions: Verify behavior when cleaned.startsWith(\"+972\") is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 53,
      "scenario": "Test auth-actions: Verify behavior when nationalNumber.length !== 9 || !/^[5-9]/.test(nationalNumber) is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 63,
      "scenario": "Test auth-actions: Verify behavior when day && month && year is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 72,
      "scenario": "Test auth-actions: Verify behavior when birthDate >= minAge && birthDate <= maxAge is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 80,
      "scenario": "Test auth-actions: Verify behavior when !name || !email || !password is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 85,
      "scenario": "Test auth-actions: Verify behavior when !validateEmail(email) is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test auth-actions: Verify behavior when formattedPhone && !validatePhone(formattedPhone) is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 95,
      "scenario": "Test auth-actions: Verify behavior when !passwordValidation.isValid is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 109,
      "scenario": "Test auth-actions: Verify behavior when emailExists is true/false"
    },
    {
      "file": "actions\\auth-actions.ts",
      "type": "if",
      "line": 112,
      "scenario": "Test auth-actions: Verify behavior when phoneExists is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 19,
      "scenario": "Test notification-manager: Verify behavior when process.env.TWILIO_ACCOUNT_SID && \n      process.env.TWILIO_AUTH_TOKEN && \n      process.env.TWILIO_ACCOUNT_SID.startsWith('AC') is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 40,
      "scenario": "Test notification-manager: Verify behavior when this.isDevelopment is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 44,
      "scenario": "Test notification-manager: Verify behavior when recipient.type === \"email\" is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 45,
      "scenario": "Test notification-manager: Verify behavior when !emailService.isConfigured() is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 51,
      "scenario": "Test notification-manager: Verify behavior when recipient.type === \"phone\" is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 52,
      "scenario": "Test notification-manager: Verify behavior when !smsService.isConfigured() is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 74,
      "scenario": "Test notification-manager: Verify behavior when this.isDevelopment is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 85,
      "scenario": "Test notification-manager: Verify behavior when recipient.type === \"email\" is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 116,
      "scenario": "Test notification-manager: Verify behavior when this.isDevelopment is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 136,
      "scenario": "Test notification-manager: Verify behavior when this.isDevelopment is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 158,
      "scenario": "Test notification-manager: Verify behavior when !resend is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "switch",
      "line": 163,
      "scenario": "Test notification-manager: Verify all 4 switch cases for data.type"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 198,
      "scenario": "Test notification-manager: Verify behavior when !twilioClient || !FROM_PHONE is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 215,
      "scenario": "Test notification-manager: Verify behavior when recipient.type === \"email\" is true/false"
    },
    {
      "file": "lib\\notifications\\notification-manager.ts",
      "type": "if",
      "line": 218,
      "scenario": "Test notification-manager: Verify behavior when recipient.type === \"phone\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 24,
      "scenario": "Test professional-sms-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 26,
      "scenario": "Test professional-sms-actions: Verify behavior when booking.status !== \"confirmed\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 33,
      "scenario": "Test professional-sms-actions: Verify behavior when !suitableResult.success || !suitableResult.professionals is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 48,
      "scenario": "Test professional-sms-actions: Verify behavior when !professional.userId?.phone is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 75,
      "scenario": "Test professional-sms-actions: Verify behavior when smsResult.success is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 109,
      "scenario": "Test professional-sms-actions: Verify behavior when !response is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 110,
      "scenario": "Test professional-sms-actions: Verify behavior when response.status !== \"pending\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 114,
      "scenario": "Test professional-sms-actions: Verify behavior when response.expiresAt < new Date() is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 120,
      "scenario": "Test professional-sms-actions: Verify behavior when !booking || booking.status !== \"in_process\" || booking.professionalId is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 123,
      "scenario": "Test professional-sms-actions: Verify behavior when action === \"accept\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 131,
      "scenario": "Test professional-sms-actions: Verify behavior when assignResult.success is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 148,
      "scenario": "Test professional-sms-actions: Verify behavior when action === \"decline\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 163,
      "scenario": "Test professional-sms-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 199,
      "scenario": "Test professional-sms-actions: Verify behavior when !session?.user || session.user.role !== \"admin\" is true/false"
    },
    {
      "file": "actions\\professional-sms-actions.ts",
      "type": "if",
      "line": 207,
      "scenario": "Test professional-sms-actions: Verify behavior when !booking || booking.status !== \"confirmed\" || booking.professionalId is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 55,
      "scenario": "Test address: Verify behavior when data.street is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 56,
      "scenario": "Test address: Verify behavior when data.streetNumber is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 57,
      "scenario": "Test address: Verify behavior when data.addressType === \"apartment\" && data.apartmentDetails?.apartmentNumber is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 60,
      "scenario": "Test address: Verify behavior when data.apartmentDetails.floor !== undefined && data.apartmentDetails.floor !== null is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 63,
      "scenario": "Test address: Verify behavior when data.apartmentDetails.entrance is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 66,
      "scenario": "Test address: Verify behavior when (data.addressType === \"house\" || data.addressType === \"private\") && data.houseDetails?.doorName is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 68,
      "scenario": "Test address: Verify behavior when data.houseDetails.entrance is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 71,
      "scenario": "Test address: Verify behavior when data.addressType === \"office\" is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 71,
      "scenario": "Test address: Verify behavior when data.officeDetails?.buildingName is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test address: Verify behavior when data.officeDetails?.floor !== undefined && data.officeDetails.floor !== null is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 76,
      "scenario": "Test address: Verify behavior when data.officeDetails?.entrance is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 78,
      "scenario": "Test address: Verify behavior when data.addressType === \"hotel\" && data.hotelDetails?.hotelName is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 80,
      "scenario": "Test address: Verify behavior when data.hotelDetails.roomNumber is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 82,
      "scenario": "Test address: Verify behavior when data.city is true/false"
    },
    {
      "file": "lib\\db\\models\\address.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test address: Verify behavior when this.isModified(\"street\") ||\n    this.isModified(\"streetNumber\") ||\n    this.isModified(\"city\") ||\n    this.isModified(\"addressType\") ||\n    this.isModified(\"apartmentDetails\") ||\n    this.isModified( is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 27,
      "scenario": "Test sidebar: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 47,
      "scenario": "Test sidebar: Verify behavior when setOpenProp is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test sidebar: Verify behavior when event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey) is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 104,
      "scenario": "Test sidebar: Verify behavior when collapsible === \"none\" is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 111,
      "scenario": "Test sidebar: Verify behavior when isMobile is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 361,
      "scenario": "Test sidebar: Verify behavior when !tooltip is true/false"
    },
    {
      "file": "components\\common\\ui\\sidebar.tsx",
      "type": "if",
      "line": 363,
      "scenario": "Test sidebar: Verify behavior when typeof tooltip === \"string\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-vouchers-client.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test gift-vouchers-client: Verify behavior when result.success && result.giftVouchers && result.pagination is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-vouchers-client.tsx",
      "type": "if",
      "line": 111,
      "scenario": "Test gift-vouchers-client: Verify behavior when !voucherToDeleteId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-vouchers-client.tsx",
      "type": "if",
      "line": 114,
      "scenario": "Test gift-vouchers-client: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\gift-vouchers\\gift-vouchers-client.tsx",
      "type": "if",
      "line": 249,
      "scenario": "Test gift-vouchers-client: Verify behavior when !open is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test partner-coupon-batches-client: Verify behavior when !batchToDelete is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "type": "if",
      "line": 74,
      "scenario": "Test partner-coupon-batches-client: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "type": "if",
      "line": 93,
      "scenario": "Test partner-coupon-batches-client: Verify behavior when editingBatch is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "type": "if",
      "line": 97,
      "scenario": "Test partner-coupon-batches-client: Verify behavior when result.success && result.batch is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "type": "if",
      "line": 105,
      "scenario": "Test partner-coupon-batches-client: Verify behavior when editingBatch is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-client.tsx",
      "type": "if",
      "line": 177,
      "scenario": "Test partner-coupon-batches-client: Verify behavior when !open is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-source-step.tsx",
      "type": "if",
      "line": 49,
      "scenario": "Test booking-source-step: Verify behavior when !hasSubscriptions && !hasVouchers && !form.getValues(\"source\") is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-source-step.tsx",
      "type": "if",
      "line": 64,
      "scenario": "Test booking-source-step: Verify behavior when treatmentFromSub is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-source-step.tsx",
      "type": "if",
      "line": 65,
      "scenario": "Test booking-source-step: Verify behavior when treatmentFromSub.pricingType === \"duration_based\" && sub.selectedDurationId is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-source-step.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test booking-source-step: Verify behavior when duration is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\booking-source-step.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test booking-source-step: Verify behavior when sub.expiryDate is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 26,
      "scenario": "Test sidebar: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 46,
      "scenario": "Test sidebar: Verify behavior when setOpenProp is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test sidebar: Verify behavior when event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey) is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 103,
      "scenario": "Test sidebar: Verify behavior when collapsible === \"none\" is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test sidebar: Verify behavior when isMobile is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 361,
      "scenario": "Test sidebar: Verify behavior when !tooltip is true/false"
    },
    {
      "file": "components\\ui\\sidebar.tsx",
      "type": "if",
      "line": 362,
      "scenario": "Test sidebar: Verify behavior when typeof tooltip === \"string\" is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test login-form: Verify behavior when emailInputRef.current is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 47,
      "scenario": "Test login-form: Verify behavior when !identifier || !password is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 58,
      "scenario": "Test login-form: Verify behavior when result?.error is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 60,
      "scenario": "Test login-form: Verify behavior when result.error === \"No user found\" is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test login-form: Verify behavior when result.error === \"Invalid password\" is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 74,
      "scenario": "Test login-form: Verify behavior when result?.ok is true/false"
    },
    {
      "file": "components\\auth\\login\\login-form.tsx",
      "type": "if",
      "line": 100,
      "scenario": "Test login-form: Verify behavior when loginType === \"email\" is true/false"
    },
    {
      "file": "components\\auth\\forgot-password\\forgot-password-form.tsx",
      "type": "if",
      "line": 25,
      "scenario": "Test forgot-password-form: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\auth\\forgot-password\\forgot-password-form.tsx",
      "type": "if",
      "line": 30,
      "scenario": "Test forgot-password-form: Verify behavior when success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "type": "if",
      "line": 58,
      "scenario": "Test coupons-client: Verify behavior when !couponToDelete is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "type": "if",
      "line": 60,
      "scenario": "Test coupons-client: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test coupons-client: Verify behavior when editingCoupon is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "type": "if",
      "line": 82,
      "scenario": "Test coupons-client: Verify behavior when result.success && result.data is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test coupons-client: Verify behavior when editingCoupon is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-client.tsx",
      "type": "if",
      "line": 169,
      "scenario": "Test coupons-client: Verify behavior when !open is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\member-gift-voucher-details-modal.tsx",
      "type": "if",
      "line": 24,
      "scenario": "Test member-gift-voucher-details-modal: Verify behavior when !voucher is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\member-gift-voucher-details-modal.tsx",
      "type": "switch",
      "line": 26,
      "scenario": "Test member-gift-voucher-details-modal: Verify all 8 switch cases for status"
    },
    {
      "file": "components\\dashboard\\member\\payment-methods\\payment-method-form.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test payment-method-form: Verify behavior when paymentMethod && isEditing is true/false"
    },
    {
      "file": "components\\dashboard\\member\\payment-methods\\payment-method-form.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test payment-method-form: Verify behavior when !isEditing is true/false"
    },
    {
      "file": "components\\dashboard\\member\\payment-methods\\payment-method-form.tsx",
      "type": "if",
      "line": 75,
      "scenario": "Test payment-method-form: Verify behavior when result.success && result.paymentMethod is true/false"
    },
    {
      "file": "components\\dashboard\\member\\payment-methods\\payment-method-form.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test payment-method-form: Verify behavior when onPaymentMethodUpserted is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\notifications-modal.tsx",
      "type": "if",
      "line": 34,
      "scenario": "Test notifications-modal: Verify behavior when isOpen && currentPreferences is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\notifications-modal.tsx",
      "type": "if",
      "line": 39,
      "scenario": "Test notifications-modal: Verify behavior when isOpen && !currentPreferences && session?.user?.notificationPreferences is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\notifications-modal.tsx",
      "type": "if",
      "line": 47,
      "scenario": "Test notifications-modal: Verify behavior when isOpen is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\notifications-modal.tsx",
      "type": "if",
      "line": 55,
      "scenario": "Test notifications-modal: Verify behavior when selectedMethods.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\notifications-modal.tsx",
      "type": "if",
      "line": 63,
      "scenario": "Test notifications-modal: Verify behavior when result.success && result.notificationPreferences is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 11,
      "scenario": "Test sms-service: Verify behavior when process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 15,
      "scenario": "Test sms-service: Verify behavior when this.isDevelopment && process.env.TWILIO_ACCOUNT_SID === \"your-twilio-account-sid\" is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 19,
      "scenario": "Test sms-service: Verify behavior when !process.env.TWILIO_ACCOUNT_SID.startsWith(\"AC\") is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 20,
      "scenario": "Test sms-service: Verify behavior when !this.isDevelopment || process.env.TWILIO_ACCOUNT_SID !== \"your-twilio-account-sid\" is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 26,
      "scenario": "Test sms-service: Verify behavior when !this.isDevelopment is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 36,
      "scenario": "Test sms-service: Verify behavior when !this.client || !this.messagingServiceSid is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 63,
      "scenario": "Test sms-service: Verify behavior when !cleaned.startsWith(\"+\") is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 65,
      "scenario": "Test sms-service: Verify behavior when cleaned.startsWith(\"0\") is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 69,
      "scenario": "Test sms-service: Verify behavior when cleaned.length === 9 && /^[5-9]/.test(cleaned) is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test sms-service: Verify behavior when cleaned.length === 10 && cleaned.startsWith(\"972\") is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 76,
      "scenario": "Test sms-service: Verify behavior when cleaned.length === 10 && /^[5-9]/.test(cleaned) is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 82,
      "scenario": "Test sms-service: Verify behavior when cleaned.startsWith(\"+9720\") is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 87,
      "scenario": "Test sms-service: Verify behavior when cleaned.startsWith(\"+972\") is true/false"
    },
    {
      "file": "lib\\notifications\\sms-service.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test sms-service: Verify behavior when nationalNumber.length !== 9 || !/^[5-9]/.test(nationalNumber) is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 18,
      "scenario": "Test review-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 24,
      "scenario": "Test review-actions: Verify behavior when !booking is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 25,
      "scenario": "Test review-actions: Verify behavior when booking.status !== \"completed\" is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 28,
      "scenario": "Test review-actions: Verify behavior when booking.userId.toString() !== session.user.id is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 33,
      "scenario": "Test review-actions: Verify behavior when existingReview is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 56,
      "scenario": "Test review-actions: Verify behavior when !session?.user?.roles || !session.user.roles.some(role => [\"admin\", \"professional\"].includes(role)) is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 61,
      "scenario": "Test review-actions: Verify behavior when !review is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 79,
      "scenario": "Test review-actions: Verify behavior when !session?.user?.roles || !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 85,
      "scenario": "Test review-actions: Verify behavior when filters.rating is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 87,
      "scenario": "Test review-actions: Verify behavior when filters.hasResponse !== undefined is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 88,
      "scenario": "Test review-actions: Verify behavior when filters.hasResponse is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 93,
      "scenario": "Test review-actions: Verify behavior when filters.search is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 133,
      "scenario": "Test review-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 140,
      "scenario": "Test review-actions: Verify behavior when filters.rating is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 142,
      "scenario": "Test review-actions: Verify behavior when filters.search is true/false"
    },
    {
      "file": "actions\\review-actions.ts",
      "type": "if",
      "line": 206,
      "scenario": "Test review-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\review-detail-modal.tsx",
      "type": "if",
      "line": 32,
      "scenario": "Test review-detail-modal: Verify behavior when !review is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\review-detail-modal.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test review-detail-modal: Verify behavior when !professionalResponse.trim() is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test phone-input: Verify behavior when typeof ref === \"function\" is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 44,
      "scenario": "Test phone-input: Verify behavior when ref is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 51,
      "scenario": "Test phone-input: Verify behavior when selectedCode === \"+972\" && processedValue && !processedValue.startsWith(\"5\") is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test phone-input: Verify behavior when hiddenInputRef.current is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test phone-input: Verify behavior when onPhoneChange is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 65,
      "scenario": "Test phone-input: Verify behavior when phoneNumber is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test phone-input: Verify behavior when onPhoneChange is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test phone-input: Verify behavior when hiddenInputRef.current is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test phone-input: Verify behavior when typeof fullNumberValue === \"string\" is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test phone-input: Verify behavior when fullNumberValue === \"\" is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test phone-input: Verify behavior when matchedCountry is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 92,
      "scenario": "Test phone-input: Verify behavior when newSelectedCode === \"+972\" && newPhoneNumber.startsWith(\"0\") is true/false"
    },
    {
      "file": "components\\common\\phone-input.tsx",
      "type": "if",
      "line": 99,
      "scenario": "Test phone-input: Verify behavior when propsDefaultValue is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-form.tsx",
      "type": "switch",
      "line": 41,
      "scenario": "Test address-form: Verify all 5 switch cases for data.addressType"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-form.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test address-form: Verify behavior when result.success && result.address is true/false"
    },
    {
      "file": "components\\dashboard\\member\\addresses\\address-form.tsx",
      "type": "if",
      "line": 76,
      "scenario": "Test address-form: Verify behavior when onSuccess is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 58,
      "scenario": "Test register-form: Verify behavior when confirmPassword is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test register-form: Verify behavior when password !== confirmPassword is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 74,
      "scenario": "Test register-form: Verify behavior when isProfessional is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test register-form: Verify behavior when !result.success is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 78,
      "scenario": "Test register-form: Verify behavior when result.message === \"emailExists\" is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 82,
      "scenario": "Test register-form: Verify behavior when result.message === \"phoneExists\" is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test register-form: Verify behavior when result.message === \"weakPassword\" is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 89,
      "scenario": "Test register-form: Verify behavior when result.message === \"invalidDateOfBirth\" is true/false"
    },
    {
      "file": "components\\auth\\register\\register-form.tsx",
      "type": "if",
      "line": 93,
      "scenario": "Test register-form: Verify behavior when result.message === \"missingFields\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "type": "if",
      "line": 49,
      "scenario": "Test payment-step: Verify behavior when localPaymentMethods.length > 0 && !form.getValues(\"selectedPaymentMethodId\") is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test payment-step: Verify behavior when defaultMethod is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test payment-step: Verify behavior when existingIndex !== -1 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test payment-step: Verify behavior when upsertedMethod.isDefault is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "type": "if",
      "line": 79,
      "scenario": "Test payment-step: Verify behavior when isClientLoading || !calculatedPrice is true/false"
    },
    {
      "file": "components\\dashboard\\member\\book-treatment\\steps\\payment-step.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test payment-step: Verify behavior when calculatedPrice.isFullyCoveredByVoucherOrSubscription && calculatedPrice.finalAmount === 0 is true/false"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 16,
      "scenario": "Test sms-templates: Verify all 7 switch cases for data.type"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 50,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 75,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 86,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 97,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "if",
      "line": 117,
      "scenario": "Test sms-templates: Verify behavior when data.isForSomeoneElse is true/false"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 120,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "if",
      "line": 140,
      "scenario": "Test sms-templates: Verify behavior when data.isBookerForSomeoneElse && data.actualRecipientName is true/false"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 145,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "lib\\notifications\\templates\\sms-templates.ts",
      "type": "switch",
      "line": 163,
      "scenario": "Test sms-templates: Verify all 3 switch cases for language"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test admin-reviews-client: Verify behavior when activeTab === \"with-reviews\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 66,
      "scenario": "Test admin-reviews-client: Verify behavior when !review is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 84,
      "scenario": "Test admin-reviews-client: Verify behavior when ratingFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 85,
      "scenario": "Test admin-reviews-client: Verify behavior when responseFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test admin-reviews-client: Verify behavior when activeTab === \"without-reviews\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 93,
      "scenario": "Test admin-reviews-client: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 97,
      "scenario": "Test admin-reviews-client: Verify behavior when error is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\reviews\\admin-reviews-client.tsx",
      "type": "if",
      "line": 266,
      "scenario": "Test admin-reviews-client: Verify behavior when page > data.totalPages is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 55,
      "scenario": "Test guest-subscription-wizard: Verify behavior when guestUserId is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 67,
      "scenario": "Test guest-subscription-wizard: Verify behavior when !guestUserId is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test guest-subscription-wizard: Verify behavior when result.success && result.userId is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 76,
      "scenario": "Test guest-subscription-wizard: Verify behavior when !selectedSubscriptionId || !selectedTreatmentId is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test guest-subscription-wizard: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "switch",
      "line": 88,
      "scenario": "Test guest-subscription-wizard: Verify all 6 switch cases for currentStep"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 108,
      "scenario": "Test guest-subscription-wizard: Verify behavior when nextState.selectedTreatmentId !== undefined is true/false"
    },
    {
      "file": "components\\subscriptions\\guest-subscription-wizard.tsx",
      "type": "if",
      "line": 111,
      "scenario": "Test guest-subscription-wizard: Verify behavior when nextState.selectedDurationId !== undefined is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 12,
      "scenario": "Test account-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 14,
      "scenario": "Test account-actions: Verify behavior when newPassword !== confirmPassword is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 21,
      "scenario": "Test account-actions: Verify behavior when !passwordValidation.isValid is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 26,
      "scenario": "Test account-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 28,
      "scenario": "Test account-actions: Verify behavior when !user.password is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 32,
      "scenario": "Test account-actions: Verify behavior when !isCurrentPasswordValid is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 46,
      "scenario": "Test account-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 48,
      "scenario": "Test account-actions: Verify behavior when !validateEmail(newEmail) is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 55,
      "scenario": "Test account-actions: Verify behavior when existingUser is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 59,
      "scenario": "Test account-actions: Verify behavior when !otpResult.success is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 70,
      "scenario": "Test account-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 74,
      "scenario": "Test account-actions: Verify behavior when !verifyResult.success is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 81,
      "scenario": "Test account-actions: Verify behavior when existingUser is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 92,
      "scenario": "Test account-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 94,
      "scenario": "Test account-actions: Verify behavior when !validatePhone(newPhone) is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 101,
      "scenario": "Test account-actions: Verify behavior when existingUser is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 105,
      "scenario": "Test account-actions: Verify behavior when !otpResult.success is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 116,
      "scenario": "Test account-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 120,
      "scenario": "Test account-actions: Verify behavior when !verifyResult.success is true/false"
    },
    {
      "file": "actions\\account-actions.ts",
      "type": "if",
      "line": 126,
      "scenario": "Test account-actions: Verify behavior when existingUser is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 14,
      "scenario": "Test treatment-actions: Verify behavior when search is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 15,
      "scenario": "Test treatment-actions: Verify behavior when category is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 16,
      "scenario": "Test treatment-actions: Verify behavior when typeof isActive === \"boolean\" is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 59,
      "scenario": "Test treatment-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 71,
      "scenario": "Test treatment-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 76,
      "scenario": "Test treatment-actions: Verify behavior when !treatment is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 87,
      "scenario": "Test treatment-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 91,
      "scenario": "Test treatment-actions: Verify behavior when !treatment is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 104,
      "scenario": "Test treatment-actions: Verify behavior when !treatment is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 117,
      "scenario": "Test treatment-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 120,
      "scenario": "Test treatment-actions: Verify behavior when !treatment is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 138,
      "scenario": "Test treatment-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\treatment-actions.ts",
      "type": "if",
      "line": 142,
      "scenario": "Test treatment-actions: Verify behavior when !originalTreatment is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 73,
      "scenario": "Test member-bookings-client: Verify behavior when statusFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 74,
      "scenario": "Test member-bookings-client: Verify behavior when treatmentFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 75,
      "scenario": "Test member-bookings-client: Verify behavior when dateRangeFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test member-bookings-client: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 86,
      "scenario": "Test member-bookings-client: Verify behavior when error is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 94,
      "scenario": "Test member-bookings-client: Verify behavior when !data?.bookings || data.bookings.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\bookings\\member-bookings-client.tsx",
      "type": "if",
      "line": 246,
      "scenario": "Test member-bookings-client: Verify behavior when page > data.totalPages is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 17,
      "scenario": "Test preferences-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 22,
      "scenario": "Test preferences-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 54,
      "scenario": "Test preferences-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 56,
      "scenario": "Test preferences-actions: Verify behavior when !preferences.therapistGender || ![\"male\", \"female\", \"any\"].includes(preferences.therapistGender) is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 67,
      "scenario": "Test preferences-actions: Verify behavior when !updatedUser is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 83,
      "scenario": "Test preferences-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 85,
      "scenario": "Test preferences-actions: Verify behavior when !preferences.methods || preferences.methods.length === 0 is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test preferences-actions: Verify behavior when !preferences.methods.every((method) => [\"email\", \"sms\"].includes(method)) is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 92,
      "scenario": "Test preferences-actions: Verify behavior when !preferences.language || ![\"he\", \"en\", \"ru\"].includes(preferences.language) is true/false"
    },
    {
      "file": "actions\\preferences-actions.ts",
      "type": "if",
      "line": 104,
      "scenario": "Test preferences-actions: Verify behavior when !updatedUser is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\professionals\\tabs\\professional-basic-info-tab.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test professional-basic-info-tab: Verify behavior when newStatus === professional.status && adminNote === professional.adminNotes is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\professionals\\tabs\\professional-basic-info-tab.tsx",
      "type": "if",
      "line": 77,
      "scenario": "Test professional-basic-info-tab: Verify behavior when !dateString is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-row.tsx",
      "type": "if",
      "line": 59,
      "scenario": "Test user-subscription-row: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-row.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test user-subscription-row: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-row.tsx",
      "type": "if",
      "line": 102,
      "scenario": "Test user-subscription-row: Verify behavior when !dateInput is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-row.tsx",
      "type": "if",
      "line": 106,
      "scenario": "Test user-subscription-row: Verify behavior when isNaN(date.getTime()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-row.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test user-subscription-row: Verify behavior when !cardNumber is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 58,
      "scenario": "Test address-actions: Verify behavior when !address is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 75,
      "scenario": "Test address-actions: Verify behavior when typeof plainObj.country !== \"string\" && plainObj.country !== undefined is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 83,
      "scenario": "Test address-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 96,
      "scenario": "Test address-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 111,
      "scenario": "Test address-actions: Verify behavior when error instanceof z.ZodError is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 120,
      "scenario": "Test address-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 134,
      "scenario": "Test address-actions: Verify behavior when error instanceof z.ZodError is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 142,
      "scenario": "Test address-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\address-actions.ts",
      "type": "if",
      "line": 152,
      "scenario": "Test address-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 15,
      "scenario": "Test role-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 17,
      "scenario": "Test role-actions: Verify behavior when !session.user.roles.includes(role) is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 35,
      "scenario": "Test role-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 37,
      "scenario": "Test role-actions: Verify behavior when !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 42,
      "scenario": "Test role-actions: Verify behavior when !availableRoles.includes(role) is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 46,
      "scenario": "Test role-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 48,
      "scenario": "Test role-actions: Verify behavior when !user.roles.includes(role) is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 59,
      "scenario": "Test role-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 61,
      "scenario": "Test role-actions: Verify behavior when !session.user.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 67,
      "scenario": "Test role-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 68,
      "scenario": "Test role-actions: Verify behavior when user.roles.length <= 1 is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 72,
      "scenario": "Test role-actions: Verify behavior when user.roles.includes(role) is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 84,
      "scenario": "Test role-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 88,
      "scenario": "Test role-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\role-actions.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test role-actions: Verify behavior when !user.roles.includes(role) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\professional-responses-dialog.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test professional-responses-dialog: Verify behavior when !open || !bookingId is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\professional-responses-dialog.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test professional-responses-dialog: Verify behavior when result.success && result.responses is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\professional-responses-dialog.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test professional-responses-dialog: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\professional-responses-dialog.tsx",
      "type": "switch",
      "line": 59,
      "scenario": "Test professional-responses-dialog: Verify all 5 switch cases for status"
    },
    {
      "file": "components\\dashboard\\admin\\bookings\\professional-responses-dialog.tsx",
      "type": "switch",
      "line": 78,
      "scenario": "Test professional-responses-dialog: Verify all 4 switch cases for method"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-details-modal.tsx",
      "type": "if",
      "line": 35,
      "scenario": "Test user-subscription-details-modal: Verify behavior when !userSubscription is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-details-modal.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test user-subscription-details-modal: Verify behavior when !dateInput is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-details-modal.tsx",
      "type": "if",
      "line": 40,
      "scenario": "Test user-subscription-details-modal: Verify behavior when isNaN(date.getTime()) is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-details-modal.tsx",
      "type": "if",
      "line": 44,
      "scenario": "Test user-subscription-details-modal: Verify behavior when !dateInput is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-details-modal.tsx",
      "type": "if",
      "line": 46,
      "scenario": "Test user-subscription-details-modal: Verify behavior when isNaN(date.getTime()) is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\treatment-preferences-modal.tsx",
      "type": "if",
      "line": 30,
      "scenario": "Test treatment-preferences-modal: Verify behavior when isOpen && currentPreferences is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\treatment-preferences-modal.tsx",
      "type": "if",
      "line": 33,
      "scenario": "Test treatment-preferences-modal: Verify behavior when isOpen && !currentPreferences && session?.user?.treatmentPreferences is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\treatment-preferences-modal.tsx",
      "type": "if",
      "line": 37,
      "scenario": "Test treatment-preferences-modal: Verify behavior when isOpen is true/false"
    },
    {
      "file": "components\\dashboard\\preferences\\treatment-preferences-modal.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test treatment-preferences-modal: Verify behavior when result.success && result.treatmentPreferences is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 32,
      "scenario": "Test i18n: Verify behavior when typeof window !== \"undefined\" is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 34,
      "scenario": "Test i18n: Verify behavior when stored === \"he\" || stored === \"en\" || stored === \"ru\" is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 42,
      "scenario": "Test i18n: Verify behavior when typeof window !== \"undefined\" is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test i18n: Verify behavior when missingKeys.size === 0 is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 62,
      "scenario": "Test i18n: Verify behavior when window.getMissingTranslations is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 67,
      "scenario": "Test i18n: Verify behavior when typeof document !== \"undefined\" is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test i18n: Verify behavior when newDir === \"rtl\" is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 83,
      "scenario": "Test i18n: Verify behavior when current && typeof current === \"object\" && k in current is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 88,
      "scenario": "Test i18n: Verify behavior when !keyFound || typeof current !== \"string\" is true/false"
    },
    {
      "file": "lib\\translations\\i18n.tsx",
      "type": "if",
      "line": 99,
      "scenario": "Test i18n: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\treatments\\treatment-form.tsx",
      "type": "if",
      "line": 80,
      "scenario": "Test treatment-form: Verify behavior when durations.length > 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\treatments\\treatment-form.tsx",
      "type": "if",
      "line": 92,
      "scenario": "Test treatment-form: Verify behavior when treatment is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 82,
      "scenario": "Test working-hours: Verify behavior when this.isActive && !this.priceAddition is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 84,
      "scenario": "Test working-hours: Verify behavior when !this.hasPriceAddition is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 86,
      "scenario": "Test working-hours: Verify behavior when this.hasPriceAddition && this.priceAddition && this.priceAddition.amount === 0 is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 158,
      "scenario": "Test working-hours: Verify behavior when this.isNew && this.fixedHours.length === 0 is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 174,
      "scenario": "Test working-hours: Verify behavior when !existingDay is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 189,
      "scenario": "Test working-hours: Verify behavior when dates.length !== uniqueDates.length is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 192,
      "scenario": "Test working-hours: Verify behavior when this.specialDateEvents is true/false"
    },
    {
      "file": "lib\\db\\models\\working-hours.ts",
      "type": "if",
      "line": 196,
      "scenario": "Test working-hours: Verify behavior when eventNames.length !== uniqueEventNames.length is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 12,
      "scenario": "Test utils: Verify behavior when !date is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 14,
      "scenario": "Test utils: Verify behavior when isNaN(d.getTime()) is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 35,
      "scenario": "Test utils: Verify behavior when amount === undefined || amount === null is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 40,
      "scenario": "Test utils: Verify behavior when isNaN(numericAmount) is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 44,
      "scenario": "Test utils: Verify behavior when language === \"he\" && currency === \"ILS\" is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 47,
      "scenario": "Test utils: Verify behavior when language === \"en\" && currency === \"USD\" is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 49,
      "scenario": "Test utils: Verify behavior when language === \"en\" && currency === \"EUR\" is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 64,
      "scenario": "Test utils: Verify behavior when isNaN(d.getTime()) is true/false"
    },
    {
      "file": "lib\\utils\\utils.ts",
      "type": "if",
      "line": 72,
      "scenario": "Test utils: Verify behavior when isNaN(d.getTime()) is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 33,
      "scenario": "Test professional-booking-view-actions: Verify behavior when !session?.user?.id || !session.user.roles.includes(\"professional\") is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 34,
      "scenario": "Test professional-booking-view-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 39,
      "scenario": "Test professional-booking-view-actions: Verify behavior when !mongoose.Types.ObjectId.isValid(bookingId) is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 58,
      "scenario": "Test professional-booking-view-actions: Verify behavior when !rawBooking is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 83,
      "scenario": "Test professional-booking-view-actions: Verify behavior when rawBooking.treatmentId is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test professional-booking-view-actions: Verify behavior when treatmentDoc.pricingType === \"duration_based\" && rawBooking.selectedDurationId && treatmentDoc.durations is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 95,
      "scenario": "Test professional-booking-view-actions: Verify behavior when selectedDuration is true/false"
    },
    {
      "file": "actions\\professional-booking-view-actions.ts",
      "type": "if",
      "line": 98,
      "scenario": "Test professional-booking-view-actions: Verify behavior when rawBooking.userId &&\r\n      (isAssignedToCurrentPro || isAdmin || rawBooking.status === \"in_process\") is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 22,
      "scenario": "Test subscription-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 42,
      "scenario": "Test subscription-actions: Verify behavior when error instanceof z.ZodError is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 49,
      "scenario": "Test subscription-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 68,
      "scenario": "Test subscription-actions: Verify behavior when !subscription is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 73,
      "scenario": "Test subscription-actions: Verify behavior when error instanceof z.ZodError is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 80,
      "scenario": "Test subscription-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 84,
      "scenario": "Test subscription-actions: Verify behavior when !subscription is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 96,
      "scenario": "Test subscription-actions: Verify behavior when options.isActive !== undefined is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 97,
      "scenario": "Test subscription-actions: Verify behavior when options.search is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 104,
      "scenario": "Test subscription-actions: Verify behavior when options.sort is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 126,
      "scenario": "Test subscription-actions: Verify behavior when !subscription is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 138,
      "scenario": "Test subscription-actions: Verify behavior when !session?.user?.roles.includes(\"admin\") is true/false"
    },
    {
      "file": "actions\\subscription-actions.ts",
      "type": "if",
      "line": 142,
      "scenario": "Test subscription-actions: Verify behavior when !subscription is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\professionals\\professionals-management.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test professionals-management: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\professionals\\professionals-management.tsx",
      "type": "if",
      "line": 69,
      "scenario": "Test professionals-management: Verify behavior when pagination.page !== 1 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\professionals\\professionals-management.tsx",
      "type": "if",
      "line": 99,
      "scenario": "Test professionals-management: Verify behavior when !dateString is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\professionals\\professionals-management.tsx",
      "type": "if",
      "line": 109,
      "scenario": "Test professionals-management: Verify behavior when loading && professionals.length === 0 is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 9,
      "scenario": "Test hero: Verify behavior when !session is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "switch",
      "line": 9,
      "scenario": "Test hero: Verify all 5 switch cases for action"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "switch",
      "line": 21,
      "scenario": "Test hero: Verify all 8 switch cases for action"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 23,
      "scenario": "Test hero: Verify behavior when isMember is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 25,
      "scenario": "Test hero: Verify behavior when isMember is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 28,
      "scenario": "Test hero: Verify behavior when isMember is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 40,
      "scenario": "Test hero: Verify behavior when !session is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 72,
      "scenario": "Test hero: Verify behavior when isMember is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 94,
      "scenario": "Test hero: Verify behavior when isProfessional is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 102,
      "scenario": "Test hero: Verify behavior when isPartner is true/false"
    },
    {
      "file": "components\\landing\\hero.tsx",
      "type": "if",
      "line": 110,
      "scenario": "Test hero: Verify behavior when isAdmin is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-columns.tsx",
      "type": "if",
      "line": 21,
      "scenario": "Test coupons-columns: Verify behavior when !partner is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-columns.tsx",
      "type": "if",
      "line": 22,
      "scenario": "Test coupons-columns: Verify behavior when typeof partner === \"string\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\coupons\\coupons-columns.tsx",
      "type": "switch",
      "line": 29,
      "scenario": "Test coupons-columns: Verify all 5 switch cases for status"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-columns.tsx",
      "type": "if",
      "line": 23,
      "scenario": "Test partner-coupon-batches-columns: Verify behavior when !partner is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-columns.tsx",
      "type": "if",
      "line": 25,
      "scenario": "Test partner-coupon-batches-columns: Verify behavior when typeof partner === \"string\" is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\partner-coupon-batches-columns.tsx",
      "type": "switch",
      "line": 31,
      "scenario": "Test partner-coupon-batches-columns: Verify all 5 switch cases for status"
    },
    {
      "file": "components\\dashboard\\admin\\treatments\\treatments-client.tsx",
      "type": "if",
      "line": 26,
      "scenario": "Test treatments-client: Verify behavior when !result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\treatments\\treatments-client.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test treatments-client: Verify behavior when isAddingTreatment is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\treatments\\treatments-client.tsx",
      "type": "if",
      "line": 53,
      "scenario": "Test treatments-client: Verify behavior when editingTreatment is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 23,
      "scenario": "Test notification-utils: Verify behavior when cleaned.startsWith(\"972\") || cleaned.startsWith(\"+972\") is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 27,
      "scenario": "Test notification-utils: Verify behavior when withoutCountry.length === 10 is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 29,
      "scenario": "Test notification-utils: Verify behavior when cleaned.startsWith(\"1\") || cleaned.startsWith(\"+1\") is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 32,
      "scenario": "Test notification-utils: Verify behavior when withoutCountry.length === 10 is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 41,
      "scenario": "Test notification-utils: Verify behavior when !email || !email.includes(\"@\") is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 43,
      "scenario": "Test notification-utils: Verify behavior when username.length <= 2 is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 51,
      "scenario": "Test notification-utils: Verify behavior when digits.length <= 4 is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 62,
      "scenario": "Test notification-utils: Verify behavior when !notification is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 66,
      "scenario": "Test notification-utils: Verify behavior when now - notification.timestamp > 10 * 60 * 1000 is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 83,
      "scenario": "Test notification-utils: Verify behavior when process.env.NODE_ENV === \"development\" is true/false"
    },
    {
      "file": "lib\\notifications\\notification-utils.ts",
      "type": "if",
      "line": 87,
      "scenario": "Test notification-utils: Verify behavior when content.code is true/false"
    },
    {
      "file": "components\\common\\ui\\carousel.tsx",
      "type": "if",
      "line": 22,
      "scenario": "Test carousel: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\common\\ui\\carousel.tsx",
      "type": "if",
      "line": 38,
      "scenario": "Test carousel: Verify behavior when !api is true/false"
    },
    {
      "file": "components\\common\\ui\\carousel.tsx",
      "type": "if",
      "line": 46,
      "scenario": "Test carousel: Verify behavior when event.key === \"ArrowLeft\" is true/false"
    },
    {
      "file": "components\\common\\ui\\carousel.tsx",
      "type": "if",
      "line": 49,
      "scenario": "Test carousel: Verify behavior when event.key === \"ArrowRight\" is true/false"
    },
    {
      "file": "components\\common\\ui\\carousel.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test carousel: Verify behavior when !api || !setApi is true/false"
    },
    {
      "file": "components\\common\\ui\\carousel.tsx",
      "type": "if",
      "line": 55,
      "scenario": "Test carousel: Verify behavior when !api is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\batch-coupons-modal.tsx",
      "type": "if",
      "line": 37,
      "scenario": "Test batch-coupons-modal: Verify behavior when open && batch is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\batch-coupons-modal.tsx",
      "type": "if",
      "line": 57,
      "scenario": "Test batch-coupons-modal: Verify behavior when selected is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\batch-coupons-modal.tsx",
      "type": "if",
      "line": 61,
      "scenario": "Test batch-coupons-modal: Verify behavior when selectedCoupons.length === coupons.length is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\batch-coupons-modal.tsx",
      "type": "if",
      "line": 66,
      "scenario": "Test batch-coupons-modal: Verify behavior when selectedCoupons.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\partner-coupon-batches\\batch-coupons-modal.tsx",
      "type": "if",
      "line": 71,
      "scenario": "Test batch-coupons-modal: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\ui\\carousel.tsx",
      "type": "if",
      "line": 22,
      "scenario": "Test carousel: Verify behavior when !context is true/false"
    },
    {
      "file": "components\\ui\\carousel.tsx",
      "type": "if",
      "line": 37,
      "scenario": "Test carousel: Verify behavior when !api is true/false"
    },
    {
      "file": "components\\ui\\carousel.tsx",
      "type": "if",
      "line": 46,
      "scenario": "Test carousel: Verify behavior when event.key === \"ArrowLeft\" is true/false"
    },
    {
      "file": "components\\ui\\carousel.tsx",
      "type": "if",
      "line": 48,
      "scenario": "Test carousel: Verify behavior when event.key === \"ArrowRight\" is true/false"
    },
    {
      "file": "components\\ui\\carousel.tsx",
      "type": "if",
      "line": 52,
      "scenario": "Test carousel: Verify behavior when !api || !setApi is true/false"
    },
    {
      "file": "components\\ui\\carousel.tsx",
      "type": "if",
      "line": 55,
      "scenario": "Test carousel: Verify behavior when !api is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 11,
      "scenario": "Test payment-method-actions: Verify behavior when !session?.user is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 21,
      "scenario": "Test payment-method-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 23,
      "scenario": "Test payment-method-actions: Verify behavior when data.isDefault is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 29,
      "scenario": "Test payment-method-actions: Verify behavior when !cardName is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 51,
      "scenario": "Test payment-method-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 53,
      "scenario": "Test payment-method-actions: Verify behavior when data.isDefault is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 60,
      "scenario": "Test payment-method-actions: Verify behavior when !paymentMethod is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 71,
      "scenario": "Test payment-method-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 76,
      "scenario": "Test payment-method-actions: Verify behavior when !paymentMethod is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 87,
      "scenario": "Test payment-method-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 95,
      "scenario": "Test payment-method-actions: Verify behavior when !paymentMethod is true/false"
    },
    {
      "file": "actions\\payment-method-actions.ts",
      "type": "if",
      "line": 107,
      "scenario": "Test payment-method-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "app\\dashboard\\(user)\\(roles)\\admin\\users\\page.tsx",
      "type": "if",
      "line": 26,
      "scenario": "Test page: Verify behavior when !session.user.roles?.includes(\"admin\") is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-admin-card.tsx",
      "type": "if",
      "line": 56,
      "scenario": "Test user-subscription-admin-card: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\admin\\user-subscriptions\\user-subscription-admin-card.tsx",
      "type": "if",
      "line": 68,
      "scenario": "Test user-subscription-admin-card: Verify behavior when result.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\member-gift-vouchers-client.tsx",
      "type": "if",
      "line": 41,
      "scenario": "Test member-gift-vouchers-client: Verify behavior when ownedResult.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\member-gift-vouchers-client.tsx",
      "type": "if",
      "line": 43,
      "scenario": "Test member-gift-vouchers-client: Verify behavior when purchasedResult.success is true/false"
    },
    {
      "file": "components\\dashboard\\member\\gift-vouchers\\member-gift-vouchers-client.tsx",
      "type": "if",
      "line": 50,
      "scenario": "Test member-gift-vouchers-client: Verify behavior when initialOwnedVouchers.length === 0 && initialPurchasedVouchers.length === 0 is true/false"
    },
    {
      "file": "components\\dashboard\\member\\reviews\\member-reviews-client.tsx",
      "type": "switch",
      "line": 28,
      "scenario": "Test member-reviews-client: Verify all 4 switch cases for locale"
    },
    {
      "file": "components\\dashboard\\member\\reviews\\member-reviews-client.tsx",
      "type": "if",
      "line": 70,
      "scenario": "Test member-reviews-client: Verify behavior when ratingFilter !== \"all\" is true/false"
    },
    {
      "file": "components\\dashboard\\member\\reviews\\member-reviews-client.tsx",
      "type": "if",
      "line": 73,
      "scenario": "Test member-reviews-client: Verify behavior when isLoading is true/false"
    },
    {
      "file": "components\\dashboard\\member\\reviews\\member-reviews-client.tsx",
      "type": "if",
      "line": 80,
      "scenario": "Test member-reviews-client: Verify behavior when error is true/false"
    },
    {
      "file": "lib\\validation\\booking-schemas.ts",
      "type": "if",
      "line": 60,
      "scenario": "Test booking-schemas: Verify behavior when data.isBookingForSomeoneElse is true/false"
    },
    {
      "file": "lib\\validation\\booking-schemas.ts",
      "type": "if",
      "line": 65,
      "scenario": "Test booking-schemas: Verify behavior when data.isBookingForSomeoneElse is true/false"
    },
    {
      "file": "lib\\validation\\booking-schemas.ts",
      "type": "if",
      "line": 72,
      "scenario": "Test booking-schemas: Verify behavior when data.isBookingForSomeoneElse is true/false"
    },
    {
      "file": "lib\\validation\\booking-schemas.ts",
      "type": "if",
      "line": 78,
      "scenario": "Test booking-schemas: Verify behavior when data.isBookingForSomeoneElse && data.recipientBirthDate is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 16,
      "scenario": "Test password-reset-actions: Verify behavior when !validateEmail(email) is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 23,
      "scenario": "Test password-reset-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 52,
      "scenario": "Test password-reset-actions: Verify behavior when !result.success is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 74,
      "scenario": "Test password-reset-actions: Verify behavior when !tokenData is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 84,
      "scenario": "Test password-reset-actions: Verify behavior when now > tokenData.expiryDate is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 89,
      "scenario": "Test password-reset-actions: Verify behavior when tokenData.used is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 97,
      "scenario": "Test password-reset-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 117,
      "scenario": "Test password-reset-actions: Verify behavior when !tokenVerification.success || !tokenVerification.userId is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 126,
      "scenario": "Test password-reset-actions: Verify behavior when !passwordValidation.isValid is true/false"
    },
    {
      "file": "actions\\password-reset-actions.ts",
      "type": "if",
      "line": 136,
      "scenario": "Test password-reset-actions: Verify behavior when !updateResult is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 7,
      "scenario": "Test profile-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 15,
      "scenario": "Test profile-actions: Verify behavior when !name is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 19,
      "scenario": "Test profile-actions: Verify behavior when day && month && year is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 21,
      "scenario": "Test profile-actions: Verify behavior when isNaN(dateOfBirth.getTime()) is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 26,
      "scenario": "Test profile-actions: Verify behavior when gender is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 27,
      "scenario": "Test profile-actions: Verify behavior when dateOfBirth is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 30,
      "scenario": "Test profile-actions: Verify behavior when !updatedUser is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 38,
      "scenario": "Test profile-actions: Verify behavior when !session?.user?.id is true/false"
    },
    {
      "file": "actions\\profile-actions.ts",
      "type": "if",
      "line": 46,
      "scenario": "Test profile-actions: Verify behavior when !user is true/false"
    },
    {
      "file": "components\\dashboard\\member\\reviews\\create-review-modal.tsx",
      "type": "if",
      "line": 34,
      "scenario": "Test create-review-modal: Verify behavior when rating === 0 is true/false"
    },
    {
      "file": "lib\\db\\models\\treatment.ts",
      "type": "if",
      "line": 58,
      "scenario": "Test treatment: Verify behavior when this.pricingType === \"fixed\" is true/false"
    },
    {
      "file": "lib\\db\\models\\treatment.ts",
      "type": "if",
      "line": 58,
      "scenario": "Test treatment: Verify behavior when this.fixedPrice == null || this.fixedProfessionalPrice == null is true/false"
    },
    {
      "file": "lib\\db\\models\\treatment.ts",
      "type": "if",
      "line": 64,
      "scenario": "Test treatment: Verify behavior when this.pricingType === \"duration_based\" is true/false"
    },
    {
      "file": "lib\\db\\models\\treatment.ts",
      "type": "if",
      "line": 65,
      "scenario": "Test treatment: Verify behavior when !this.durations || this.durations.length === 0 is true/false"
    },
    {
      "file": "lib\\db\\models\\user.ts",
      "type": "if",
      "line": 55,
      "scenario": "Test user: Verify behavior when this.isNew || !this.treatmentPreferences is true/false"
    },
    {
      "file": "lib\\db\\models\\user.ts",
      "type": "if",
      "line": 57,
      "scenario": "Test user: Verify behavior when this.isNew || !this.notificationPreferences is true/false"
    },
    {
      "file": "lib\\db\\models\\user.ts",
      "type": "if",
      "line": 60,
      "scenario": "Test user: Verify behavior when this.treatmentPreferences && this.treatmentPreferences.therapistGender === undefined is true/false"
    },
    {
      "file": "lib\\db\\models\\user.ts",
      "type": "if",
      "line": 63,
      "scenario": "Test user: Verify behavior when this.notificationPreferences && this.notificationPreferences.methods === undefined is true/false"
    },
    {
      "file": "lib\\db\\models\\user.ts",
      "type": "if",
      "line": 66,
      "scenario": "Test user: Verify behavior when this.notificationPreferences && this.notificationPreferences.language === undefined is true/false"
    }
  ]
}